<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>とある飛空士への追憶 | 二次元的罗马假日</title>
      <link href="/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/"/>
      <url>/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/10829_JJ2DE.jpg" srcset="/img/loading.gif" alt="" /></p><p>以前在高中的时候就被别人推荐过这本小说，但是时间太少就没有看，这次住院的时候没事干就顺便把这个的剧场版看了。</p><p>能吐槽的就是细节问题和声优的实力差，男主背景经历单薄，女主没有啥训练就可以承受这么大的加速度，撒金粉的行为也太不符合现实了，给人的感觉很怪。</p><p>但或许这一切的不符合逻辑才会让这部作品富有浪漫感。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182851.png" srcset="/img/loading.gif" alt="" /></p><p>可能对于看惯了女主倒贴的戏码的阿宅来说，最后没有在一起，男主也没有功成名就比较介意，但事实上这个故事就是这样，平淡而浪漫。简单的开头，富有激情和感动的突出包围，女主的形象转变，飞行员对决，任务完成的浪漫诀别。看到开头就能猜到结尾的剧情，事实上也非常动人，对于动画来说，讲好一个普通的故事比展开宏大的世界不一定简单，却能带给观众好的体验。</p><p>结尾男主驾驶飞机伴随着背景交响乐起舞，挥洒金粉，女主在舰头伫立注视，真的是非常浪漫。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182823.png" srcset="/img/loading.gif" alt="" /></p><p>最后的最后还是吐槽一点，我看的时候有EVA剧场的既视感，一看人物设定：松原秀典，妈的果然是你，我还挺喜欢的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182635.png" srcset="/img/loading.gif" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期动画计划</title>
      <link href="/2020/07/19/%E6%9A%91%E6%9C%9F%E5%8A%A8%E7%94%BB%E8%AE%A1%E5%88%92/"/>
      <url>/2020/07/19/%E6%9A%91%E6%9C%9F%E5%8A%A8%E7%94%BB%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="sf"><a class="markdownIt-Anchor" href="#sf"></a> SF</h3><p><a href="https://www.bilibili.com/bangumi/media/md1564/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">攻壳机动队</a></p><p><a href="">机动战士Z高达</a></p><p><a href="https://www.bilibili.com/bangumi/media/md790/?from=search&amp;seid=7144638998721905967" target="_blank" rel="noopener">交响诗篇</a></p><p><a href="https://www.bilibili.com/bangumi/media/md1187/?from=search&amp;seid=7144638998721905967" target="_blank" rel="noopener">超时空要塞 Macross</a></p><p><a href="https://www.bilibili.com/bangumi/media/md1189/?from=search&amp;seid=7144638998721905967" target="_blank" rel="noopener">超时空要塞 Frontier</a></p><p><a href="https://www.bilibili.com/bangumi/media/md2451/?from=search&amp;seid=12098520779776897377" target="_blank" rel="noopener">宇宙战舰大和号</a></p><p><a href="https://www.bilibili.com/bangumi/media/md2014/?from=search&amp;seid=10993665252440574113" target="_blank" rel="noopener">最终流放</a></p><p><a href="https://www.bilibili.com/bangumi/media/md1867/?from=search&amp;seid=14470018217884445233" target="_blank" rel="noopener">苍穹之法芙娜</a></p><h3 id="漫改"><a class="markdownIt-Anchor" href="#漫改"></a> 漫改</h3><p><a href="https://www.bilibili.com/bangumi/media/md28220475/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">冰海战记</a></p><p><a href="https://www.bilibili.com/bangumi/media/md239/?from=search&amp;seid=13128714668490926215" target="_blank" rel="noopener">银之匙</a></p><p><a href="https://www.bilibili.com/video/BV1SW411U73b?from=search&amp;seid=4615267752378024972" target="_blank" rel="noopener">黑礁</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md1699/?from=search&amp;seid=15887887270956348737" target="_blank" rel="noopener">四月是你的谎言</a></p><p><a href="https://www.bilibili.com/bangumi/media/md28228394/?from=search&amp;seid=15887887270956348737" target="_blank" rel="noopener">昨日之歌</a></p><p><a href="https://www.bilibili.com/bangumi/media/md517/?from=search&amp;seid=16480350447755929885" target="_blank" rel="noopener">现视研</a></p><p><a href="https://www.bilibili.com/video/BV1Jx411U7GZ?from=search&amp;seid=13879546868641194623" target="_blank" rel="noopener">欢迎加入NHK！</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md780/?from=search&amp;seid=14470018217884445233" target="_blank" rel="noopener">坂道上的阿波罗</a></p><p><a href="">枪神</a></p><h3 id="轻改"><a class="markdownIt-Anchor" href="#轻改"></a> 轻改</h3><p><a href="https://www.bilibili.com/bangumi/media/md24120616/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">凉宫春日的忧郁</a></p><p><a href="https://www.bilibili.com/bangumi/media/md28226651/?from=search&amp;seid=15887887270956348737" target="_blank" rel="noopener">重启咲良田</a></p><p><a href="https://www.bilibili.com/bangumi/media/md703/?from=search&amp;seid=4516370422178494231" target="_blank" rel="noopener">人类衰退之后</a></p><p><a href="https://www.bilibili.com/bangumi/media/md106512/?from=search&amp;seid=14470018217884445233" target="_blank" rel="noopener">灰与幻想的格林姆迦尔</a></p><h3 id="动画电影"><a class="markdownIt-Anchor" href="#动画电影"></a> 动画电影</h3><p><a href="">未麻的部屋</a> ✔</p><p><a href="https://www.bilibili.com/video/BV1bs411a7Ab?from=search&amp;seid=3395853779573282301" target="_blank" rel="noopener">机动警察 和平保卫战</a> ✔</p><p><a href="https://www.bilibili.com/video/BV1yx411F7gi?from=search&amp;seid=1425132671869946271" target="_blank" rel="noopener">人狼</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md5297/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">千年女优</a> ✔</p><p><a href="">红辣椒</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md3827/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">飞跃巅峰！</a></p><p><a href="http://www.bimibimi.me/bangumi/bi/2300/" target="_blank" rel="noopener">Hello World</a> ✔</p><p><a href="http://www.bimibimi.me/bangumi/bi/2583/" target="_blank" rel="noopener">知晓天空之蓝的人啊</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/play/ss4155/" target="_blank" rel="noopener">玉子爱情故事</a></p><p><a href="http://www.bimibimi.me/bangumi/bi/2234/" target="_blank" rel="noopener">薄暮</a> ✔</p><p><a href="https://www.bilibili.com/video/BV16W411e74h?from=search&amp;seid=16589069260678361248" target="_blank" rel="noopener">王立宇宙军</a></p><p><a href="https://www.bilibili.com/bangumi/media/md3557/?from=search&amp;seid=7144638998721905967" target="_blank" rel="noopener">超时空要塞 可曾记得爱</a></p><h3 id="百合"><a class="markdownIt-Anchor" href="#百合"></a> 百合</h3><p><a href="https://www.bilibili.com/bangumi/media/md2277/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">少女革命</a></p><p><a href="https://www.bilibili.com/video/BV1ix411T7bT?from=search&amp;seid=12330767630636793620" target="_blank" rel="noopener">圣母在上</a></p><h3 id="其他原创或游戏改"><a class="markdownIt-Anchor" href="#其他原创或游戏改"></a> 其他（原创或游戏改）</h3><p><a href="https://www.bilibili.com/bangumi/media/md3258/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">四畳半神話大系</a></p><p><a href="https://www.bilibili.com/bangumi/media/md13032/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">比宇宙更远的地方</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md2251/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">Lain</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/media/md1294/?from=search&amp;seid=15014533338327845075" target="_blank" rel="noopener">电脑线圈</a></p><p><a href="https://www.bilibili.com/bangumi/media/md419/?from=search&amp;seid=15887887270956348737" target="_blank" rel="noopener">Kill la kill</a> ✔</p><p><a href="https://www.bilibili.com/bangumi/play/ss162/" target="_blank" rel="noopener">罗德岛战记</a></p><p><a href="https://www.bilibili.com/bangumi/media/md2910/?from=search&amp;seid=12715278241030146870" target="_blank" rel="noopener">真实之泪</a></p><p><a href="https://www.bilibili.com/bangumi/media/md2351/?from=search&amp;seid=14470018217884445233" target="_blank" rel="noopener">OTAKU的录像带</a></p><p><a href="">萤火虫之墓</a></p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World|简评</title>
      <link href="/2020/07/16/Hello-World-%E7%AE%80%E8%AF%84/"/>
      <url>/2020/07/16/Hello-World-%E7%AE%80%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/269090_600EK.jpg" srcset="/img/loading.gif" alt="" /></p><p>写不动了，不写了，吊打天气之子，媲美你的名字。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>他人世界末游戏体验</title>
      <link href="/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/307921_Hx4Zm.jpg" srcset="/img/loading.gif" alt="" /></p><h2 id="写在开篇"><a class="markdownIt-Anchor" href="#写在开篇"></a> 写在开篇</h2><p>《他人世界末》是我近年来玩过的国产Gal中剧本完成度最好的，配乐水平很高的，CG质量很高的偏电波作品。</p><p>我一开始是抱着质量能跟《WA2》差不多的心态玩的，玩了木竹樱和赵诗的所有结局之后发现，这也只能算是国产Gal中水平极高的一作，和日本Galgame高水平的作品而言还是无法比拟（就拿WA2的音乐水平来比较就会被完全吊打）</p><h2 id="赵诗线内含剧透"><a class="markdownIt-Anchor" href="#赵诗线内含剧透"></a> 赵诗线（内含剧透）</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgoovgrj20kq0pf767.jpg" srcset="/img/loading.gif" alt="" /></p><p>在三条可攻略角色线路中，我认为赵诗线给我的体验是比较差的，我做出的任何选项并不能影响男主对赵诗的好感，男主一直喜欢的就是沈岩。</p><p>在这条线中我认为这是非常正常的恋爱过程，不存在赵诗舔男主的行为，只是单纯的单恋然后告白在一起，然而蓝姐姐告诉我：不行。</p><p>这条线里我见到了男主无数扭曲的行为，赵诗为了爱情而妥协的行为，为了胃疼而扭曲，并且是从序章中男主的性格铺垫中无法完美解释的，比如：</p><p>1、男主和赵诗在已经成为情侣（选择接受）后，仍然不会将自己换成男友的身份说话，这条我可以勉强理解成男主的自卑心理作祟。（即男主哥哥对男主的阴影，男主无法认同自己接受别人的告白的恋爱，他应该做的是暗恋沈岩）</p><p>2、男主和赵诗在第一次约会逛画展时，提出分开看最后集合的要求，男主遇到沈岩后逃避，赵诗妥协。</p><p>3、四人约会。</p><p>4、男主帮助快出轨的基友哄沈岩，并丢下赵诗一个人去找沈岩。</p><p>5、在无数伪装之下维持着男主和赵诗“表面情侣”的关系，哄着被华昂伤害而堕落的沈岩，最后男主和赵诗分手。（漫长的道别TE）</p><p>6、赵诗宁愿男主一直想着沈岩也要和他维持着情侣的关系。（钟无艳NE）</p><p>在以上的行为中，我只感受到了蓝姐姐对于舔狗的理解：男主舔沈岩，赵诗舔男主，男主不搭理赵诗，赵诗也要贴上去舔，沈岩不喜欢男主，男主也要贴上去舔。</p><p>这条线就是看舔狗舔的心理，我完全无法感受到我的选择对男主心理的影响，男主一直都是喜欢沈岩的，赵诗一直都是宁愿舔着男主也要和男主在一起的女人。</p><p>对于蓝姐姐的舔狗恋爱心理来说，钟无艳结局是很好的，非常有味</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234800.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234812.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235043.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235106.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235128.png" srcset="/img/loading.gif" alt="" /></p><p>蓝姐姐，你对舔狗的理解可真是深刻（无感情）</p><h2 id="偶像线"><a class="markdownIt-Anchor" href="#偶像线"></a> 偶像线</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgn5zfbj20ks0phwg8.jpg" srcset="/img/loading.gif" alt="" /></p><p>根据蓝姐姐在知乎写的回答可以知道我玩偶像线的过程中那么熟悉的感觉，因为这就是顺着gal玩家的毛写的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716000557.png" srcset="/img/loading.gif" alt="" /></p><p>木竹樱和男主是很相像的两人，这一点也在游戏中提到。</p><p>木竹樱活在华昂天才音乐实力和父母的阴影之下，男主活在哥哥的阴影中，两个人都是自卑的人，都是没有安全感的人，对外表现强烈的抗拒心。两个人的共同性让gal玩家在玩的过程中能够体会到攻略的感觉，这也是为什么偶像线带给人的感觉很舒服（顺毛）。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002501.png" srcset="/img/loading.gif" alt="" /></p><p>而木竹樱这条线选起来也很简单，只要顺着她想要的东西一直选就可以GE，但假如有一个选错就会进入其他结局。</p><p>我选“心中”和“邮差”这两个结局说下我的感受。</p><h3 id="心中"><a class="markdownIt-Anchor" href="#心中"></a> 心中</h3><p>这个结局还满现实的，年轻时说下的拯救她，和她一起活下去，在成年工作之后不得不面对现实的艰难时，最后以“只有死亡才能将我们分开”兑现了年少的承诺。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002411.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002847.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002901.png" srcset="/img/loading.gif" alt="" /></p><p>这样的反转带给人的心理震撼很大，让人以为在两人经历了波折之后终于能够在一起幸福地生活下去的时，现实却狠狠地打了你一巴掌。年轻时骄傲的资本却成了未来堕落的契机，不能不让人感到遗憾。</p><h3 id="邮差"><a class="markdownIt-Anchor" href="#邮差"></a> 邮差</h3><p>跨越五年的约定，浪漫到我要从嘴里吐出砂糖了。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004012.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004029.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>“人啊，幸福地活下去吧！”</p></blockquote><p>五年之后，小偶像变成了家喻户晓的明星，而我只是成为了一名普通公司的职员，面对如此巨大的地位差距，我是否有勇气能去与她见面呢，这成了一个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004349.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>这里想要的结果是YES，又或是NO呢。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004536.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004546.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004557.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004616.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>最终，我没有选择上车，我看着最后一辆174路远去，直至眼睛发胀发酸。</p></blockquote><p>我一开始的想法与大多数玩家是一致的，既然得到了机会为什么不上车呢？等待了五年，最后等到了爱情的一无所有。</p><p>在看到蓝姐姐的回答之后，我陷入了思考。</p><blockquote><p>蓝莲安：举个例子，木竹樱的邮差END很多人都说我没有心，为什么不上车，你设身处地想想自己处于相同情况时，周围的人会不会劝你上车，你自己有没有勇气上车。这个结局之所以不让主角上车，就是为了让玩家记住这种遗憾感，现实生活中遇到相似的困境时，能拿出勇气“上车”。</p></blockquote><p>是啊，面对身份远高于我的偶像，我是否有勇气能上车。我与她的联系仅仅只有一个五年前月夜下的浪漫约定，而这一切随着时间又是否会改变，我不敢想，也不愿去想；我害怕，害怕她没有来，我同样害怕，害怕她来了，我配不上她。这样的矛盾是一个经历过强烈自卑的人会有的心理，面对飘渺的爱情我们是否有勇气去面对，去抓住爱情的锁链。蓝姐姐让我们思考这个问题，让我们在现实中遇到这种问题时能够做出能让自己不遗憾的选择。</p><p>当然，现实中我也不可能遇到小偶像（笑）。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>我并没有玩沈岩线，其一是因为这样的黑长直模板并没有像冬马一样吸引我，其二是因为我不想当舔狗。</p><p>总体上来说这部作品的文学性在gal作品里面算很上等的（青春伤痕文学，蓝姐姐又被称为动漫界郭敬明），其反转和立意在近年众多的国产Gal作品中独树一帜，打破了国产Gal的人物对话偏日语对话的尴尬，配乐敷衍水平低，声优的表现不尽人意的刻板印象。</p><p>最后希望蓝姐姐能在DLC中加入攻爷的攻略线，谢谢（砰砰砰）</p><p>购买链接：<a href="https://store.steampowered.com/app/1225780/_Onlooker/" target="_blank" rel="noopener">https://store.steampowered.com/app/1225780/_Onlooker/</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Galgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板整理</title>
      <link href="/2019/01/26/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/01/26/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>预计可能会有：</p><p>数论：快速幂，gcd，exgcd，逆元，Lucas定理，CRT，BSGS，欧拉函数，线性筛，矩阵乘法，FFT</p><p>图论：最短路，最小生成树，最大流，费用流，有向图的强连通分量，无向图的边的双联通分量</p><p>树：LCA，树分治，树链剖分</p><p>数据结构：树状数组，线段树，Splay，Treap，LCT，莫队，左偏树</p><p>先写一部分吧，反正大多数也不会，会写多少写多少吧…</p><a id="more"></a><h3 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h3><h4 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h4><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll n, ll mod)</span></span>&#123;ll res=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(n)&#123;        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) res=(res*a)%mod;        n&gt;&gt;=<span class="hljs-number">1</span>;        a=(a*a)%mod;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h4 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> gcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:gcd(b,a%b);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">return</span> a*b/gcd(a,b);&#125;</code></pre><h4 id="exgcd"><a class="markdownIt-Anchor" href="#exgcd"></a> exgcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!b)&#123;c=a;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;    <span class="hljs-keyword">else</span>&#123;exgcd(b,a%b,c,y,x);y-=(a/b)*x;&#125;&#125;</code></pre><h4 id="逆元"><a class="markdownIt-Anchor" href="#逆元"></a> 逆元</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">return</span> qpow(a,n<span class="hljs-number">-2</span>,n);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> x, y;    exgcd(a,n,x,y);    <span class="hljs-keyword">return</span> (x+n)%n;&#125;</code></pre><h4 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(not_prime, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(not_prime));    phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;        <span class="hljs-keyword">if</span>(!not_prime[i])&#123;prime[++top]=i;phi[i]=i<span class="hljs-number">-1</span>;&#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= top&amp;&amp;i*prime[j] &lt;= n; ++j)&#123;            not_prime[prime[j]*i]=<span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;phi[prime[j]*i]=phi[i]*prime[j];<span class="hljs-keyword">break</span>;&#125;            phi[prime[j]*i]=phi[i]*(prime[j]<span class="hljs-number">-1</span>);        &#125;    &#125;&#125;</code></pre><h4 id="中国剩余定理"><a class="markdownIt-Anchor" href="#中国剩余定理"></a> 中国剩余定理</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CRT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> m[],<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)        M *= m[i];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)    &#123;        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">int</span> Mi = M / m[i];        exgcd(Mi, m[i], x, y);        ans = (ans + Mi * x * a[i]) % M;    &#125;    <span class="hljs-keyword">if</span>(ans &lt; <span class="hljs-number">0</span>) ans += M;    <span class="hljs-keyword">return</span> ans;&#125;</code></pre><h4 id="线性筛"><a class="markdownIt-Anchor" href="#线性筛"></a> 线性筛</h4><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> prime[max_], primes[max_], num;<span class="hljs-built_in">memset</span>(prime,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(prime));prime[<span class="hljs-number">0</span>]=prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=limit;i++)&#123;<span class="hljs-keyword">if</span>(prime[i])primes[num++]=i;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;num&amp;&amp;i*primes[j]&lt;limit;j++)&#123;prime[i*primes[j]]=<span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(!(i%primes[j]))<span class="hljs-keyword">break</span>;&#125;&#125;</code></pre><h4 id="矩阵乘法"><a class="markdownIt-Anchor" href="#矩阵乘法"></a> 矩阵乘法</h4><pre><code class="hljs cpp"><span class="hljs-comment">//顺便带了一个快速幂，递推数列的矩阵自己推</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span>&#123;</span>    ll m[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];&#125;;ll n, k;Mat input, unit;<span class="hljs-function">Mat <span class="hljs-title">Matrix_Mul</span><span class="hljs-params">(Mat x, Mat y)</span> </span>&#123;    Mat c;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            c.m[i][j] = <span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;                c.m[i][j] = c.m[i][j] % Mod + x.m[i][k] * y.m[k][j] % Mod;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> c;&#125;<span class="hljs-function">Mat <span class="hljs-title">Quick_Matrix_pow</span><span class="hljs-params">(Mat a, ll n)</span> </span>&#123;    Mat res = unit;    <span class="hljs-keyword">while</span> (n) &#123;        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)            res = Matrix_Mul(res, a);        a = Matrix_Mul(a, a);        n &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld"</span>, &amp;n, &amp;k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;input.m[i][j]);        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        unit.m[i][i] = <span class="hljs-number">1</span>;    Mat ans = Quick_Matrix_pow(input, k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>, ans.m[i][j] % Mod);        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="lucas定理"><a class="markdownIt-Anchor" href="#lucas定理"></a> Lucas定理</h4><p>用不熟练还是不写了</p><h4 id="bsgs"><a class="markdownIt-Anchor" href="#bsgs"></a> BSGS</h4><p>只听过</p><h4 id="fft"><a class="markdownIt-Anchor" href="#fft"></a> FFT</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cassert&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;climits&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;deque&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug puts(<span class="hljs-meta-string">"-----"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmax</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? a : b;&#125;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmin</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? b : a;&#125;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">2147483647</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">19260817</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>; <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar())) <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-string">'0'</span>);<span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) print(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Complex</span>&#123;</span>    <span class="hljs-keyword">double</span> a, b;    Complex() &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a, <span class="hljs-keyword">double</span> _b) : a(_a), b(_b) &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a) : a(_a), b(<span class="hljs-number">0.0</span>) &#123;&#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a + z.a, b + z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a - z.a, b - z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a * z.a - b * z.b, a * z.b + b * z.a);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">double</span> m = z.a * z.a + z.b * z.b;        <span class="hljs-keyword">return</span> Complex((a * z.a + b * z.b) / m, (b * z.a - a * z.b) / m);    &#125;&#125;;Complex a[Maxn], b[Maxn];<span class="hljs-keyword">int</span> alen, blen, len, L, n, rev[Maxn], ans[Maxn];<span class="hljs-keyword">int</span> _a[Maxn], _b[Maxn];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(Complex c[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> f)</span> </span>&#123;    Complex wn, w, x, y;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)        <span class="hljs-keyword">if</span>(i &lt; rev[i]) <span class="hljs-built_in">std</span>::swap(c[i], c[rev[i]]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;        wn = Complex(<span class="hljs-built_in">cos</span>(pi / i), <span class="hljs-built_in">sin</span>(pi / i) * f);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p = i &lt;&lt; <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; j &lt; n; j += p) &#123;            w = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; i; ++k, w = w * wn) &#123;                x = c[j + k]; y = w * c[j + k + i];                c[j + k] = x + y; c[j + k + i] = x - y;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(!~f) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) c[i].a /= (<span class="hljs-keyword">double</span>)n;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    alen = read(), blen = read(), len = alen + blen;    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">1</span>; n &lt;= len; n &lt;&lt;= <span class="hljs-number">1</span>, L++);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (L - <span class="hljs-number">1</span>));<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= alen; ++i) a[i].a = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= blen; ++i) b[i].a = read();    FFT(a, n, <span class="hljs-number">1</span>); FFT(b, n, <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) a[i] = a[i] * b[i];    FFT(a, n, <span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) ans[i] = (<span class="hljs-keyword">int</span>)(a[i].a + <span class="hljs-number">0.5</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, ans[i]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h3><h4 id="最短路"><a class="markdownIt-Anchor" href="#最短路"></a> 最短路</h4><h5 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heapnode</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> node,val;    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> heapnode &amp;rhs) <span class="hljs-keyword">const</span>     &#123;        <span class="hljs-keyword">return</span> val &gt; rhs.val;    &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::priority_queue&lt;heapnode&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    dis[s] = <span class="hljs-number">0</span>;    Q.push((heapnode)&#123;s,<span class="hljs-number">0</span>&#125;);    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        heapnode U = Q.top();        Q.pop();        <span class="hljs-keyword">if</span> (vis[U.node])            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">int</span> u = U.node;        vis[u] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                Q.push((heapnode)&#123;v,dis[v]&#125;);            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    dijkstra(s);    <span class="hljs-comment">///do something...</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h5 id="spfaslf"><a class="markdownIt-Anchor" href="#spfaslf"></a> SPFA///slf</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= P; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    Q.push_back(s);    dis[s] = <span class="hljs-number">0</span>;    vis[s] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        <span class="hljs-keyword">int</span> u = Q.front();        Q.pop_front();        vis[u] = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                <span class="hljs-keyword">if</span> (!vis[v])                &#123;                    vis[v] = <span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                    <span class="hljs-comment">//忘了是不是这么写了...</span>                &#125;            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= C; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    spfa(s);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h4><h5 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h5><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> F[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==F[x]?x:F[x]=find(F[x]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;F[find(b)]=find(a);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(edge a, edge b)</span></span>&#123;<span class="hljs-keyword">return</span> a.val&lt;b.val;&#125;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) F[i]=i;sort(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>,cmp);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)&#123;<span class="hljs-keyword">int</span> u=e[i].next;<span class="hljs-keyword">int</span> v=e[i].to;<span class="hljs-keyword">if</span>(find(u)!=find(v))&#123;merge(u,v);ans+=e[i].val;k++;<span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;&#125;&#125;&#125;</code></pre><h5 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> Prim</h5><p>先占坑，不会写</p><h4 id="网络流"><a class="markdownIt-Anchor" href="#网络流"></a> 网络流</h4><h5 id="dinic"><a class="markdownIt-Anchor" href="#dinic"></a> Dinic</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, cur[max_], depth[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;add(u,v,w);add(v,u,<span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(depth));    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push(s), depth[s]=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;    <span class="hljs-keyword">int</span> now=q.front();q.pop();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;    <span class="hljs-keyword">int</span> to=e[i].to;    <span class="hljs-keyword">if</span>(depth[to]==<span class="hljs-number">-1</span>&amp;&amp;e[i].flow)&#123;    depth[to]=depth[now]+<span class="hljs-number">1</span>;q.push(to);    &#125;    &#125;    &#125;    <span class="hljs-keyword">return</span> depth[t]!=<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;<span class="hljs-keyword">if</span>(now==t) <span class="hljs-keyword">return</span> limit;<span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;<span class="hljs-keyword">int</span> to=e[i].to;<span class="hljs-keyword">if</span>(depth[to]==depth[now]+<span class="hljs-number">1</span>&amp;&amp;e[i].flow)&#123;w=dfs(to, min(limit-flow, e[i].flow));e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;<span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">return</span> flow;&#125;&#125;<span class="hljs-keyword">if</span>(!flow) depth[now]=<span class="hljs-number">-1</span>;<span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-keyword">int</span> maxflow=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">while</span>(bfs())&#123;<span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));maxflow+=dfs(s, inf);&#125;&#125;</code></pre><h5 id="zkw费用流不想写一般的费用流了"><a class="markdownIt-Anchor" href="#zkw费用流不想写一般的费用流了"></a> zkw费用流//不想写一般的费用流了</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, flow, dis;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, depth[max_], cur[max_], dis[max_], vis[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> c)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;e[cnt].dis=c;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span>&#123;ins(u,v,w,c);ins(v,u,<span class="hljs-number">0</span>,-c);&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push_back(t), dis[t]=<span class="hljs-number">0</span>, vis[t]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;        <span class="hljs-keyword">int</span> now=q.front();q.pop_front();vis[now]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(e[i^<span class="hljs-number">1</span>].flow&amp;&amp;dis[to]&gt;dis[now]-e[i].dis)&#123;                dis[to]=dis[now]-e[i].dis;                <span class="hljs-keyword">if</span>(!vis[to])&#123;                    vis[to]=<span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> dis[s]&lt;inf;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;    <span class="hljs-keyword">if</span>(now==t)&#123;        vis[now]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> limit;    &#125;    <span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;    vis[now]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;        <span class="hljs-keyword">int</span> to=e[i].to;        <span class="hljs-keyword">if</span>(!vis[to]&amp;&amp;e[i].flow&amp;&amp;dis[now]-e[i].dis==dis[to])&#123;            w=dfs(to,min(e[i].flow,limit-flow));            <span class="hljs-keyword">if</span>(w)&#123;                ans+=w*e[i].dis;e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;            &#125;            <span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mcf</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> flow=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(spfa())&#123;        vis[t]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(vis[t])&#123;            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));            <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));            flow+=dfs(s, inf);        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;</code></pre><h4 id="强连通分量"><a class="markdownIt-Anchor" href="#强连通分量"></a> 强连通分量</h4><h5 id="割点"><a class="markdownIt-Anchor" href="#割点"></a> 割点</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">300010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;e[maxn&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[maxn], cnt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[++cnt] = (edge)&#123;head[u], v&#125;; head[u] = cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;add(u, v); add(v, u);&#125;<span class="hljs-keyword">int</span> low[maxn], dfn[maxn], idx = <span class="hljs-number">0</span>, cut[maxn], point = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;    low[now] = dfn[now] = ++idx;    <span class="hljs-keyword">int</span> child = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = head[now]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> to = e[i].to;        <span class="hljs-keyword">if</span>(!dfn[to]) &#123;            tarjan(to, fa);            low[now] = <span class="hljs-built_in">std</span>::min(low[now], low[to]);            <span class="hljs-keyword">if</span>(low[to] &gt;= dfn[now] &amp;&amp; now != fa)                cut[now] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(now == fa) ++child;        &#125;        low[now] = <span class="hljs-built_in">std</span>::min(low[now], dfn[to]);    &#125;    <span class="hljs-keyword">if</span>(child &gt;= <span class="hljs-number">2</span> &amp;&amp; now == fa) cut[now] = <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    n = read(), m = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;        <span class="hljs-keyword">int</span> x = read(), y = read();        ins(x, y);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)         <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i, i);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) ++point;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, point);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, i);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h3><h4 id="lca"><a class="markdownIt-Anchor" href="#lca"></a> LCA</h4><p>//不想自己打了…</p><h5 id="倍增"><a class="markdownIt-Anchor" href="#倍增"></a> 倍增</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> lgn, dep[maxn], anc[maxn][<span class="hljs-number">30</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> v = e[i].to;        <span class="hljs-keyword">if</span>(v == anc[u][<span class="hljs-number">0</span>]) <span class="hljs-keyword">continue</span>;        anc[v][<span class="hljs-number">0</span>] = u;        dep[v] = dep[u] + <span class="hljs-number">1</span>;        dfs(v);    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calanc</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= sz; j++) &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= sz; i++) &#123;            anc[i][j] = anc[anc[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];        &#125;    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">querylca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(dep[u] &gt; dep[v]) <span class="hljs-built_in">std</span>::swap(u, v);    <span class="hljs-keyword">int</span> del = dep[v] - dep[u];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= del; i++) &#123;        <span class="hljs-keyword">if</span>((<span class="hljs-number">1</span> &lt;&lt; i) &amp; del) v = anc[v][i];    &#125;    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = lgn; i &gt;= <span class="hljs-number">0</span>; i--) &#123;        <span class="hljs-keyword">if</span>(anc[u][i] != anc[v][i]) &#123;            u = anc[u][i];            v = anc[v][i];        &#125;    &#125;    <span class="hljs-keyword">return</span> anc[u][<span class="hljs-number">0</span>];&#125;</code></pre><h5 id="st表"><a class="markdownIt-Anchor" href="#st表"></a> ST表</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500010</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> n, m, s, cnt = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>, cnt_ = <span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> last[N];    <span class="hljs-keyword">int</span> depth[N];<span class="hljs-comment">//深度 </span>    <span class="hljs-keyword">bool</span> vis[N];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><span class="hljs-function">    </span>&#123;        edge[++cnt].next = last[u];        edge[cnt].to = v;        last[u] = cnt;     &#125;   &#125; tree;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RMQ</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> F[N], dp[N][<span class="hljs-number">21</span>], eu[N];<span class="hljs-comment">// </span>&#125; rmq;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> tmp = ++num;    rmq.eu[++cnt_] = tmp;    rmq.F[tmp] = u;    tree.depth[u] = cnt_;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tree.last[u]; i; i = edge[i].next)    &#123;        <span class="hljs-keyword">int</span> v = edge[i].to;        <span class="hljs-keyword">if</span> (v == fa)            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">else</span>        &#123;            tree.vis[v] = <span class="hljs-number">1</span>;            dfs(v, u);            rmq.eu[++cnt_] = tmp;        &#125;     &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rmq_st</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        rmq.dp[i][<span class="hljs-number">0</span>] = rmq.eu[i];    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)    &#123;        <span class="hljs-keyword">int</span> k = n - (<span class="hljs-number">1</span> &lt;&lt; j) + <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)        &#123;            rmq.dp[i][j] = <span class="hljs-built_in">std</span>::min(rmq.dp[i][j - <span class="hljs-number">1</span>], rmq.dp[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rmq_find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> k = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * (r - l) + <span class="hljs-number">1</span>) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::min(rmq.dp[l][k] , rmq.dp[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (tree.depth[x] &gt; tree.depth[y])        <span class="hljs-built_in">std</span>::swap(x, y);    <span class="hljs-keyword">int</span> k = rmq_find(tree.depth[x], tree.depth[y]);    <span class="hljs-keyword">return</span> rmq.F[k];&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= n - <span class="hljs-number">1</span>; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        tree.add(x, y);        tree.add(y, x);    &#125;    dfs(s, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, lca(x, y));    &#125;   &#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    init();    rmq_st(cnt_);    query();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="树分治"><a class="markdownIt-Anchor" href="#树分治"></a> 树分治</h4><p>不会</p><h4 id="树链剖分"><a class="markdownIt-Anchor" href="#树链剖分"></a> 树链剖分</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">200010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch=getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x=ch^<span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch=getchar())) x=(((x&lt;&lt;<span class="hljs-number">2</span>)+x)&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m, r, p;<span class="hljs-keyword">int</span> a[maxn], b[maxn], size=<span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;e[maxn];<span class="hljs-keyword">int</span> head[maxn], cnt=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;e[++cnt]=(Edge)&#123;head[u],v&#125;;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;add(u,v);add(v,u);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent</span>&#123;</span>    <span class="hljs-keyword">int</span> l, r, sum, tags, sz;&#125;tr[maxn];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub_Tree</span>&#123;</span>    <span class="hljs-keyword">int</span> dep[maxn], fa[maxn], son[maxn], tot[maxn];    <span class="hljs-keyword">int</span> top[maxn], idx[maxn];    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> depth)</span></span>&#123;        dep[now]=depth;        fa[now]=f;        tot[now]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> maxson=<span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(to==f) <span class="hljs-keyword">continue</span>;            tot[now]+=dfs1(to,now,depth+<span class="hljs-number">1</span>);            <span class="hljs-keyword">if</span>(tot[to]&gt;maxson) maxson=tot[to], son[now]=to;        &#125;        <span class="hljs-keyword">return</span> tot[now];    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> top_node)</span></span>&#123;        idx[now]=++size;        a[size]=b[now];        top[now]=top_node;        <span class="hljs-keyword">if</span>(!son[now]) <span class="hljs-keyword">return</span>;        dfs2(son[now],top_node);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(!idx[to])                dfs2(to,to);        &#125;    &#125;&#125;sub;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent_Tree</span>&#123;</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson o&lt;&lt;1</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson o&lt;&lt;1|1</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;tr[o].sum=(tr[lson].sum+tr[rson].sum+p)%p;&#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;        <span class="hljs-keyword">if</span>(tr[o].tags)&#123;            tr[lson].tags=(tr[lson].tags+tr[o].tags)%p;            tr[rson].tags=(tr[rson].tags+tr[o].tags)%p;            tr[lson].sum=(tr[lson].sum+tr[lson].sz*tr[o].tags)%p;            tr[rson].sum=(tr[rson].sum+tr[rson].sz*tr[o].tags)%p;            tr[o].tags=<span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        tr[o].l=l,tr[o].r=r,tr[o].sz=r-l+<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l==r)&#123;            tr[o].sum=a[l];            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;        build(lson,l,mid); build(rson,mid+<span class="hljs-number">1</span>,r);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            tr[o].sum+=tr[o].sz*v;            tr[o].tags+=v;            <span class="hljs-keyword">return</span> ;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) update_add(lson,l,r,v);        <span class="hljs-keyword">if</span>(r&gt;mid) update_add(rson,l,r,v);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            <span class="hljs-keyword">return</span> tr[o].sum%p;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) ans=(ans+ask_sum(lson,l,r))%p;        <span class="hljs-keyword">if</span>(r&gt;mid) ans=(ans+ask_sum(rson,l,r))%p;        <span class="hljs-keyword">return</span> ans;     &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> lson</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> rson</span>&#125;seg;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Modify</span>&#123;</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x]))%p;            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y]))%p;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans%p);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_reg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            seg.update_add(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x],v);            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y],v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>,v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>)%p);    &#125;&#125;modify;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(head));    n=read(),m=read(),r=read(),p=read();    rep(i,<span class="hljs-number">1</span>,n) b[i]=read();    rep(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;        <span class="hljs-keyword">int</span> x=read(), y=read();        ins(x,y);    &#125;    sub.dfs1(r,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);    sub.dfs2(r,r);    seg.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);    rep(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt=read(),x,y,z;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            x=read(),y=read(),z=read()%p;            modify.modify_reg(x,y,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)&#123;            x=read(),y=read();            modify.query_sum(x,y);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">3</span>)&#123;            x=read(),z=read()%p;            modify.modify_sontree(x,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">4</span>)&#123;            x=read();            modify.query_sontree(x);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><h4 id="树状数组"><a class="markdownIt-Anchor" href="#树状数组"></a> 树状数组</h4><p>//真的不想写了…</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> tree[<span class="hljs-number">2000010</span>];<span class="hljs-keyword">int</span> a,b,c,d;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">return</span> x &amp; -x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-comment">//单点+</span>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;        tree[x] += k;        x += lowbit(x);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;        ans += tree[x];        x -= lowbit(x);    &#125;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;a;        add(i,a);       &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;b&gt;&gt;c&gt;&gt;d;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)&#123;            add(c,d);        &#125;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">cout</span>&lt;&lt;sum(d)-sum(c<span class="hljs-number">-1</span>)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpe(i,r,l) for(int i=r;i&gt;=l;--i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pts puts(<span class="hljs-meta-string">""</span>)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> node=<span class="hljs-number">500010</span>;<span class="hljs-keyword">int</span> tree[node], n, m, in[node];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &amp;-x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;<span class="hljs-keyword">while</span>(x&lt;=n)&#123;tree[x]+=v;x+=lowbit(x);&#125;&#125;<span class="hljs-comment">//区间+</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;ans+=tree[x];x-=lowbit(x);&#125;<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    rep(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">cin</span>&gt;&gt;in[i];    rep(i,<span class="hljs-number">1</span>,m)&#123;    <span class="hljs-keyword">int</span> t,x,y,z;    <span class="hljs-built_in">cin</span>&gt;&gt;t;    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;    add(x,z);    add(y+<span class="hljs-number">1</span>,-z);        &#125; <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cin</span>&gt;&gt;x;            <span class="hljs-built_in">cout</span>&lt;&lt;in[x]+query(x)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;&#125;</code></pre><h4 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h4><h5 id="简单的线段树"><a class="markdownIt-Anchor" href="#简单的线段树"></a> 简单的线段树</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">110000</span>;<span class="hljs-keyword">int</span> N, M, Q;LL sum[<span class="hljs-number">500000</span>], add[<span class="hljs-number">500000</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>; <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (ch&lt;<span class="hljs-string">'0'</span> || ch&gt;<span class="hljs-string">'9'</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>; ch = getchar(); &#125;<span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) X = (X &lt;&lt; <span class="hljs-number">3</span>) + (X &lt;&lt; <span class="hljs-number">1</span>) + ch - <span class="hljs-string">'0'</span>, ch = getchar();<span class="hljs-keyword">return</span> X * w;&#125;<span class="hljs-comment">//读入优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (x&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span> (x&gt;<span class="hljs-number">9</span>) write(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-comment">//输出优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;sum[p] = sum[p * <span class="hljs-number">2</span>] + sum[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];&#125;<span class="hljs-comment">//向上维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;add[root] = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (l == r)sum[root] = read();<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;build(<span class="hljs-number">2</span> * root, l, k);build(<span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);push_up(root);&#125;&#125;<span class="hljs-comment">//建树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (add[root])&#123;<span class="hljs-keyword">int</span> s1 = <span class="hljs-number">2</span> * root, s2 = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;add[s1] += add[root];add[s2] += add[root];sum[s1] += add[root] * (k - l + <span class="hljs-number">1</span>);sum[s2] += add[root] * (r - k);add[root] = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">//向下维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//访问区间 增加值 节点位置（或者用pos更好？） 原区间</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr)<span class="hljs-comment">//访问区间直接包含原区间</span>&#123;add[root] += c;sum[root] += c * (r - l + <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) update(nl, nr, c, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-comment">//左边</span><span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) update(nl, nr, c, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-comment">//右边</span>push_up(root);&#125;<span class="hljs-function">LL <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//原理与上方区间增加值一样</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr) <span class="hljs-comment">//同样，访问区间直接包含原区间，直接输出</span><span class="hljs-keyword">return</span> sum[root];pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;LL ans = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) ans += query(nl, nr, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) ans += query(nl, nr, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;N = read(), M = read();build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++)&#123;<span class="hljs-keyword">int</span> L, R, C;Q = read();<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">1</span>)&#123;L = read(), R = read(), C = read();update(L, R, C, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);&#125;<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">2</span>)&#123;L = read(), R = read();write(query(L, R, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N));<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);&#125;&#125;<span class="hljs-comment">//system("pause");</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> p;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">100007</span>];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> v, mul, add;&#125;node[<span class="hljs-number">400007</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(l==r)&#123;        node[root].v=a[l];    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;        bt(root*<span class="hljs-number">2</span>, l, m);        bt(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, r);        node[root].v=node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v;    &#125;    node[root].v%=p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;    node[root*<span class="hljs-number">2</span>].v=(node[root*<span class="hljs-number">2</span>].v*node[root].mul+node[root].add*(m-l+<span class="hljs-number">1</span>))%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v*node[root].mul+node[root].add*(r-m))%p;    node[root*<span class="hljs-number">2</span>].mul=(node[root*<span class="hljs-number">2</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>].add=(node[root*<span class="hljs-number">2</span>].add*node[root].mul+node[root].add)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add*node[root].mul+node[root].add)%p;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].v=(node[root].v*k)%p;        node[root].mul=(node[root].mul*k)%p;        node[root].add=(node[root].add*k)%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud1(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud1(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].add=(node[root].add+k)%p;        node[root].v=(node[root].v+k*(nodedr-nodedl+<span class="hljs-number">1</span>))%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud2(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud2(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        <span class="hljs-keyword">return</span> node[root].v;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    <span class="hljs-keyword">return</span> (query(root*<span class="hljs-number">2</span>, nodedl, m, l, r)+query(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r))%p;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n, m;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i]);    &#125;    bt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> chk;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;chk);        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k;        <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">1</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud1(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y));        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="标记永久化线段树"><a class="markdownIt-Anchor" href="#标记永久化线段树"></a> 标记永久化线段树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pos(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 201000</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> sum[N*<span class="hljs-number">4</span>],add[N*<span class="hljs-number">4</span>];<span class="hljs-keyword">int</span> a[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> rt)</span></span>&#123;    <span class="hljs-keyword">if</span>(l==r)&#123;        sum[rt]=a[l];<span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    build(l,mid,rt&lt;&lt;<span class="hljs-number">1</span>);    build(mid+<span class="hljs-number">1</span>,r,rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);    sum[rt]=sum[rt&lt;&lt;<span class="hljs-number">1</span>]+sum[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    sum[rt]+=v*(xr-xl+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(l==xl&amp;&amp;r==xr)&#123;        add[rt]+=v; <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid)  update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid)   update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,xl,xr);        <span class="hljs-keyword">else</span> update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,mid),update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> ad,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    <span class="hljs-keyword">if</span>(xl==l&amp;&amp;xr==r)&#123;        <span class="hljs-keyword">return</span> sum[rt]+ad*(xr-xl+<span class="hljs-number">1</span>);    &#125;      <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,xl,xr);        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,mid)+query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);    pos(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);    build(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);    pos(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;opt);        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;x,&amp;y);        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> k;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;k);            update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,k,x,y);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,n,x,y));    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//转载自Hallmeow</span></code></pre><h4 id="可持续化线段树"><a class="markdownIt-Anchor" href="#可持续化线段树"></a> 可持续化线段树</h4><p>不会</p><h4 id="动态加点线段树"><a class="markdownIt-Anchor" href="#动态加点线段树"></a> 动态加点线段树</h4><pre><code class="hljs cpp"><span class="hljs-comment">//CF915E Physical Education Lessons</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rr register</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">500007</span> * <span class="hljs-number">30</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    rr <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;    rr <span class="hljs-keyword">char</span> ch = getchar();    <span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) &#123;<span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>; ch = getchar();&#125;    <span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) &#123;x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>); ch = getchar();&#125;    <span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-keyword">int</span> n, q;<span class="hljs-keyword">int</span> sum[maxn], tags[maxn], rs[maxn], ls[maxn], id = <span class="hljs-number">0</span>, rt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span>(tags[o] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(l != r) &#123;        <span class="hljs-keyword">if</span>(!ls[o]) ls[o] = ++id;        <span class="hljs-keyword">if</span>(!rs[o]) rs[o] = ++id;        sum[ls[o]] = tags[o] * (mid - l + <span class="hljs-number">1</span>);        sum[rs[o]] = tags[o] * (r - mid);         tags[ls[o]] = tags[o];        tags[rs[o]] = tags[o];    &#125;    tags[o] = <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;o, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(!o) o = ++id;    <span class="hljs-keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;        sum[o] = v * (r - l + <span class="hljs-number">1</span>);        tags[o] = v;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(o, l, r);    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(ql &lt;= mid) update(ls[o], ql, qr, l, mid, v);    <span class="hljs-keyword">if</span>(qr &gt; mid) update(rs[o], ql, qr, mid + <span class="hljs-number">1</span>, r, v);    sum[o] = sum[ls[o]] + sum[rs[o]];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">memset</span>(tags, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(tags));    n = read(), q = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;        <span class="hljs-keyword">int</span> l = read(), r = read(), k = read();        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);        <span class="hljs-keyword">else</span> update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, n - sum[<span class="hljs-number">1</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="左偏树"><a class="markdownIt-Anchor" href="#左偏树"></a> 左偏树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> max_ = <span class="hljs-number">100010</span>;<span class="hljs-keyword">int</span> n, m;<span class="hljs-keyword">int</span> ch[max_][<span class="hljs-number">2</span>];<span class="hljs-comment">//表示当前节点儿子的编号</span><span class="hljs-keyword">int</span> a[max_], dis[max_]<span class="hljs-comment">/*树上距离*/</span>, f[max_]<span class="hljs-comment">/*父亲节点编号*/</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!x||!y) <span class="hljs-keyword">return</span> x|y;    <span class="hljs-keyword">if</span>(a[x]&gt;a[y]||(a[x]==a[y]&amp;&amp;x&gt;y)) swap(x,y);<span class="hljs-comment">//小根堆</span>    ch[x][<span class="hljs-number">1</span>]=merge(ch[x][<span class="hljs-number">1</span>],y);    f[ch[x][<span class="hljs-number">1</span>]]=x;    <span class="hljs-keyword">if</span>(dis[ch[x][<span class="hljs-number">0</span>]]&lt;dis[ch[x][<span class="hljs-number">1</span>]]) swap(ch[x][<span class="hljs-number">0</span>], ch[x][<span class="hljs-number">1</span>]);<span class="hljs-comment">//左偏树</span>    dis[x]=dis[ch[x][<span class="hljs-number">1</span>]]+<span class="hljs-number">1</span>;<span class="hljs-comment">//左偏树的距离</span>    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">while</span>(f[x]<span class="hljs-comment">/*仍然存在父亲节点*/</span>) x=f[x];    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    a[x]=<span class="hljs-number">-1</span>;    f[ch[x][<span class="hljs-number">0</span>]]=f[ch[x][<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span>;    merge(ch[x][<span class="hljs-number">0</span>],ch[x][<span class="hljs-number">1</span>]);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);    dis[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-keyword">int</span> k;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;k);        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> x, y;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;x, &amp;y);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>||a[y]==<span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">continue</span>;            merge(getfa(x),getfa(y));        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">int</span> now=getfa(x);                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, a[now]);                del(now);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="不知道什么东西"><a class="markdownIt-Anchor" href="#不知道什么东西"></a> 不知道什么东西</h3><pre><code class="hljs cpp"><span class="hljs-comment">//hdu2089 数位DP入门题</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10001</span>;<span class="hljs-keyword">int</span> a[maxn];<span class="hljs-keyword">int</span> dp[maxn][<span class="hljs-number">2</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">bool</span> limit)</span> </span>&#123;<span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sta] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dp[pos][sta];<span class="hljs-keyword">int</span> up = limit ? a[pos] : <span class="hljs-number">9</span>;<span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; ++i) &#123;<span class="hljs-keyword">if</span>(pre == <span class="hljs-number">6</span> &amp;&amp; i == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-keyword">if</span>(i == <span class="hljs-number">4</span>) <span class="hljs-keyword">continue</span>;res += dfs(pos - <span class="hljs-number">1</span>, i, i == <span class="hljs-number">6</span>, limit &amp;&amp; i == a[pos]);&#125;<span class="hljs-keyword">if</span>(!limit) dp[pos][sta] = res;<span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x) &#123;a[pos++] = x % <span class="hljs-number">10</span>;x /= <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">return</span> dfs(pos - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">int</span> l, r;<span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;l, &amp;r)) &#123;<span class="hljs-keyword">if</span>(!l &amp;&amp; !r) <span class="hljs-keyword">break</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, solve(r) - solve(l - <span class="hljs-number">1</span>));&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>高精度&lt;重载运算符&gt;</p><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">410</span>;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BigNum</span>  </span><span class="hljs-class">&#123;</span>      <span class="hljs-keyword">int</span> len, s[MAXN];      BigNum ()      &#123;          <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));          len = <span class="hljs-number">1</span>;      &#125;      BigNum (<span class="hljs-keyword">int</span> num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> num)      &#123;          <span class="hljs-keyword">char</span> s[MAXN];          <span class="hljs-built_in">sprintf</span>(s, <span class="hljs-string">"%d"</span>, num);          *<span class="hljs-keyword">this</span> = s;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num)      &#123;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; num[i] == <span class="hljs-string">'0'</span>; num++) ;  <span class="hljs-comment">//去前导0  </span>        len = <span class="hljs-built_in">strlen</span>(num);          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) s[i] = num[len-i<span class="hljs-number">-1</span>] - <span class="hljs-string">'0'</span>;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-keyword">const</span> <span class="hljs-comment">//+  </span>    &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; g || i &lt; max(len, b.len); i++)          &#123;              <span class="hljs-keyword">int</span> x = g;              <span class="hljs-keyword">if</span>(i &lt; len) x += s[i];              <span class="hljs-keyword">if</span>(i &lt; b.len) x += b.s[i];              c.s[c.len++] = x % <span class="hljs-number">10</span>;              g = x / <span class="hljs-number">10</span>;          &#125;          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> + b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-keyword">while</span>(len &gt; <span class="hljs-number">1</span> &amp;&amp; !s[len<span class="hljs-number">-1</span>]) len--;      &#125;      BigNum <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-comment">//*  </span>    &#123;          BigNum c;          c.len = len + b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; b.len; j++)              &#123;                  c.s[i+j] += s[i] * b.s[j];              &#125;          &#125;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c.len; i++)          &#123;              c.s[i+<span class="hljs-number">1</span>] += c.s[i]/<span class="hljs-number">10</span>;              c.s[i] %= <span class="hljs-number">10</span>;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> *= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> * b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">int</span> x = s[i] - g;              <span class="hljs-keyword">if</span>(i &lt; b.len) x -= b.s[i];              <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>) g = <span class="hljs-number">0</span>;              <span class="hljs-keyword">else</span>              &#123;                  g = <span class="hljs-number">1</span>;                  x += <span class="hljs-number">10</span>;              &#125;              c.s[c.len++] = x;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> -= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> - b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c, f = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              f = f*<span class="hljs-number">10</span>;              f.s[<span class="hljs-number">0</span>] = s[i];              <span class="hljs-keyword">while</span>(f &gt;= b)              &#123;                  f -= b;                  c.s[i]++;              &#125;          &#125;          c.len = len;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> /= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span>  = *<span class="hljs-keyword">this</span> / b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> % (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum r = *<span class="hljs-keyword">this</span> / b;          r = *<span class="hljs-keyword">this</span> - r*b;          <span class="hljs-keyword">return</span> r;      &#125;      BigNum <span class="hljs-keyword">operator</span> %= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> % b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &lt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &lt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &gt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &gt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &gt; b) &amp;&amp; !(*<span class="hljs-keyword">this</span> &lt; b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &lt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &gt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">str</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-built_in">string</span> res = <span class="hljs-string">""</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) res = <span class="hljs-keyword">char</span>(s[i]+<span class="hljs-string">'0'</span>) + res;          <span class="hljs-keyword">return</span> res;      &#125;  &#125;;  istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream &amp;in, BigNum &amp;x)  &#123;      <span class="hljs-built_in">string</span> s;      in &gt;&gt; s;      x = s.c_str();      <span class="hljs-keyword">return</span> in;  &#125;  ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="hljs-keyword">const</span> BigNum &amp;x)  &#123;      out &lt;&lt; x.str();      <span class="hljs-keyword">return</span> out;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
