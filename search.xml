<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[评测]我想将爱你们的感情，当作我的荣耀，至死不渝</title>
      <link href="/2021/06/13/%E8%AF%84%E6%B5%8B-%E6%88%91%E6%83%B3%E5%B0%86%E7%88%B1%E4%BD%A0%E4%BB%AC%E7%9A%84%E6%84%9F%E6%83%85%EF%BC%8C%E5%BD%93%E4%BD%9C%E6%88%91%E7%9A%84%E8%8D%A3%E8%80%80%EF%BC%8C%E8%87%B3%E6%AD%BB%E4%B8%8D%E6%B8%9D/"/>
      <url>/2021/06/13/%E8%AF%84%E6%B5%8B-%E6%88%91%E6%83%B3%E5%B0%86%E7%88%B1%E4%BD%A0%E4%BB%AC%E7%9A%84%E6%84%9F%E6%83%85%EF%BC%8C%E5%BD%93%E4%BD%9C%E6%88%91%E7%9A%84%E8%8D%A3%E8%80%80%EF%BC%8C%E8%87%B3%E6%AD%BB%E4%B8%8D%E6%B8%9D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-234b3323b23d1db7689f5971d523081d_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>对于一个月就能完成的<strong>免费</strong>同人游戏，我在一开始是没有抱有太大的期待的，如果我能在其中找到一丝感动，那么就算胜利。</p><p>推完第一周目我依然如此这么想，直到第二周目完，第三周目完，到了弹幕游戏我已然泪崩。</p><p>这，能在一个多月的时间内，完成企划，完成所有的工作，我只能说一个魂们的热情已经完全喷涌了。</p><hr /><p>先来讲剧本吧，包括<strong>文本</strong>及<strong>人物形象</strong>。</p><p>从刚开始的这一段，我就有点没绷住，差点想伸手去拿架子上的《逻辑哲学论》，感觉是能体会到制作者癖好的游戏（笑）</p><p>每段章节之间的幕间词，让我想到了素晴日和FLOWERS。</p><p><img src="https://pic1.zhimg.com/80/v2-828f4d4d75906f28a169f43b58d9c0c6_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>在第一周目中，我的感受是非常割裂的，一周目的前后文本割裂。在前半部分设计了一种以情绪为元素的类似“反乌托邦”世界观，这一点世界观构建的并不算好（本来想拿《余香》来比较，但那部作品的描述还不如在本作中的这种世界观起到的作用），不过带出了对于后面剧情非常重要的以情绪为元素中最重要的“粉丝对偶像的感情”。</p><p>第一周目的后半段，尤其是在然然被狂热的粉丝围住的时候，我能感受到的就是混乱了，因为缝合的比较多（比如对于这个游戏最重要的<strong>LOOP元素</strong>，刚开始可能会不明所以剧情的发展），再加上这段本身也是比较“狂气”的一段，这段的感受一般。</p><p><img src="https://pic4.zhimg.com/80/v2-7291e2111b00156a5a69c62666a3b0da_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>屋顶决战就更乱了，阿草的邪恶本质被彻底揭发，粉丝与偶像等问题被完全暴露出来，令人心痛的晚晚的LOOP才刚刚揭开一角。</p><p>第一周目作为全部的基础，在玩完之后感觉还是不错的。有一个魂们都知道的直播的梗，这也是我非常在意并且喜欢的，在狂气、大场面的描写中并不算优秀，但在对于五个人的描写上确确实实感受到了“阴郁天空下如草莓蛋糕般的甜美”的氛围，比如在回到宿舍中大家一起玩的过程，比如乃琳在作为“间谍”准备离开时，德彪西的月光和阿拉伯风格曲的静谧如此景。</p><p><img src="https://pic4.zhimg.com/80/v2-7c0e0b0db8c3f815f858f268318e1093_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>而第二周目就是完全揭开这个“往事”的真相的一场旅程。慢慢地，讲述了晚晚背负的责任，去拯救粉丝、拯救A-SOUL、拯救嘉然的故事。这一段也正如大家所说的，有点小圆的意思。</p><p><img src="https://pic2.zhimg.com/80/v2-809639280b88a8c583fbe709f3fbfc19_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>不断地失败，不断地失败，如打工战士一样“失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了失败了”，但是LOOP依旧要继续，像《李献计历险记》一样，去寻找每一个能够找到成功的答案，像《魔法少女小圆》一样，去拯救心中所爱之人，从五个人的故事上升到了更加宏大的故事，可惜限于时间与篇幅，还是短了点。</p><p><img src="https://pic4.zhimg.com/80/v2-19b417a67ee97c75c5a27fa9cd3eaef1_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p><img src="https://pic2.zhimg.com/80/v2-eab1b5bbc9e113098adb3d67a66e8c08_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p><img src="https://pic2.zhimg.com/80/v2-297951738ac28d5c5e26b1a18c266c9c_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p><img src="https://pic1.zhimg.com/80/v2-1a53e71bcf6e6d8cb9151dbee6151faa_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>看到这块我确实正如看到《巨乳战队X》最后那段“骑单车就能到达宇宙的每个角落”的感动，能塞下这么多元素还能写的不错，我给你们下跪了</p><p>人物形象来说的话，我不太好评价。这与我看《赛马娘2》是一样的，因为现实的因素占了太多，现实的事实我们已知，对于故事中的人物描写可能就会有不同的期待。</p><p>贝拉与珈乐的青梅竹马内容写的不错，才能与努力的联系（樱花庄），自我的追求与否定，感觉玩过游戏之后大家对珈乐的看法都会变那么一些些（</p><hr /><p>然后是<strong>演出效果</strong></p><p>由于限制于成本和时间的关系，从大量的CG、差分来做出景别变化、前后景、特殊效果的演出方式并不合适，所以和大家更熟悉的角度和更简单的方式变化演出</p><p>比如实际的弹幕（如果能更密就好了）</p><p><img src="https://pic4.zhimg.com/80/v2-232679df64148e3e2e4f180a0fea9bde_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>与《奇蛋物语》的第十一集比较，色调的变化给了接下来貌似是要发生什么事的暗示，在这里也有一种压抑的压迫感，体现了乃琳的犹豫和不安的心情。</p><p><img src="https://pic4.zhimg.com/80/v2-37617987ff9f8ebf0e37d25e2f8209f7_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>然后再说说我认为最棒的最后的小游戏。用弹幕的形式，去保护A-SOUL的她们，从一开始只能发射一两个保护她们的弹幕，但面对的是相当多的辱骂弹幕，渐渐地，随着右下角时间的变化，我们能够用更多的弹幕去保护她们，而质疑、辱骂的弹幕越来越少。</p><p><img src="https://pic2.zhimg.com/80/v2-2a76d4306b3f863e1d176604bcfba6ac_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p><img src="https://pic1.zhimg.com/80/v2-4819f0d38bcb1f02622fef39388ce8ee_720w.jpg?source=1940ef5c" srcset="/img/loading.gif" alt="img" /></p><p>在最后的最后带着大家再次度过这半年，我除了感动什么也说不出来。</p><hr /><p><strong>音乐</strong>的话</p><p>我直接给制作人员跪了</p><p>不仅有很多的原创，在其他的选取也会用德彪西的阿拉伯风格曲等古典曲目，真的是非常非常非常用心，感谢每一位创作人员！！</p><hr /><p><strong>CG</strong>的话，我只能说， ‍牛逼，跪了…</p><hr /><p>熬了一夜没睡，写了一点自己都看不太懂的低水平的东西</p><p>要说最真情实感的话，感谢每一位参与游戏制作的人员，感谢你们为我带来美好的一晚，感谢你们的付出！！！！</p><p>6月14日补充：这几天和人聊了一下关于剧情割裂的问题，我仔细想了想，认为原因应该有三点。</p><p>首先，虽然每个章节负责的人不一样，但是最后是有组长进行统和的，这一统和包括文风和剧情衔接上的问题，所以即便是每个章节都是不一样的人写的，最后作品呈现出来还是呈一定的整体性，造成如此大的割裂感原因在于塞了太多的元素但是篇幅却没有匹配它应当有的长度。</p><p>第二是因为被现实影响得太深，其实单从文本里就能看到我们以前看过的二创发散的一些影子，一段是存在于另外一个枝江的虚拟的故事，而紧接着一段又是我们相当熟悉的直播中、线下活动中的故事，真实和极端的幻想交叉进行，这也是造成割裂感的原因。</p><p>第三是人物形象太单薄，还有严重的OOC。这一点我本来无所谓，因为二创本身就不应当这样去评价，再者因为和现实联系过多，每个人心中对于她们五个人的形象理解是不一样的，自然观点是不一样的。比如贝拉，在游戏中就塑造成了一个「从小习武并希望能成为偶像的女孩」，而在这之中「武」的元素占了太多，又是珈蓝寺，又是铁棍，给人的第一感觉就是贝拉是以「武」为核心的强大武者，仅有较少篇幅描写了贝拉的芭蕾梦，而在现实中无论是棍，还是武，不过是在调侃。再比如乃琳的「间谍」身份，这一点是完全的发散了，在身份上的发散却在人物台词上做到了和现实相符，这也是割裂感的来源。</p><p>还希望看完这篇文章的读者，能够认识到二创是二创，A-SOUL是A-SOUL，在现实中他们也不过是五个女孩子，阿草也不过是一个运营。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当代批评理论使用指南-笔记</title>
      <link href="/2021/04/24/%E5%BD%93%E4%BB%A3%E6%89%B9%E8%AF%84%E7%90%86%E8%AE%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/04/24/%E5%BD%93%E4%BB%A3%E6%89%B9%E8%AF%84%E7%90%86%E8%AE%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="精神分析批评"><a class="markdownIt-Anchor" href="#精神分析批评"></a> 精神分析批评</h3><hr /><h4 id="弗洛伊德精神分析理论"><a class="markdownIt-Anchor" href="#弗洛伊德精神分析理论"></a> 弗洛伊德精神分析理论</h4><hr /><h4 id="拉康精神分析理论"><a class="markdownIt-Anchor" href="#拉康精神分析理论"></a> 拉康精神分析理论</h4>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[放置/R18]世界名画：嘉然在唱歌</title>
      <link href="/2021/03/30/%E6%94%BE%E7%BD%AE-R18-%E4%B8%96%E7%95%8C%E5%90%8D%E7%94%BB%EF%BC%9A%E5%98%89%E7%84%B6%E5%9C%A8%E5%94%B1%E6%AD%8C/"/>
      <url>/2021/03/30/%E6%94%BE%E7%BD%AE-R18-%E4%B8%96%E7%95%8C%E5%90%8D%E7%94%BB%EF%BC%9A%E5%98%89%E7%84%B6%E5%9C%A8%E5%94%B1%E6%AD%8C/</url>
      
        <content type="html"><![CDATA[<p>……</p><p>枝江大学附近的KTV房间中，向晚无精打采地趴在桌子上，乃琳轻柔的声音降临在她的耳边。</p><p>「团建玩的开心吗？」</p><p>「…嗯，还算可以啦欸嘿嘿」</p><p>「那，接下来是惩罚游戏咯」</p><p>「啊？那个不是开玩笑嘛，啊哈哈哈哈…」</p><p>「可是，刚才谁说的Asoul的Gamer不会再拉胯了…」</p><p>「啊啊啊啊啊啊再别说了！！别老说我拉胯啦！！我做，我做行了好吧！」</p><p>乃琳满意地笑了，拿起桌子上的红色本子</p><p>「向晚身体有点不舒服，我陪她去一下洗手间」</p><p>「没事吧，不舒服的话一定要说哦」</p><p>对着正在兴致上的Asoul其他人打了声招呼，乃琳挽着向晚的胳膊走向了洗手间。</p><p>……</p><p>咔哒。</p><p>「干嘛要来这啊，好挤哦…唔」</p><p>向晚话还没有说完，乃琳就朝向她吻了过去，向晚没能撑住身体，靠在背后的墙上，接受了那一抹包裹而来的温润。</p><p>「晚晚…」乃琳一边轻声说着一边如蜻蜓点水般的啄吻着向晚，吻了几次之后才恋恋不舍地分开。向晚抬头仰望着乃琳，然后不好意思地侧过头去，脸上多了两抹红晕。</p><p>「…结、结束了？原来惩罚游戏就是在洗手间里“KISS”啊，那，那有什么，我又不是小孩子了」</p><p>「刚才只是因为瑟瑟发抖的晚晚很可爱呀，所以就一不小心」</p><p>「那你不能等回去之后再做这些事情吗！！」</p><p>向晚幽怨地盯着乃琳的脸，乃琳并没有回复她。</p><p>「那我马上就说“惩罚游戏“的内容咯」</p><p>「快点吧快点吧，不然太晚了嘉然她们会担心的」</p><p>「那，嘴张开，舌头伸出来」</p><p>「噫，为什么要这样….啊啊啊！！」</p><p>还没有等向晚说完，乃琳狠狠地在向晚的腰上掐了一把，向晚痛的叫了出来</p><p>「干嘛啊你，平常你不是这…」向晚把头靠正看向乃琳，却只得到乃琳冷冷的注视。于是向晚只好不情不愿地慢慢伸出小小的舌头，乃琳也同样伸出小舌，将其融入在嘴中。</p><p>伴有葡萄酒果香的舌尖，一次次朝着向晚的舌尖刺去。向晚不小心啾~地主动轻柔地吸过了乃琳的舌头，不知道是不是因为这个动作让她的心情变得更愉悦了，乃琳更加如饥似渴地在向晚的嘴中肆虐起来。</p><p>激烈的深吻中，向晚的脑袋也逐渐变得一片模糊。</p><p>在向晚变得难以喘息的时候，乃琳终于松开了进攻的嘴唇。</p><p>「那么，接下来就是正餐咯，刚才只能算饭前开胃菜而已」</p><p>「啊？原来还没开始吗」</p><p>「嗯…那么“惩罚游戏”的内容就是，说出十条喜欢我的地方，在你说完之前我都会一直进攻的哦~」</p><p>「这，这什么鬼啊！！喂，听我说完，别，呀——！」</p><p>乃琳毫无预兆地掀开了向晚的裙子。</p><p>「你想知道“霜月花”的前半句是什么吗？」</p><p>「我不想知道啦！！这还在外面哦，会被人发现的啦，而且十个也太多了吧！！」</p><p>「我的话，哪怕一百个也能马上说出来哦，因为晚晚是傲娇啦，所以我才减少到十个的」</p><p>「那，那也有点太多了吧喂！！」</p><p>「有功夫说这些不如快点想想喜欢我什么吧？」</p><p>从旁抱着向晚身体的乃琳，还没有等向晚反应过来便忽然用手指从裙下慢慢摸入向晚的大腿深处的敏感部位。</p><p>好像因为之前激烈的深吻，向晚的下面已经很湿了，从两腿之间不时传来一阵湿湿黏黏的液体声音</p><p>「不、不行，真的不行啦……！放过我吧，真的…求你了…」</p><p>看见已经被泪水模糊、神情恍惚的向晚，乃琳更加想挑逗她了，手被向晚大腿死死的夹着，头靠在向晚的肩膀上，对着向晚的耳朵轻声说道</p><p>「你知道吗，每次你和顶碗人们打成一片的时候，我就在想，啊，世上真的会有这么可爱的女孩子吗？我真的好想好想，一口、一口，把你吃干抹净，你的脚趾，你的脚踝，你的膝盖，你的小腿肚，你的大腿，我好想用舌头滑过你的脊背，用手抚过你的胸部，咬着你的耳朵，再往下、往下，探索你的花园。难得的机会，我怎么会放过呢。加油吧，还有十个呢~」</p><p>向晚身体酥酥麻麻的，止不住的颤抖，努力的呼吸着。</p><p>「那，那，我喜欢你的嘴唇，你的声音，你的头发，你的~~~~~~~~~唔！嗯…哈啊…哈啊…嗯啊」</p><p>向晚一边说着，乃琳的手也没有停下，发现着她更多的弱点</p><p>「还有七个哦」</p><p>绝望的数字。</p><p>感觉很少，却又让时间如此漫长。</p><p>「喜、喜欢！喜欢你的眼睛，喜欢你穿私服的样子！喜欢你的味道，以前还会偷偷闻你穿过的衣服…唔…」</p><p>「哦？原来还有这事啊，怪不得有一次我的衣柜有点乱呢，哼哼，原来是你这个偷。衣。贼。」</p><p>向晚想要竭力摆脱乃琳的手指，但全身已经没有力气的她能用双腿支撑住身体已经算全力了，根本无法抵挡乃琳的攻势，大脑已经一片空白。</p><p>「还有四个」</p><p>「啊…啊…我…我喜欢你的温柔，喜欢你打游戏的样子，喜欢你在我身边，喜欢你…」</p><p>咚。</p><p>「晚晚，没事吧，身体还好吗？」门外传来嘉然的声音。</p><p>「我没事，没事呀，就是刚才可能吃坏东西了现在肚子疼，恩…哈啊…」</p><p>乃琳的右手手指一跳一跳沿着向晚的脊柱攀上去，拨开后颈的头发，左手手指从下面抽出来，连着透明的液体，从小腹向上延伸，摸着向晚软软的胸部，嘴唇慢慢靠向向晚的耳朵，用虎牙轻轻地咬住，松开，舌头舔舐着耳廓，慢慢深入耳朵之中。</p><p>「真的没事吗？你的呼吸声好重啊」</p><p>「哈啊…我…嗯…真的没事，一会我就回来了，我马上就回来…真的不用担心…」</p><p>「那，那我就先回去咯…」</p><p>「嗯嗯…」</p><p>听见嘉然的脚步声逐渐消失，向晚再也支撑不住，手轻轻扶着隔板，身体全由乃琳的手撑着。</p><p>不知道过了几十秒，向晚远去的意识终于恢复了。</p><p>「总算，总算完了…」</p><p>「辛苦了呢，宝贝」</p><p>「…啊，抱歉，你的衣服…」</p><p>仔细看了之后才发现，在刚才的缠绵中乃琳的袖子已经被拉的有点变了形，向晚的内裤也是完全湿得没办法继续穿了。</p><p>「恩？没事的。内裤的话我这里有哦，我穿过的~」</p><p>「真是的，不要再调戏我了啦！」</p><p>「我们晚晚真的很可爱呢~」</p><p>「哼，你这么搞我我可不会原谅你」</p><p>「知道啦知道啦，下一次就在家里吧💕~」</p><hr /><p>全文思路基本来自于百日百合，第一次写的不好，自己多多脑补捏😭😭😭</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210330133106.gif" srcset="/img/loading.gif" alt="" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>佐藤卓哉 OP/ED 分镜演出</title>
      <link href="/2021/03/14/%E4%BD%90%E8%97%A4%E5%8D%93%E5%93%89-OP-ED-%E5%88%86%E9%95%9C%E6%BC%94%E5%87%BA/"/>
      <url>/2021/03/14/%E4%BD%90%E8%97%A4%E5%8D%93%E5%93%89-OP-ED-%E5%88%86%E9%95%9C%E6%BC%94%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h4><p>苺ましまろ<strong>絵コンテ・演出</strong></p><p>苺ましまろ encore<strong>絵コンテ・演出</strong></p><p>少女たちは荒野を目指す<strong>絵コンテ・演出</strong></p><p>生徒会の一存<strong>絵コンテ・演出</strong></p><h4 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h4><p>苺ましまろ<strong>演出・レイアウト</strong></p><p>スレイヤーズREVOLUTION<strong>絵コンテ・演出</strong></p><p>苺ましまろ encore<strong>絵コンテ・演出</strong></p><p>好きっていいなよ。<strong>絵コンテ・演出</strong></p><p>selector infected WIXOSS<strong>絵コンテ・演出</strong></p><p>少年ハリウッド -HOLLY STAGE FOR 49-<strong>絵コンテ・演出　8話ED</strong></p><p>selector spread WIXOSS<strong>絵コンテ・演出</strong></p><p>アリスと蔵六<strong>絵コンテ・演出</strong></p><p>クジラの子らは砂上に歌う<strong>絵コンテED　演出ED(共同)</strong></p><p>RErideD-刻越えのデリダ<strong>絵コンテ・演出</strong></p><p>とある魔術の禁書目録III<strong>絵コンテ・演出</strong></p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐题材漫画推荐</title>
      <link href="/2021/02/08/%E9%9F%B3%E4%B9%90%E9%A2%98%E6%9D%90%E6%BC%AB%E7%94%BB%E6%8E%A8%E8%8D%90/"/>
      <url>/2021/02/08/%E9%9F%B3%E4%B9%90%E9%A2%98%E6%9D%90%E6%BC%AB%E7%94%BB%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>  只是看漫画也能听到其中的音乐，你相信吗？<br />  然而这两部漫画做到了，只是通过画面的表现力传达声音到每个观众的内心，极强地表现出以音乐为题材的漫画独特的魅力。</p><h4 id="blue-giant"><a class="markdownIt-Anchor" href="#blue-giant"></a> Blue Giant</h4><p>    《Blue Giant》系列是在ビッグコミック（BigComic）上连载的漫画，讲述了来自日本仙台的宫本大，从一个没有任何音乐基础的，仅仅是狂热喜爱音乐的学生，通过在东京、欧洲、美国的游历学习成为世界第一的爵士萨克斯手的王道热血故事。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181611.png" srcset="/img/loading.gif" alt="" /><br />    然而不仅仅是单纯的王道热血，它还包含了每个热爱音乐的人的“真实感”。“热血”和“真实感”，两者相辅相成，表现出极具震撼力的画面。<br />    本文并不会从整体剧情方面来说明这部作品的好，笔者希望通过“细节”和“画面表现”来说明它作为音乐漫画的优秀之处。<br />    不妨先考虑一个问题，“<strong>真实感</strong>”是如何体现的？<br />    之前有看到这种说法：日常轻百合有故事吗？这种弱化了故事的存在，重点在营造真实、日常、放松的氛围的类型，剧情还重要吗？<br />    答案肯定是重要的，要营造这份氛围，需要的是对生活的细致观察、对经历的反复琢磨和无穷的 “<strong>细节</strong>”，这些东西都会在作者认真刻画的内容中体现。<br />    对于轻百合我们可以来看《恬淡晴天》的第五话。<br />    第五话的主要内容就是两个可爱的女孩子在屋里一天的生活。怎么去描写两个可爱的女孩子的在屋内的互动会显得更真实、更日常、更轻松呢？<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181656.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181735.png" srcset="/img/loading.gif" alt="" /><br />    从对着房间的一格开始，洗衣机的声音吵醒了正在睡觉的实里，睡眼惺忪之间问小七时间，小七用冷笑话回应，然后嬉笑打闹起来，再转到实里洗漱、做早饭。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181853.png" srcset="/img/loading.gif" alt="" /><br />    一个房间内的全景，再到两个人一起看电视吃早饭，实里发现桌子上有打开了的薯片。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181912.png" srcset="/img/loading.gif" alt="" /><br />    实里没收了小七的薯片，开始讨论体重的问题。注意人物的神态动作，改为更简略可爱的脸部画法的分格位置。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310181936.png" srcset="/img/loading.gif" alt="" /><br />    吃完早饭后收拾桌子、整理房间。有对实里出房间披衣服、开关门、晒衣服看天气担心下雨的描写。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182012.png" srcset="/img/loading.gif" alt="" /><br />    两人边收拾边聊天，决定今天晚上吃的东西。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182034.png" srcset="/img/loading.gif" alt="" /><br />    两人度过下午时间的做的事情的特写，发现没有番茄酱的慌张。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182052.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182113.png" srcset="/img/loading.gif" alt="" /><br />    两个分格切开了空间，表现小七泡澡和实里做饭的同时间，营造温馨感。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182128.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182144.png" srcset="/img/loading.gif" alt="" /><br />    这段从小七冒雨买番茄酱，实里放好水，两人一起切蛋包饭，实里为小七吹头发。省去了小七买番茄酱的过程，将更多的内容放在了对这间屋内发生的事情上。<br />    这一话是非常好看的，开头洗衣机对应晒衣服、下雨，集中描写小七和实里在房间里度过的一天，恰到好处的简化，控制的很好的画面的信息量，营造出很棒的温馨感，与这间小屋相应。<br />    那么到《Blue Giant》上，这种“真实感”是什么？<br />    是不断的练习而消耗的哨片<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182310.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182336.png" srcset="/img/loading.gif" alt="" /><br />    是不断的听大师的录音，模仿名曲成功后的激动<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182352.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182413.png" srcset="/img/loading.gif" alt="" /><br />    是不断练习十二大小调音阶，是记住演奏大师的名曲，是初次登台演出的失败，是失败后再不断练习，这一切的经历使它更有实感，更能让人感动。</p><p>    说完“细节”，那么就看能让人直接体会到的“画面表现”。<br />    石塚真一分镜的很棒，很有想象力，比如下面三张。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182431.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182448.png" srcset="/img/loading.gif" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182501.png" srcset="/img/loading.gif" alt="" /><br />    第一二张用不同观众的神态表现吹奏的水平，有觉得好听的、有听不懂的、有欣赏的、有肯定的，音乐将演奏者和听众联系起来，将不同人对音乐的理解融合在一张纸上，第三张随着小孩的拍手，读者仿佛才从观看中发现原来没有声音，是非常令人感动且有代入感的画面。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182515.png" srcset="/img/loading.gif" alt="" /><br />    这张将拟声词和画面结合，发挥竖线本身强力、稳定的特性，表现演奏的声音的音量之大、律动感之强烈。<br />    看完分镜来看大特写画面。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182606.png" srcset="/img/loading.gif" alt="" /><br />    石塚真一在绘画演奏时喜欢用如同狂风暴雨般密集的排线来表达声音之大，在这张中声音以萨克斯为中心向外扩散，情感的饱满和强烈溢出纸面，直击内心。<br /><img src="https://cdn.jsdelivr.net/gh/AimiP02/My-imgHome/20210310182622.png" srcset="/img/loading.gif" alt="" /><br />    在这张敲鼓的画面中，鼓手鼓棒连续的运动轨迹，飞溅的汗水，表现出鼓手的忘我投入，也同样表现出音乐包含的情感，联系之前努力学习敲鼓的经历，这一幕的释放自我的畅快感也表达了出来。</p><p>    无疑，石塚真一的基础很好，只有很强的绘画基础才能支撑的起这个故事。</p><h4 id="历经弦音"><a class="markdownIt-Anchor" href="#历经弦音"></a> 历经弦音</h4><p><img src="https://i.loli.net/2021/02/08/IZmNkqAejSlX4pR.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 0话 - 1.jpg" /></p><p>    <strong>“它给予我作为虚拟播主活动的勇气，堪称我人生的动力，它肯定了我去挑战目标的意义。”</strong><br />    这是社筑对《历经弦音》的评价。同样也是每一个看过了它的人能够深刻感受到的。<br />    《历经弦音》讲述的是在一个可以通过“Cross Road”的仪式让伟大的音乐家可以通过“Jack in”的方式附身于人身上的世界，吉他之神Jimi Hendrix附身在了主角本田紫织上。然而这种附身是有代价的，被附身者必须小于27岁并且要在27岁前创造传奇，就这样，紫织开始组建摇滚乐团，完成传奇的目标。<br />    《历经弦音》与《Blue Giant》不同，前者的摇滚精神中的反叛和自由在这部漫画中随处可见，比如单干超强的管弦乐团以及各种“屎尿屁性”，你能在这部漫画中感受到狂野的气氛。<br />    同样，本文不会从整体剧情上说这部作品的好处，以下会从“<strong>细节</strong>”、“<strong>画面表现</strong>”来推荐这部漫画。<br />    从“<strong>细节</strong>”来说，《历经弦音》是与《Blue Giant》大致相同的，有着每个爱好摇滚的人都会有的记忆，能在剧情的“真实感”上产生共情。<br />    而在“画面表现”上，我认为《历经弦音》的“画面设计”和“声音表现力”都比《Blue Giant》要好。《Blue Giant》用密集的排线和富有张力的画面表现声音和情感，用听众的神态变化来表现音乐的力度。而《历经弦音》有三个独特的点：<strong>声音实质化</strong>、<strong>画面更强的纵深感</strong>、<strong>高对比度运用阴影</strong>。<br />    声音实质化是指将声音描绘成具体的气浪、爆炸、刀刃等。这样将声音具象化带来的冲击力更大，更能让看漫画的人体验到声音直达内心的感觉。<br /><img src="https://i.loli.net/2021/02/09/skUWI5VZTfBwt3R.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 34话 - 24.jpg" /><br /><img src="https://i.loli.net/2021/02/09/ZxAbIpYNSlLkfw7.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 46话 - 14.jpg" /><br /><img src="https://i.loli.net/2021/02/09/TNURkq9wEW6AJZK.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 23话 - 49.jpg" /><br /><img src="https://i.loli.net/2021/02/09/3uvSUa5YsHnPIod.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 28话 - 15.jpg" /><br /><img src="https://i.loli.net/2021/02/09/LyCOjAcFbIvG7K9.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 28话 - 16.jpg" /><br /><img src="https://i.loli.net/2021/02/09/GYovzMmyLs4p8C1.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 17话 - 23.jpg" /><br /><img src="https://i.loli.net/2021/02/09/uyHGSEN71qacCeX.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 27话 - 34.jpg" /><br /><img src="https://i.loli.net/2021/02/09/AdrovE2RsXinVz4.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 8话 - 40.jpg" /><br />    画面纵深感则是指用明显的透视关系表现出强烈的纵深感，从而达到震撼的效果。<br /><img src="https://i.loli.net/2021/02/09/RBAO7XsFl5gUQ4M.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 3话 - 20.jpg" /><br /><img src="https://i.loli.net/2021/02/09/BcaYJyz1MvZkEbL.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 26话 - 15.jpg" /><br />    而《历经弦音》最让人感受到震撼的一处正是第三点。高对比度画面设计强化了光亮处和阴暗处这两极的差异，这种鲜明的对比方式在电影的光照设计中常见。在《历经弦音》中，设计这种画面更强调了单张画面静止的存在，极大的增强了画面的表现力。<br /><img src="https://i.loli.net/2021/02/09/FLP1YTNA8k5tKBR.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 9话 - 36.jpg" /><br /><img src="https://i.loli.net/2021/02/09/3N1yxlV5ibO4Hvq.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 11话 - 11.jpg" /><br /><img src="https://i.loli.net/2021/02/09/hOTzemM14N968qS.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 17话 - 33.jpg" /><br /><img src="https://i.loli.net/2021/02/09/ZKgMwq2vtijF8NP.jpg" srcset="/img/loading.gif" alt="历经弦音 - 连载_ 28话 - 3.jpg" /><br />    这两部漫画各有所长，都是好作品。<br />    《Blue Giant》其实剧情也是很王道热血的，但是在练乐器的真实感上有独特细致的描写，石塚真一的一些分镜也很有想象力。<br />    历经弦音本身的设定就比较奇幻了，主题上也点了摇滚的反叛精神，一些高对比度的画面很震撼，还有一些非常有设计感的，比如用其他可以感知的具体事物（爆炸、气浪、风）来表现声音，46话也有部长被“固定”的音符缠绕后，由黑变彩，表现释放的畅快感。<br />    遗憾的就是这俩基本不可能动画化，把漫画的脑补性质发挥到极致了，动画很难表现。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漫画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年总结</title>
      <link href="/2021/01/03/2020%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
      <url>/2021/01/03/2020%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/01/03/7ZRQisnH5pemorf.png" srcset="/img/loading.gif" alt="1.png" /></p><p>想要写这篇还是来总结一下今年看的动画、漫画、书籍和听的音乐吧…</p><h3 id="动画"><a class="markdownIt-Anchor" href="#动画"></a> 动画</h3><p>选出5部2020年我认为最好的和5部今年看过的最好的TV动画，以及5部剧场版动画。</p><h4 id="2020-tv动画"><a class="markdownIt-Anchor" href="#2020-tv动画"></a> 2020 TV动画</h4><p><strong>TOP 5</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/9e/62/302293_i4b5e.jpg" srcset="/img/loading.gif" alt="" /></p><p>诗人新作，无论是人设、招式名、世界里表设定还是那个久保带人，时髦神。</p><p>附上诗一首</p><hr /><p><strong>見てほしいのは　完璧な姿</strong></p><p><strong>愛してほしいのは　ありのままの姿</strong></p><p><strong>見て見ぬふりをしてほしいのは</strong></p><p><strong>ふたつの間でふらつく姿</strong></p><p><em>愿你所见的 是我完美的模样</em></p><p><em>愿你所爱的 是我真实的模样</em></p><p><em>愿你能装作视而不见的 是我在完美真实之间踌躇的模样</em></p><hr /><p><strong>TOP 4</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/cb/30/272188_DPj3G.jpg" srcset="/img/loading.gif" alt="" /></p><p>喜剧演出我很喜欢，抛出来的梗很有宅味我也喜欢，最喜欢的是在最后的「神保町哀歌」。人类与恶魔的寿命论百合恋情，用一首演歌表达对那片四叠半的房间的不舍，是夹心酱对那个无情虐杀他的百合铃的爱的告白和不能再相见的无奈。</p><p><strong>TOP 3</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/5f/18/282433_9wDx9.jpg" srcset="/img/loading.gif" alt="" /></p><p>一部描述创作者的动画，一部阐释Animation灵魂之意的动画。</p><p>白箱讲的更多的是staff的职场生活，告诉大家制作动画的辛苦；与之不同，映像研讲的是如何实现自己的幻想中的事物，如何更好地让动画变得让人震撼，告诉大家评价动画当然不能是单一方面的。两部动画从不同的方面讲解了动画的魅力。</p><p><strong>TOP 2</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/dc/8a/285482_c5RRj.jpg" srcset="/img/loading.gif" alt="" /></p><p>唯有在色情上全世界达成了一致。</p><p>正如我在知乎说的：<strong>比起色情的直球，大家更喜欢有趣的擦边球。</strong><br />《异种族》的色情演出非常有趣，在设定上同时具有完整的世界观、丰富的种族，即便不是肉番也能把当下一票异世界吊起来打。</p><p><strong>TOP 1</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/72/f9/285901_94tQr.jpg" srcset="/img/loading.gif" alt="" /></p><p>我认为考验作者笔力的两个长篇方向：质量好的<strong>群像剧</strong>、<strong>极大限制活动范围与人物关系</strong>的故事。</p><p>前者一旦作者功力不足就会显得观感差、节奏乱、人物关系复杂且没有联系，后者则是会显得无聊。</p><p>黄金神威则属于<strong>前者</strong>。</p><p>2020年度动画，确实是群友说的一样，黄金神威这个名字没有让他火起来，在原文的中「カムイ」就是剧中的神灵，不过如果直接用原文译名估计更没人看了23333。</p><p>说回来，黄金神威作为长篇漫画，融合了民俗学、历史学，在演绎北海道的民俗上独具一格。作者笔下的所有人物都用回忆串接起来，不会分出正派反派，有的只是以黄金之后的目的的利益而摆动的众人，一场为黄金而争夺的大逃杀。</p><p>动画化的第一季由于成本原因作画上是能省就省，主要突出剧情，而在第三季中作画得到了相当大的改善，在剧情、作画、演出、音乐四个方面达到了上等，真正成为了一部佳作，所有的人物都有血有肉，让观众能深深的喜欢上他们。</p><p>期待第四季。</p><h4 id="不分年代的tv动画"><a class="markdownIt-Anchor" href="#不分年代的tv动画"></a> 不分年代的TV动画</h4><p><strong>TOP 5</strong></p><p>空下</p><p><strong>TOP 4</strong></p><p>空下</p><p><strong>TOP 3</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/c3/2d/979_6uZ0j.jpg" srcset="/img/loading.gif" alt="" /></p><p>暴力美学的经典，现在都找不到打枪的动画了555。</p><p><strong>TOP 2</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/0f/cb/531_lhSVh.jpg" srcset="/img/loading.gif" alt="" /></p><p>一个系列撑起Hal Film Maker的动画，治愈系动画的顶峰。</p><p>灯里的恥ずかしいセリフ让美好的奇迹在这个蓝色的星球上发生，让所有美好的事物联系起来。</p><p><strong>TOP 1</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/26/12/1758_vs1Us.jpg" srcset="/img/loading.gif" alt="" /></p><p>文艺系百合动画的杰作，动画停在了刚要开始萌发交往的心思的时候，我觉得也相当不错。</p><p>小林七郎作为美术监督的水彩风格增添了这部作品的含蓄美，片假名监督用细腻的表现手法，配合志村贵子老师原作，蓝花的美妙显现。</p><p>不适合很快看完，适合一秒一秒看。</p><h4 id="剧场ova不限年代"><a class="markdownIt-Anchor" href="#剧场ova不限年代"></a> 剧场/OVA(不限年代)</h4><p><strong>TOP 5</strong></p><p><img src="http://ww1.sinaimg.cn/large/005J92LSly1go3et0i1h9j31hc0tljvz.jpg" srcset="/img/loading.gif" alt="mainVisual.jpg" /></p><p>对动画的热爱，对工作的热爱，永远都有童真的心。</p><p>再见，三好一郎。</p><p><strong>TOP 4</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/2c/ca/216372_3yKtA.jpg" srcset="/img/loading.gif" alt="" /></p><p>青春的激昂向上，是我没有体会过的。</p><p><strong>TOP 3</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/df/09/242483_hE8QE.jpg" srcset="/img/loading.gif" alt="" /></p><p>出色的演出和作画，吉田玲子优秀的剧本。我对最后一个故事不太满意，一种为了体现春之屋的接纳所有客人理念而体现，但与之前让客人开心也稍微有些矛盾。抛开个人对故事的想法，这片还是相当好的，对伤痛、感动的叙情不算过度，不缺实感。</p><p><strong>TOP 2</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/3d/c4/513_Any5s.jpg" srcset="/img/loading.gif" alt="" /></p><p>不是我的青春，也看见了我的狭隘。</p><p><strong>TOP 1</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/8d/ed/56847_Z5GY5.jpg" srcset="/img/loading.gif" alt="" /></p><p>以绘本的美术风格表现了物哀之美，用辉夜姬的反抗表达对自然万物和自由生活的热爱。</p><h3 id="漫画"><a class="markdownIt-Anchor" href="#漫画"></a> 漫画</h3><p><strong>TOP 5</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/4d/c0/282923_WN3Ve.jpg" srcset="/img/loading.gif" alt="" /></p><p>完全是老男人的爱好，香烟、酒、唱片、电影，换作漂亮可爱的女孩子来做这些事貌似也没有什么问题。</p><p>借此爱上了喝酒。</p><p><strong>TOP 4</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/7f/61/320298_W8EO8.jpg" srcset="/img/loading.gif" alt="" /></p><p>关于亲情。</p><p><strong>TOP 3</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/c9/e3/99767_1W1LN.jpg" srcset="/img/loading.gif" alt="" /></p><p>救赎。</p><p><strong>TOP 2</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/a1/bd/305429_axzF3.jpg" srcset="/img/loading.gif" alt="" /></p><p>优秀的勇者后传，优秀的公路片。</p><p><strong>TOP 1</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/04/8e/5668_Aktu0.jpg" srcset="/img/loading.gif" alt="" /></p><p>无需多言。</p><h3 id="书籍"><a class="markdownIt-Anchor" href="#书籍"></a> 书籍</h3><p>没读书。</p><h3 id="音乐2020"><a class="markdownIt-Anchor" href="#音乐2020"></a> 音乐（2020）</h3><p><strong>TOP 5</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/75/21/307915_ACVfN.jpg" srcset="/img/loading.gif" alt="" /></p><p>milet特色的女声，偏欧美风格多一点。</p><p><strong>TOP 4</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/41/40/316651_gLtKT.jpg" srcset="/img/loading.gif" alt="" /></p><p>配合ED不羁的作画和上色，funk、pop、jazz、rap的融合，节奏感十足，很棒。</p><p><strong>TOP 3</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/90/b4/302502_S7dxX.jpg" srcset="/img/loading.gif" alt="" /></p><p>Uru的音色和声音的情感我很喜欢，平静中涌动着强烈的感情，适合唱情歌。</p><p><strong>TOP 2</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/05/42/318405_Zztf7.jpg" srcset="/img/loading.gif" alt="" /></p><p>音乐为原神这个游戏添加了太多的魅力。</p><p><strong>TOP 1</strong></p><p><img src="https://lain.bgm.tv/pic/cover/l/c4/80/312232_rwGt3.jpg" srcset="/img/loading.gif" alt="" /></p><p>Evan Call</p><p>牛逼</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年1月追番笔记</title>
      <link href="/2020/12/19/2021%E5%B9%B41%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/12/19/2021%E5%B9%B41%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2021年的1月感觉看得有点多…可能是因为续作都积压在1月播出了吧…</p><h3 id="ウマ娘-プリティーダービー-season-2"><a class="markdownIt-Anchor" href="#ウマ娘-プリティーダービー-season-2"></a> ウマ娘 プリティーダービー Season 2</h3><p><img src="https://lain.bgm.tv/pic/cover/l/1c/6b/315574_yZh99.jpg" srcset="/img/loading.gif" alt="" /></p><p>    那么问题来了，手游什么时候出？</p><p>    1/01：PA从第一季的动画制作变成制作协力了啊…不过第一集也是全部交给PA了，总体来说作画没有第一季好，最后的live是动作捕捉？live还是可以的。<br />    1/13：PA是挂名，我錯了…</p><h3 id="ex-arm-エクスアーム"><a class="markdownIt-Anchor" href="#ex-arm-エクスアーム"></a> EX-ARM エクスアーム</h3><p><img src="https://lain.bgm.tv/pic/cover/l/18/80/269565_5W5I1.jpg" srcset="/img/loading.gif" alt="" /></p><p>    看女主人设还不错，比较戳XP</p><p>    1/13：可能是2021年動畫最大的樂子www，公司業務是製作3D模型？貌似給Sekiro製作過模型…<br />    2/28：如果愿意抛开制作组屎一样的制作，剧情上勉勉强强能看，但是就事实而言，即便是史莱姆那样的剧情我也能看的开心，但这个是真看不下去。</p><h3 id="裏世界ピクニック"><a class="markdownIt-Anchor" href="#裏世界ピクニック"></a> 裏世界ピクニック</h3><p><img src="https://lain.bgm.tv/pic/cover/l/e6/f6/301601_28ozr.jpg" srcset="/img/loading.gif" alt="" /></p><p>    佐藤卓哉，永远滴百合头子！原作水准不错，比较看好。</p><p>    1/01：佐藤卓哉干音响监督的片子的音乐水平和插入时间的把握很不错，在营造诡异的氛围上很不错。不过在第一集的制作水准就不太高啊，稍微远一点就上3d了，怪物的表现也是比较奇怪…<br />    2/28：弃了，这制作既不悬疑惊悚，也不百合贴贴。佐藤卓哉你还是适合做那种含蓄的片。</p><h3 id="無職転生-~異世界行ったら本気だす~"><a class="markdownIt-Anchor" href="#無職転生-~異世界行ったら本気だす~"></a> 無職転生 ～異世界行ったら本気だす～</h3><p><img src="https://lain.bgm.tv/pic/cover/l/8b/00/277554_tG28z.jpg" srcset="/img/loading.gif" alt="" /></p><p>    “异世界，你们的祖宗来了”。早前放出的PV质量相当好，期待正片。</p><p>    1/13：第一話感覺良好。<br />    2/8：已經不想說了…</p><h3 id="転生したらスライムだった件-第2期"><a class="markdownIt-Anchor" href="#転生したらスライムだった件-第2期"></a> 転生したらスライムだった件 第2期</h3><p><img src="https://lain.bgm.tv/pic/cover/l/e6/78/278031_2B2g7.jpg" srcset="/img/loading.gif" alt="" /></p><p>    看着玩玩，放松一下。<br />    2/28：在</p><h3 id="ホリミヤ"><a class="markdownIt-Anchor" href="#ホリミヤ"></a> ホリミヤ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/23/a2/315069_49P26.jpg" srcset="/img/loading.gif" alt="" /></p><p>    堀与宫村…其实还挺不想看的，当年能火是因为人设新潮时髦吧…在现在看来原作其实也就是一个普通的恋爱题材的少女漫画。</p><p>    1/13：動畫化水準不錯，還是值得一看的。<br />    2/28：</p><h3 id="怪物事変"><a class="markdownIt-Anchor" href="#怪物事変"></a> 怪物事変</h3><p><img src="https://lain.bgm.tv/pic/cover/l/6d/7c/296941_j4dd2.jpg" srcset="/img/loading.gif" alt="" /></p><p>    听群友说是小鬼灭，那我是不是就不用补鬼灭了（</p><h3 id="天空侵犯"><a class="markdownIt-Anchor" href="#天空侵犯"></a> 天空侵犯</h3><p><img src="https://lain.bgm.tv/pic/cover/l/15/1d/317693_3W2J6.jpg" srcset="/img/loading.gif" alt="" /></p><p>    网飞的片，听说原作的质量还行。<br />    其实有奶子和大腿就行（</p><h3 id="ワンダーエッグプライオリティ"><a class="markdownIt-Anchor" href="#ワンダーエッグプライオリティ"></a> ワンダーエッグ・プライオリティ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/dd/60/316607_Qukn6.jpg" srcset="/img/loading.gif" alt="" /></p><p>    CW的原创片，可以期待。</p><p>    1/13：不是可以期待，是遠超期待！<br />    第一話的製作水準可以説是1月最佳，懸疑的分鏡和演出遠遠超過隔壁裏世界郊游，作畫也稱得上超級棒，各處地方都表現了愛的可愛。<br />    剛開始的BGM有點利兹與青鳥的進校門那段的感覺，<br />    在回憶之中那段沒拿傘跑回家的劇情，按照正常敘事分鏡應當是被掀起劉海之後攝像頭正對小糸的臉，再給一個小糸的看愛逃走的主觀鏡頭，愛冒雨跑到家裏，配音跟上愛在家中的對話。然而若林信沒有用這個比較普通的主觀鏡頭，而是用信息量高的蒙太奇手法製造懸疑的氛圍，快速地講清劇情的發展，這段很棒。<br />    百合要素微存？在家中摸脚然後擁抱在耳朵旁邊説話我直接好了，若林信你太會了。<br />    總之，第一話完全是以劇場版的水準來製作的，第二話估計很難保持這樣的高水準。脚本是電視劇跨界到動畫的，看壇友評論最近的作品質量感人，希望能在這部動畫裏發力，可能會成爲2021年的魔園。<br />    1/23：正如所料，第二話的觀感就不如第一集了。</p><h3 id="のんのんびより-のんすとっぷ"><a class="markdownIt-Anchor" href="#のんのんびより-のんすとっぷ"></a> のんのんびより のんすとっぷ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/ac/b7/282684_0B301.jpg" srcset="/img/loading.gif" alt="" /></p><p>无需多言</p><h3 id="ゆるキャン-season-2"><a class="markdownIt-Anchor" href="#ゆるキャン-season-2"></a> ゆるキャン△ SEASON 2</h3><p><img src="https://lain.bgm.tv/pic/cover/l/0f/50/262897_Lfm1T.jpg" srcset="/img/loading.gif" alt="" /></p><p>    拯救业界！阿宅圣经！让无数蹲家阿宅有了出门露营的指导动画！尚方宝剑！<br />    1/13：搖曳露營，天下第一！第一話吃杯面的演出絕了，首位銜接的也很棒，撫子和朋友還有芝麻凜之間的距離感把握的很棒，總之就是非常好！<br />芝麻凜不鏽鋼杯已入手。<br />    1/23：寒冷冬日裏的暖陽。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月追番笔记</title>
      <link href="/2020/10/04/2020%E5%B9%B410%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/10/04/2020%E5%B9%B410%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="burn-the-witch"><a class="markdownIt-Anchor" href="#burn-the-witch"></a> <a href="https://www.agefans.tv/detail/20200161" target="_blank" rel="noopener">Burn The Witch</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/302293_i4b5e.jpg" srcset="/img/loading.gif" alt="" /></p><p>98，永远滴时髦超人！</p><h3 id="魔女の旅々"><a class="markdownIt-Anchor" href="#魔女の旅々"></a> <a href="https://www.agefans.tv/detail/20200014" target="_blank" rel="noopener">魔女の旅々</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/292970_kAjPt.jpg" srcset="/img/loading.gif" alt="" /></p><p>屑魔女可爱，百合贴贴，剧情丐版意林故事。</p><p>12/04：上次忘记记录了，到目前为止唯一一个能算得上比较黑的故事，巴哈姆特那边也从15+升到了18+，但怎么说吧，故事还是老套的故事，没有什么期待的心情。</p><p>12/19：最终话记录。12话还稍微有意思点，但整部作品来说其实是相当的无聊，作画说不上出彩，不过还算稳定，伊雷娜的形象塑造是本片唯一能够拿出来说的，作为公路片来说剧情倒是成为了最次的一项，其次能为本片加分的就是百合吧，其实也是很普通的嗯加进去的百合贴贴，没有什么意思。</p><h3 id="呪術廻戦"><a class="markdownIt-Anchor" href="#呪術廻戦"></a> <a href="https://www.agefans.tv/detail/20200096" target="_blank" rel="noopener">呪術廻戦</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/294993_O4GCS.jpg" srcset="/img/loading.gif" alt="" /></p><p>ED好猛，kksk</p><p>12/15：<strong>13话</strong>，开场5min战斗拳拳到肉，心理戏不拖沓，领域展开诡异和压迫的程度高，娜娜明的形象塑造在漫画这块也是亮点，真人逃脱的时候虎杖的径庭拳的作画用水墨表现咒力的缠绕配合背景音乐里的弦乐节奏不错，最后心理的文戏描写和虎杖的转变就是少年漫的风格了，为接下来交流会做准备，ED的之后的小剧场也很有意思</p><h3 id="アサルトリリィ-bouquet"><a class="markdownIt-Anchor" href="#アサルトリリィ-bouquet"></a> <a href="https://www.agefans.tv/detail/20200007" target="_blank" rel="noopener">アサルトリリィ BOUQUET</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/292712_pACzh.jpg" srcset="/img/loading.gif" alt="" /></p><p>😅</p><p>12/04：这就是新时代的三集定律吗？三倍数集的脚本怪，演出敷衍，部分战斗的作画还行，沙发套你们做完都不自己看看吗（</p><p>12/19：世界观展开不明，作画好，肉腿多，奶子大。</p><p>12/15：结尾还算不错，没有那么烂，还算平稳，决战和会议的蒙太奇手法有点意思，廖化直接致敬飞跃巅峰，笑死。</p><h3 id="神様になった日"><a class="markdownIt-Anchor" href="#神様になった日"></a> <a href="https://www.agefans.tv/detail/20200227" target="_blank" rel="noopener">神様になった日</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/306429_70e04.jpg" srcset="/img/loading.gif" alt="" /></p><p>10/04：第几集打棒球？</p><p>成了，第一集就打棒球</p><p>11/22：越来越拉胯了，到此为止的剧情都是很容易就能想到的。而催泪回因为只有一集，人物情绪转变太快，手法古老且没用，功力甚至不如以前。各种剧情不明所以，不过进行的活动的内容都是能以某种介质保留下来的，可能在末日那天会作为关键道具（？），等待一波怒涛展开。</p><p>12/19：这就是能让所有人都感动的动画？</p><h3 id="ラブライブ虹ヶ咲学園スクールアイドル同好会"><a class="markdownIt-Anchor" href="#ラブライブ虹ヶ咲学園スクールアイドル同好会"></a> ラブライブ！虹ヶ咲学園スクールアイドル同好会</h3><p><img src="https://lain.bgm.tv/pic/cover/l/a7/35/296659_o709D.jpg" srcset="/img/loading.gif" alt="" /></p><p>每集的SOLO Live很棒，2020年的扭曲作。</p><p>2/8：用心做偶像，用脚做高达.jpg 剧情上还是偶像动画一贯的遇到困难大家一起解决，互相解决心结的故事，作画、演出上也很好表现了美少女偶像的可爱，基本上每集一个高质量SoloLive，音乐对应人物性格的类型也很多，最后一集我都感觉是不是叫人来剪了个静止系MAD。总的来说看12个MV也不亏。</p><h3 id="体操ザムライ"><a class="markdownIt-Anchor" href="#体操ザムライ"></a> 体操ザムライ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/bf/2a/312979_2p9Ln.jpg" srcset="/img/loading.gif" alt="" /></p><p>听说是算是蹭东京奥运会献礼作，而且制作不错，先看着吧。</p><p>2/8：王道带娃物语，流畅细致的体操动作的3D和作画，既写了在殿堂之上武士传说，也有描写之下众生的努力，很棒。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>姜子牙 | 高技术下的空虚剧本</title>
      <link href="/2020/10/03/%E5%A7%9C%E5%AD%90%E7%89%99-%E9%AB%98%E6%8A%80%E6%9C%AF%E4%B8%8B%E7%9A%84%E7%A9%BA%E8%99%9A%E5%89%A7%E6%9C%AC/"/>
      <url>/2020/10/03/%E5%A7%9C%E5%AD%90%E7%89%99-%E9%AB%98%E6%8A%80%E6%9C%AF%E4%B8%8B%E7%9A%84%E7%A9%BA%E8%99%9A%E5%89%A7%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/291286_qGcCX.jpg" srcset="/img/loading.gif" alt="" /></p><p>自从出院之后就基本没有出过门，第一次出门活动可能就是看《姜子牙》了吧…</p><p>一句话简评就是：前两分钟非常好，后面整体都一般，剧本真该请美术吃饭。</p><p>单从技术来看，我认为已经达到很好的水平了，对比皮克斯来看我也认为不差。前有《罗小黑战记》打出国产2D动画的高峰，现在《姜子牙》在3D动画中也能占有一地。</p><p>然而对于观众来说，技术好、演出好是视觉上的极致体验，但假如「剧本」不能与其技术的高度相应，那么即便是最好的技术去做动画，带给观众的体验就会大打折扣，《姜子牙》便是这样的动画。</p><p>我查了《姜子牙》的担任剧本的人，之前有担任过两部小作品的剧本，《姜子牙》作为他的出道作来说也不为过，但它质量却不尽人意。</p><p>在观影过程中，可以直接感受到剧本想要表达的东西：生死、反抗权力、拯救。其中对于生死的完成度比较高，对生死的认识、对死去亡魂的敬重也是推进剧情、人物关系的核心力量。但是反抗和拯救苍生两点却自我逻辑混乱，无法让人满意，同时缺少一场真正的大战，也是很多人说剧情平淡的原因，至于为什么缺少，懂得都懂。</p><p>只说拯救苍生，从「舍一人而救苍生」，用强行绑锁来证明「斩善即为拯救苍生，不斩一善不为神」的伪善，不说剧本在这里想暗地表达什么，即使是这样去描述一个正面包装下的恶人，我也认为只是让剧情强行推动的要素罢了。最后到「拯救眼前的每一个人」，说的好听，后面的剧情却没有任何行为能证明这句话。为了救小九，四不相死去，失去修为的申公豹差点死掉，狐妖把自己怼爆了，自己爆种踏破天梯被关进监狱，小九也被师尊消灭，到最后，牺牲了身边的所有人，换来了人间的“和平”。</p><p>我不明白剧本是想告诉我去打破所谓“皇上至上”的伪善，还是想告诉我：无论如何，现实是不会如意的。我想应该是后者。</p><p>结尾是用一发机械降神结束的，师祖惩罚了师尊，但没有说怎样惩罚的，姜子牙被关进监狱成为人间传说，这样的人物形象前后对比很常见，却不好，根本无法感觉的真情实意。或者说这样的对比就是剧本想要表达的人间的虚情，那么《姜子牙》这部作品就是剧本想要尝试去做反抗权力最后失败告终的失败作，层层包装下的失败反抗，不应该做成电影，因为篇幅太小，人物形象平面、逻辑混乱、配角工具人化，发挥出来就是给人平淡的感觉，没有波澜，如果能做成连载动画，我想会更好。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式初探</title>
      <link href="/2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>正则表达式就是一种规定类型的字符串，可以用正则表达式筛选出符合条件的字符串进行后续操作</p><h3 id="基础字符"><a class="markdownIt-Anchor" href="#基础字符"></a> 基础字符</h3><table><thead><tr><th>元字符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符的所有的字符</td></tr><tr><td>\d</td><td>匹配0-9数字(digit)</td></tr><tr><td>\D</td><td>匹配非0-9数字(not digit)</td></tr><tr><td>\w</td><td>匹配大小写字母、0-9数字、_(word character)</td></tr><tr><td>\W</td><td>匹配非大小写字母、0-9数字、_(not a word character)</td></tr><tr><td>\s</td><td>匹配空白符(whitespace)</td></tr><tr><td>\S</td><td>匹配非空白符(not whitespace)</td></tr><tr><td>\b</td><td>匹配单词的开始的字符（word boundary)</td></tr><tr><td>\B</td><td>匹配非单词的开始的字符(not a word boundary)</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>比如对应一串数字<code>1035154062</code></p><p>其正则表达式即<code>^\d\d\d\d\d\d\d\d\d\d$</code></p><h3 id="重复"><a class="markdownIt-Anchor" href="#重复"></a> 重复</h3><p>但这样写实在太长了，所以出现了记录重复的记号</p><table><thead><tr><th>重复记号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p>那么对于上面的数字<code>1035154062</code>，正则表达式即<code>\d{10}</code></p><h3 id="转义"><a class="markdownIt-Anchor" href="#转义"></a> 转义</h3><p>对于一些是内容的字符与正则表达式的语法冲突时，在字符前加<code>\</code>可以转换成内容</p><p>比如内容为<code>(Hello World)</code></p><p>正则表达式则为<code>\(Hello Wolrd\)</code></p><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组</h3><p>用<code>()</code>可以包含进整体的内容，并且记录组别</p><p>比如对于一组网址</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//aimip02.cn</span><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.baidu.com</span><span class="hljs-symbol">http:</span><span class="hljs-comment">//bgm.tv</span><span class="hljs-symbol">https:</span><span class="hljs-comment">//luogu.org</span></code></pre><p>写出其正则表达式<code>https?://(www\.)?(\w+)(\.\w+)</code>，每一个括号即一组，下标从1开始，每一组用<code>$1 $2 $3</code>表示</p><p>即</p><pre><code class="hljs routeros">Group 1: Group 1: www.Group 1: Group 1:Group 2: aimip02Group 2: baiduGroup 2: bgmGroup 2: luoguGroup 3: .cnGroup 3: .comGroup 3: .tvGroup 3: .org</code></pre><h3 id="区间"><a class="markdownIt-Anchor" href="#区间"></a> 区间</h3><p>用<code>[]</code>可以规定出区间和单个符合条件，<code>[^ ]</code>即条件补集</p><p>比如对于</p><pre><code class="hljs angelscript"><span class="hljs-number">123</span><span class="hljs-number">-456</span><span class="hljs-number">-789</span><span class="hljs-number">987.654</span><span class="hljs-number">.321</span></code></pre><p>用正则表达式选出来，即<code>\d+[.-]\d+[.-]\d{3}</code></p><p>或者是<code>[0-9]+[.-][0-9]+[.-][0-9]{3}</code></p><h3 id="或"><a class="markdownIt-Anchor" href="#或"></a> 或</h3><p>即<code>|</code></p><p>比如对于一组人名</p><pre><code class="hljs armasm"><span class="hljs-symbol">Mr.</span> <span class="hljs-keyword">Smith</span><span class="hljs-keyword">Mrs </span>Y<span class="hljs-symbol">Mr</span> Spike<span class="hljs-symbol">Ms.</span> Faye</code></pre><p>其中有的有点，有的没有，有的是Mrs，有的是Mr，用正则表达式全部概括即<code>M(r|s|rs)\.?\s[A-Z]\w*</code></p><h3 id="零宽断言"><a class="markdownIt-Anchor" href="#零宽断言"></a> 零宽断言</h3><h4 id="正向先行断言匹配目标字符串前的内容"><a class="markdownIt-Anchor" href="#正向先行断言匹配目标字符串前的内容"></a> 正向先行断言:匹配目标字符串前的内容</h4><p>即<code>?=target</code></p><p>比如查询阅读量返回数字</p><p><code>&quot;&lt;span class=&quot;read-count&quot;&gt;阅读量：114514&lt;/span&gt;&quot;</code></p><p>正则表达式为<code>\d+(?=&lt;/span&gt;)</code>，输出<code>114514</code></p><h4 id="正向先行断言匹配目标字符串后的内容"><a class="markdownIt-Anchor" href="#正向先行断言匹配目标字符串后的内容"></a> 正向先行断言:匹配目标字符串后的内容</h4><p>即<code>?&lt;=target</code></p><p>比如查询阅读量返回数字</p><p><code>&quot;&lt;span class=&quot;read-count&quot;&gt;阅读量：1919810&lt;/span&gt;&quot;</code></p><p>即<code>(?&lt;=&lt;span class=&quot;read-count&quot;&gt;阅读量：)\d+</code>，输出<code>1919810</code></p><h4 id="负向先行断言"><a class="markdownIt-Anchor" href="#负向先行断言"></a> 负向先行断言</h4><p>即<code>?!target</code></p><h4 id="负向后行断言"><a class="markdownIt-Anchor" href="#负向后行断言"></a> 负向后行断言</h4><p>即<code>?&lt;!target</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>とある飛空士への追憶 | 二次元的罗马假日</title>
      <link href="/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/"/>
      <url>/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/10829_JJ2DE.jpg" srcset="/img/loading.gif" alt="" /></p><p>以前在高中的时候就被别人推荐过这本小说，但是时间太少就没有看，这次住院的时候没事干就顺便把这个的剧场版看了。</p><p>能吐槽的就是细节问题和声优的实力差，男主背景经历单薄，女主没有啥训练就可以承受这么大的加速度，撒金粉的行为也太不符合现实了，给人的感觉很怪。</p><p>但或许这一切的不符合逻辑才会让这部作品富有浪漫感。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182851.png" srcset="/img/loading.gif" alt="" /></p><p>可能对于看惯了女主倒贴的戏码的阿宅来说，最后没有在一起，男主也没有功成名就比较介意，但事实上这个故事就是这样，平淡而浪漫。简单的开头，富有激情和感动的突出包围，女主的形象转变，飞行员对决，任务完成的浪漫诀别。看到开头就能猜到结尾的剧情，事实上也非常动人，对于动画来说，讲好一个普通的故事比展开宏大的世界不一定简单，却能带给观众好的体验。</p><p>结尾男主驾驶飞机伴随着背景交响乐起舞，挥洒金粉，女主在舰头伫立注视，真的是非常浪漫。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182823.png" srcset="/img/loading.gif" alt="" /></p><p>最后的最后还是吐槽一点，我看的时候有EVA剧场的既视感，一看人物设定：松原秀典，妈的果然是你，我还挺喜欢的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182635.png" srcset="/img/loading.gif" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>他人世界末游戏体验</title>
      <link href="/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/307921_Hx4Zm.jpg" srcset="/img/loading.gif" alt="" /></p><h2 id="写在开篇"><a class="markdownIt-Anchor" href="#写在开篇"></a> 写在开篇</h2><p>《他人世界末》是我近年来玩过的国产Gal中剧本完成度最好的，配乐水平很高的，CG质量很高的偏电波作品。</p><p>我一开始是抱着质量能跟《WA2》差不多的心态玩的，玩了木竹樱和赵诗的所有结局之后发现，这也只能算是国产Gal中水平极高的一作，和日本Galgame高水平的作品而言还是无法比拟（就拿WA2的音乐水平来比较就会被完全吊打）</p><h2 id="赵诗线内含剧透"><a class="markdownIt-Anchor" href="#赵诗线内含剧透"></a> 赵诗线（内含剧透）</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgoovgrj20kq0pf767.jpg" srcset="/img/loading.gif" alt="" /></p><p>在三条可攻略角色线路中，我认为赵诗线给我的体验是比较差的，我做出的任何选项并不能影响男主对赵诗的好感，男主一直喜欢的就是沈岩。</p><p>在这条线中我认为这是非常正常的恋爱过程，不存在赵诗舔男主的行为，只是单纯的单恋然后告白在一起，然而蓝姐姐告诉我：不行。</p><p>这条线里我见到了男主无数扭曲的行为，赵诗为了爱情而妥协的行为，为了胃疼而扭曲，并且是从序章中男主的性格铺垫中无法完美解释的，比如：</p><p>1、男主和赵诗在已经成为情侣（选择接受）后，仍然不会将自己换成男友的身份说话，这条我可以勉强理解成男主的自卑心理作祟。（即男主哥哥对男主的阴影，男主无法认同自己接受别人的告白的恋爱，他应该做的是暗恋沈岩）</p><p>2、男主和赵诗在第一次约会逛画展时，提出分开看最后集合的要求，男主遇到沈岩后逃避，赵诗妥协。</p><p>3、四人约会。</p><p>4、男主帮助快出轨的基友哄沈岩，并丢下赵诗一个人去找沈岩。</p><p>5、在无数伪装之下维持着男主和赵诗“表面情侣”的关系，哄着被华昂伤害而堕落的沈岩，最后男主和赵诗分手。（漫长的道别TE）</p><p>6、赵诗宁愿男主一直想着沈岩也要和他维持着情侣的关系。（钟无艳NE）</p><p>在以上的行为中，我只感受到了蓝姐姐对于舔狗的理解：男主舔沈岩，赵诗舔男主，男主不搭理赵诗，赵诗也要贴上去舔，沈岩不喜欢男主，男主也要贴上去舔。</p><p>这条线就是看舔狗舔的心理，我完全无法感受到我的选择对男主心理的影响，男主一直都是喜欢沈岩的，赵诗一直都是宁愿舔着男主也要和男主在一起的女人。</p><p>对于蓝姐姐的舔狗恋爱心理来说，钟无艳结局是很好的，非常有味</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234800.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234812.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235043.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235106.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235128.png" srcset="/img/loading.gif" alt="" /></p><p>蓝姐姐，你对舔狗的理解可真是深刻（无感情）</p><h2 id="偶像线"><a class="markdownIt-Anchor" href="#偶像线"></a> 偶像线</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgn5zfbj20ks0phwg8.jpg" srcset="/img/loading.gif" alt="" /></p><p>根据蓝姐姐在知乎写的回答可以知道我玩偶像线的过程中那么熟悉的感觉，因为这就是顺着gal玩家的毛写的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716000557.png" srcset="/img/loading.gif" alt="" /></p><p>木竹樱和男主是很相像的两人，这一点也在游戏中提到。</p><p>木竹樱活在华昂天才音乐实力和父母的阴影之下，男主活在哥哥的阴影中，两个人都是自卑的人，都是没有安全感的人，对外表现强烈的抗拒心。两个人的共同性让gal玩家在玩的过程中能够体会到攻略的感觉，这也是为什么偶像线带给人的感觉很舒服（顺毛）。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002501.png" srcset="/img/loading.gif" alt="" /></p><p>而木竹樱这条线选起来也很简单，只要顺着她想要的东西一直选就可以GE，但假如有一个选错就会进入其他结局。</p><p>我选“心中”和“邮差”这两个结局说下我的感受。</p><h3 id="心中"><a class="markdownIt-Anchor" href="#心中"></a> 心中</h3><p>这个结局还满现实的，年轻时说下的拯救她，和她一起活下去，在成年工作之后不得不面对现实的艰难时，最后以“只有死亡才能将我们分开”兑现了年少的承诺。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002411.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002847.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002901.png" srcset="/img/loading.gif" alt="" /></p><p>这样的反转带给人的心理震撼很大，让人以为在两人经历了波折之后终于能够在一起幸福地生活下去的时，现实却狠狠地打了你一巴掌。年轻时骄傲的资本却成了未来堕落的契机，不能不让人感到遗憾。</p><h3 id="邮差"><a class="markdownIt-Anchor" href="#邮差"></a> 邮差</h3><p>跨越五年的约定，浪漫到我要从嘴里吐出砂糖了。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004012.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004029.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>“人啊，幸福地活下去吧！”</p></blockquote><p>五年之后，小偶像变成了家喻户晓的明星，而我只是成为了一名普通公司的职员，面对如此巨大的地位差距，我是否有勇气能去与她见面呢，这成了一个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004349.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>这里想要的结果是YES，又或是NO呢。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004536.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004546.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004557.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004616.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>最终，我没有选择上车，我看着最后一辆174路远去，直至眼睛发胀发酸。</p></blockquote><p>我一开始的想法与大多数玩家是一致的，既然得到了机会为什么不上车呢？等待了五年，最后等到了爱情的一无所有。</p><p>在看到蓝姐姐的回答之后，我陷入了思考。</p><blockquote><p>蓝莲安：举个例子，木竹樱的邮差END很多人都说我没有心，为什么不上车，你设身处地想想自己处于相同情况时，周围的人会不会劝你上车，你自己有没有勇气上车。这个结局之所以不让主角上车，就是为了让玩家记住这种遗憾感，现实生活中遇到相似的困境时，能拿出勇气“上车”。</p></blockquote><p>是啊，面对身份远高于我的偶像，我是否有勇气能上车。我与她的联系仅仅只有一个五年前月夜下的浪漫约定，而这一切随着时间又是否会改变，我不敢想，也不愿去想；我害怕，害怕她没有来，我同样害怕，害怕她来了，我配不上她。这样的矛盾是一个经历过强烈自卑的人会有的心理，面对飘渺的爱情我们是否有勇气去面对，去抓住爱情的锁链。蓝姐姐让我们思考这个问题，让我们在现实中遇到这种问题时能够做出能让自己不遗憾的选择。</p><p>当然，现实中我也不可能遇到小偶像（笑）。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>我并没有玩沈岩线，其一是因为这样的黑长直模板并没有像冬马一样吸引我，其二是因为我不想当舔狗。</p><p>总体上来说这部作品的文学性在gal作品里面算很上等的（青春伤痕文学，蓝姐姐又被称为动漫界郭敬明），其反转和立意在近年众多的国产Gal作品中独树一帜，打破了国产Gal的人物对话偏日语对话的尴尬，配乐敷衍水平低，声优的表现不尽人意的刻板印象。</p><p>最后希望蓝姐姐能在DLC中加入攻爷的攻略线，谢谢（砰砰砰）</p><p>购买链接：<a href="https://store.steampowered.com/app/1225780/_Onlooker/" target="_blank" rel="noopener">https://store.steampowered.com/app/1225780/_Onlooker/</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Galgame </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板整理</title>
      <link href="/2019/01/26/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/01/26/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>预计可能会有：</p><p>数论：快速幂，gcd，exgcd，逆元，Lucas定理，CRT，BSGS，欧拉函数，线性筛，矩阵乘法，FFT</p><p>图论：最短路，最小生成树，最大流，费用流，有向图的强连通分量，无向图的边的双联通分量</p><p>树：LCA，树分治，树链剖分</p><p>数据结构：树状数组，线段树，Splay，Treap，LCT，莫队，左偏树</p><p>先写一部分吧，反正大多数也不会，会写多少写多少吧…</p><a id="more"></a><h3 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h3><h4 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h4><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll n, ll mod)</span></span>&#123;ll res=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(n)&#123;        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) res=(res*a)%mod;        n&gt;&gt;=<span class="hljs-number">1</span>;        a=(a*a)%mod;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h4 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> gcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:gcd(b,a%b);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">return</span> a*b/gcd(a,b);&#125;</code></pre><h4 id="exgcd"><a class="markdownIt-Anchor" href="#exgcd"></a> exgcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!b)&#123;c=a;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;    <span class="hljs-keyword">else</span>&#123;exgcd(b,a%b,c,y,x);y-=(a/b)*x;&#125;&#125;</code></pre><h4 id="逆元"><a class="markdownIt-Anchor" href="#逆元"></a> 逆元</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">return</span> qpow(a,n<span class="hljs-number">-2</span>,n);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> x, y;    exgcd(a,n,x,y);    <span class="hljs-keyword">return</span> (x+n)%n;&#125;</code></pre><h4 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(not_prime, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(not_prime));    phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;        <span class="hljs-keyword">if</span>(!not_prime[i])&#123;prime[++top]=i;phi[i]=i<span class="hljs-number">-1</span>;&#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= top&amp;&amp;i*prime[j] &lt;= n; ++j)&#123;            not_prime[prime[j]*i]=<span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;phi[prime[j]*i]=phi[i]*prime[j];<span class="hljs-keyword">break</span>;&#125;            phi[prime[j]*i]=phi[i]*(prime[j]<span class="hljs-number">-1</span>);        &#125;    &#125;&#125;</code></pre><h4 id="中国剩余定理"><a class="markdownIt-Anchor" href="#中国剩余定理"></a> 中国剩余定理</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CRT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> m[],<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)        M *= m[i];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)    &#123;        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">int</span> Mi = M / m[i];        exgcd(Mi, m[i], x, y);        ans = (ans + Mi * x * a[i]) % M;    &#125;    <span class="hljs-keyword">if</span>(ans &lt; <span class="hljs-number">0</span>) ans += M;    <span class="hljs-keyword">return</span> ans;&#125;</code></pre><h4 id="线性筛"><a class="markdownIt-Anchor" href="#线性筛"></a> 线性筛</h4><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> prime[max_], primes[max_], num;<span class="hljs-built_in">memset</span>(prime,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(prime));prime[<span class="hljs-number">0</span>]=prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=limit;i++)&#123;<span class="hljs-keyword">if</span>(prime[i])primes[num++]=i;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;num&amp;&amp;i*primes[j]&lt;limit;j++)&#123;prime[i*primes[j]]=<span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(!(i%primes[j]))<span class="hljs-keyword">break</span>;&#125;&#125;</code></pre><h4 id="矩阵乘法"><a class="markdownIt-Anchor" href="#矩阵乘法"></a> 矩阵乘法</h4><pre><code class="hljs cpp"><span class="hljs-comment">//顺便带了一个快速幂，递推数列的矩阵自己推</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span>&#123;</span>    ll m[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];&#125;;ll n, k;Mat input, unit;<span class="hljs-function">Mat <span class="hljs-title">Matrix_Mul</span><span class="hljs-params">(Mat x, Mat y)</span> </span>&#123;    Mat c;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            c.m[i][j] = <span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;                c.m[i][j] = c.m[i][j] % Mod + x.m[i][k] * y.m[k][j] % Mod;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> c;&#125;<span class="hljs-function">Mat <span class="hljs-title">Quick_Matrix_pow</span><span class="hljs-params">(Mat a, ll n)</span> </span>&#123;    Mat res = unit;    <span class="hljs-keyword">while</span> (n) &#123;        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)            res = Matrix_Mul(res, a);        a = Matrix_Mul(a, a);        n &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld"</span>, &amp;n, &amp;k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;input.m[i][j]);        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        unit.m[i][i] = <span class="hljs-number">1</span>;    Mat ans = Quick_Matrix_pow(input, k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>, ans.m[i][j] % Mod);        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="lucas定理"><a class="markdownIt-Anchor" href="#lucas定理"></a> Lucas定理</h4><p>用不熟练还是不写了</p><h4 id="bsgs"><a class="markdownIt-Anchor" href="#bsgs"></a> BSGS</h4><p>只听过</p><h4 id="fft"><a class="markdownIt-Anchor" href="#fft"></a> FFT</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cassert&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;climits&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;deque&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug puts(<span class="hljs-meta-string">"-----"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmax</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? a : b;&#125;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmin</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? b : a;&#125;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">2147483647</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">19260817</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>; <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar())) <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-string">'0'</span>);<span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) print(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Complex</span>&#123;</span>    <span class="hljs-keyword">double</span> a, b;    Complex() &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a, <span class="hljs-keyword">double</span> _b) : a(_a), b(_b) &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a) : a(_a), b(<span class="hljs-number">0.0</span>) &#123;&#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a + z.a, b + z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a - z.a, b - z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a * z.a - b * z.b, a * z.b + b * z.a);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">double</span> m = z.a * z.a + z.b * z.b;        <span class="hljs-keyword">return</span> Complex((a * z.a + b * z.b) / m, (b * z.a - a * z.b) / m);    &#125;&#125;;Complex a[Maxn], b[Maxn];<span class="hljs-keyword">int</span> alen, blen, len, L, n, rev[Maxn], ans[Maxn];<span class="hljs-keyword">int</span> _a[Maxn], _b[Maxn];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(Complex c[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> f)</span> </span>&#123;    Complex wn, w, x, y;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)        <span class="hljs-keyword">if</span>(i &lt; rev[i]) <span class="hljs-built_in">std</span>::swap(c[i], c[rev[i]]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;        wn = Complex(<span class="hljs-built_in">cos</span>(pi / i), <span class="hljs-built_in">sin</span>(pi / i) * f);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p = i &lt;&lt; <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; j &lt; n; j += p) &#123;            w = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; i; ++k, w = w * wn) &#123;                x = c[j + k]; y = w * c[j + k + i];                c[j + k] = x + y; c[j + k + i] = x - y;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(!~f) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) c[i].a /= (<span class="hljs-keyword">double</span>)n;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    alen = read(), blen = read(), len = alen + blen;    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">1</span>; n &lt;= len; n &lt;&lt;= <span class="hljs-number">1</span>, L++);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (L - <span class="hljs-number">1</span>));<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= alen; ++i) a[i].a = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= blen; ++i) b[i].a = read();    FFT(a, n, <span class="hljs-number">1</span>); FFT(b, n, <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) a[i] = a[i] * b[i];    FFT(a, n, <span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) ans[i] = (<span class="hljs-keyword">int</span>)(a[i].a + <span class="hljs-number">0.5</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, ans[i]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h3><h4 id="最短路"><a class="markdownIt-Anchor" href="#最短路"></a> 最短路</h4><h5 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heapnode</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> node,val;    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> heapnode &amp;rhs) <span class="hljs-keyword">const</span>     &#123;        <span class="hljs-keyword">return</span> val &gt; rhs.val;    &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::priority_queue&lt;heapnode&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    dis[s] = <span class="hljs-number">0</span>;    Q.push((heapnode)&#123;s,<span class="hljs-number">0</span>&#125;);    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        heapnode U = Q.top();        Q.pop();        <span class="hljs-keyword">if</span> (vis[U.node])            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">int</span> u = U.node;        vis[u] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                Q.push((heapnode)&#123;v,dis[v]&#125;);            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    dijkstra(s);    <span class="hljs-comment">///do something...</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h5 id="spfaslf"><a class="markdownIt-Anchor" href="#spfaslf"></a> SPFA///slf</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= P; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    Q.push_back(s);    dis[s] = <span class="hljs-number">0</span>;    vis[s] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        <span class="hljs-keyword">int</span> u = Q.front();        Q.pop_front();        vis[u] = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                <span class="hljs-keyword">if</span> (!vis[v])                &#123;                    vis[v] = <span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                    <span class="hljs-comment">//忘了是不是这么写了...</span>                &#125;            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= C; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    spfa(s);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h4><h5 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h5><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> F[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==F[x]?x:F[x]=find(F[x]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;F[find(b)]=find(a);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(edge a, edge b)</span></span>&#123;<span class="hljs-keyword">return</span> a.val&lt;b.val;&#125;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) F[i]=i;sort(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>,cmp);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)&#123;<span class="hljs-keyword">int</span> u=e[i].next;<span class="hljs-keyword">int</span> v=e[i].to;<span class="hljs-keyword">if</span>(find(u)!=find(v))&#123;merge(u,v);ans+=e[i].val;k++;<span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;&#125;&#125;&#125;</code></pre><h5 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> Prim</h5><p>先占坑，不会写</p><h4 id="网络流"><a class="markdownIt-Anchor" href="#网络流"></a> 网络流</h4><h5 id="dinic"><a class="markdownIt-Anchor" href="#dinic"></a> Dinic</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, cur[max_], depth[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;add(u,v,w);add(v,u,<span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(depth));    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push(s), depth[s]=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;    <span class="hljs-keyword">int</span> now=q.front();q.pop();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;    <span class="hljs-keyword">int</span> to=e[i].to;    <span class="hljs-keyword">if</span>(depth[to]==<span class="hljs-number">-1</span>&amp;&amp;e[i].flow)&#123;    depth[to]=depth[now]+<span class="hljs-number">1</span>;q.push(to);    &#125;    &#125;    &#125;    <span class="hljs-keyword">return</span> depth[t]!=<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;<span class="hljs-keyword">if</span>(now==t) <span class="hljs-keyword">return</span> limit;<span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;<span class="hljs-keyword">int</span> to=e[i].to;<span class="hljs-keyword">if</span>(depth[to]==depth[now]+<span class="hljs-number">1</span>&amp;&amp;e[i].flow)&#123;w=dfs(to, min(limit-flow, e[i].flow));e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;<span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">return</span> flow;&#125;&#125;<span class="hljs-keyword">if</span>(!flow) depth[now]=<span class="hljs-number">-1</span>;<span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-keyword">int</span> maxflow=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">while</span>(bfs())&#123;<span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));maxflow+=dfs(s, inf);&#125;&#125;</code></pre><h5 id="zkw费用流不想写一般的费用流了"><a class="markdownIt-Anchor" href="#zkw费用流不想写一般的费用流了"></a> zkw费用流//不想写一般的费用流了</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, flow, dis;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, depth[max_], cur[max_], dis[max_], vis[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> c)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;e[cnt].dis=c;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span>&#123;ins(u,v,w,c);ins(v,u,<span class="hljs-number">0</span>,-c);&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push_back(t), dis[t]=<span class="hljs-number">0</span>, vis[t]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;        <span class="hljs-keyword">int</span> now=q.front();q.pop_front();vis[now]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(e[i^<span class="hljs-number">1</span>].flow&amp;&amp;dis[to]&gt;dis[now]-e[i].dis)&#123;                dis[to]=dis[now]-e[i].dis;                <span class="hljs-keyword">if</span>(!vis[to])&#123;                    vis[to]=<span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> dis[s]&lt;inf;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;    <span class="hljs-keyword">if</span>(now==t)&#123;        vis[now]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> limit;    &#125;    <span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;    vis[now]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;        <span class="hljs-keyword">int</span> to=e[i].to;        <span class="hljs-keyword">if</span>(!vis[to]&amp;&amp;e[i].flow&amp;&amp;dis[now]-e[i].dis==dis[to])&#123;            w=dfs(to,min(e[i].flow,limit-flow));            <span class="hljs-keyword">if</span>(w)&#123;                ans+=w*e[i].dis;e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;            &#125;            <span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mcf</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> flow=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(spfa())&#123;        vis[t]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(vis[t])&#123;            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));            <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));            flow+=dfs(s, inf);        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;</code></pre><h4 id="强连通分量"><a class="markdownIt-Anchor" href="#强连通分量"></a> 强连通分量</h4><h5 id="割点"><a class="markdownIt-Anchor" href="#割点"></a> 割点</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">300010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;e[maxn&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[maxn], cnt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[++cnt] = (edge)&#123;head[u], v&#125;; head[u] = cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;add(u, v); add(v, u);&#125;<span class="hljs-keyword">int</span> low[maxn], dfn[maxn], idx = <span class="hljs-number">0</span>, cut[maxn], point = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;    low[now] = dfn[now] = ++idx;    <span class="hljs-keyword">int</span> child = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = head[now]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> to = e[i].to;        <span class="hljs-keyword">if</span>(!dfn[to]) &#123;            tarjan(to, fa);            low[now] = <span class="hljs-built_in">std</span>::min(low[now], low[to]);            <span class="hljs-keyword">if</span>(low[to] &gt;= dfn[now] &amp;&amp; now != fa)                cut[now] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(now == fa) ++child;        &#125;        low[now] = <span class="hljs-built_in">std</span>::min(low[now], dfn[to]);    &#125;    <span class="hljs-keyword">if</span>(child &gt;= <span class="hljs-number">2</span> &amp;&amp; now == fa) cut[now] = <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    n = read(), m = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;        <span class="hljs-keyword">int</span> x = read(), y = read();        ins(x, y);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)         <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i, i);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) ++point;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, point);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, i);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h3><h4 id="lca"><a class="markdownIt-Anchor" href="#lca"></a> LCA</h4><p>//不想自己打了…</p><h5 id="倍增"><a class="markdownIt-Anchor" href="#倍增"></a> 倍增</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> lgn, dep[maxn], anc[maxn][<span class="hljs-number">30</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> v = e[i].to;        <span class="hljs-keyword">if</span>(v == anc[u][<span class="hljs-number">0</span>]) <span class="hljs-keyword">continue</span>;        anc[v][<span class="hljs-number">0</span>] = u;        dep[v] = dep[u] + <span class="hljs-number">1</span>;        dfs(v);    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calanc</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= sz; j++) &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= sz; i++) &#123;            anc[i][j] = anc[anc[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];        &#125;    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">querylca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(dep[u] &gt; dep[v]) <span class="hljs-built_in">std</span>::swap(u, v);    <span class="hljs-keyword">int</span> del = dep[v] - dep[u];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= del; i++) &#123;        <span class="hljs-keyword">if</span>((<span class="hljs-number">1</span> &lt;&lt; i) &amp; del) v = anc[v][i];    &#125;    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = lgn; i &gt;= <span class="hljs-number">0</span>; i--) &#123;        <span class="hljs-keyword">if</span>(anc[u][i] != anc[v][i]) &#123;            u = anc[u][i];            v = anc[v][i];        &#125;    &#125;    <span class="hljs-keyword">return</span> anc[u][<span class="hljs-number">0</span>];&#125;</code></pre><h5 id="st表"><a class="markdownIt-Anchor" href="#st表"></a> ST表</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500010</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> n, m, s, cnt = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>, cnt_ = <span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> last[N];    <span class="hljs-keyword">int</span> depth[N];<span class="hljs-comment">//深度 </span>    <span class="hljs-keyword">bool</span> vis[N];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><span class="hljs-function">    </span>&#123;        edge[++cnt].next = last[u];        edge[cnt].to = v;        last[u] = cnt;     &#125;   &#125; tree;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RMQ</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> F[N], dp[N][<span class="hljs-number">21</span>], eu[N];<span class="hljs-comment">// </span>&#125; rmq;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> tmp = ++num;    rmq.eu[++cnt_] = tmp;    rmq.F[tmp] = u;    tree.depth[u] = cnt_;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tree.last[u]; i; i = edge[i].next)    &#123;        <span class="hljs-keyword">int</span> v = edge[i].to;        <span class="hljs-keyword">if</span> (v == fa)            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">else</span>        &#123;            tree.vis[v] = <span class="hljs-number">1</span>;            dfs(v, u);            rmq.eu[++cnt_] = tmp;        &#125;     &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rmq_st</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        rmq.dp[i][<span class="hljs-number">0</span>] = rmq.eu[i];    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)    &#123;        <span class="hljs-keyword">int</span> k = n - (<span class="hljs-number">1</span> &lt;&lt; j) + <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)        &#123;            rmq.dp[i][j] = <span class="hljs-built_in">std</span>::min(rmq.dp[i][j - <span class="hljs-number">1</span>], rmq.dp[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rmq_find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> k = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * (r - l) + <span class="hljs-number">1</span>) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::min(rmq.dp[l][k] , rmq.dp[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (tree.depth[x] &gt; tree.depth[y])        <span class="hljs-built_in">std</span>::swap(x, y);    <span class="hljs-keyword">int</span> k = rmq_find(tree.depth[x], tree.depth[y]);    <span class="hljs-keyword">return</span> rmq.F[k];&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= n - <span class="hljs-number">1</span>; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        tree.add(x, y);        tree.add(y, x);    &#125;    dfs(s, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, lca(x, y));    &#125;   &#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    init();    rmq_st(cnt_);    query();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="树分治"><a class="markdownIt-Anchor" href="#树分治"></a> 树分治</h4><p>不会</p><h4 id="树链剖分"><a class="markdownIt-Anchor" href="#树链剖分"></a> 树链剖分</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">200010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch=getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x=ch^<span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch=getchar())) x=(((x&lt;&lt;<span class="hljs-number">2</span>)+x)&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m, r, p;<span class="hljs-keyword">int</span> a[maxn], b[maxn], size=<span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;e[maxn];<span class="hljs-keyword">int</span> head[maxn], cnt=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;e[++cnt]=(Edge)&#123;head[u],v&#125;;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;add(u,v);add(v,u);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent</span>&#123;</span>    <span class="hljs-keyword">int</span> l, r, sum, tags, sz;&#125;tr[maxn];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub_Tree</span>&#123;</span>    <span class="hljs-keyword">int</span> dep[maxn], fa[maxn], son[maxn], tot[maxn];    <span class="hljs-keyword">int</span> top[maxn], idx[maxn];    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> depth)</span></span>&#123;        dep[now]=depth;        fa[now]=f;        tot[now]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> maxson=<span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(to==f) <span class="hljs-keyword">continue</span>;            tot[now]+=dfs1(to,now,depth+<span class="hljs-number">1</span>);            <span class="hljs-keyword">if</span>(tot[to]&gt;maxson) maxson=tot[to], son[now]=to;        &#125;        <span class="hljs-keyword">return</span> tot[now];    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> top_node)</span></span>&#123;        idx[now]=++size;        a[size]=b[now];        top[now]=top_node;        <span class="hljs-keyword">if</span>(!son[now]) <span class="hljs-keyword">return</span>;        dfs2(son[now],top_node);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(!idx[to])                dfs2(to,to);        &#125;    &#125;&#125;sub;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent_Tree</span>&#123;</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson o&lt;&lt;1</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson o&lt;&lt;1|1</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;tr[o].sum=(tr[lson].sum+tr[rson].sum+p)%p;&#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;        <span class="hljs-keyword">if</span>(tr[o].tags)&#123;            tr[lson].tags=(tr[lson].tags+tr[o].tags)%p;            tr[rson].tags=(tr[rson].tags+tr[o].tags)%p;            tr[lson].sum=(tr[lson].sum+tr[lson].sz*tr[o].tags)%p;            tr[rson].sum=(tr[rson].sum+tr[rson].sz*tr[o].tags)%p;            tr[o].tags=<span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        tr[o].l=l,tr[o].r=r,tr[o].sz=r-l+<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l==r)&#123;            tr[o].sum=a[l];            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;        build(lson,l,mid); build(rson,mid+<span class="hljs-number">1</span>,r);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            tr[o].sum+=tr[o].sz*v;            tr[o].tags+=v;            <span class="hljs-keyword">return</span> ;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) update_add(lson,l,r,v);        <span class="hljs-keyword">if</span>(r&gt;mid) update_add(rson,l,r,v);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            <span class="hljs-keyword">return</span> tr[o].sum%p;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) ans=(ans+ask_sum(lson,l,r))%p;        <span class="hljs-keyword">if</span>(r&gt;mid) ans=(ans+ask_sum(rson,l,r))%p;        <span class="hljs-keyword">return</span> ans;     &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> lson</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> rson</span>&#125;seg;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Modify</span>&#123;</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x]))%p;            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y]))%p;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans%p);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_reg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            seg.update_add(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x],v);            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y],v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>,v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>)%p);    &#125;&#125;modify;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(head));    n=read(),m=read(),r=read(),p=read();    rep(i,<span class="hljs-number">1</span>,n) b[i]=read();    rep(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;        <span class="hljs-keyword">int</span> x=read(), y=read();        ins(x,y);    &#125;    sub.dfs1(r,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);    sub.dfs2(r,r);    seg.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);    rep(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt=read(),x,y,z;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            x=read(),y=read(),z=read()%p;            modify.modify_reg(x,y,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)&#123;            x=read(),y=read();            modify.query_sum(x,y);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">3</span>)&#123;            x=read(),z=read()%p;            modify.modify_sontree(x,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">4</span>)&#123;            x=read();            modify.query_sontree(x);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><h4 id="树状数组"><a class="markdownIt-Anchor" href="#树状数组"></a> 树状数组</h4><p>//真的不想写了…</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> tree[<span class="hljs-number">2000010</span>];<span class="hljs-keyword">int</span> a,b,c,d;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">return</span> x &amp; -x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-comment">//单点+</span>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;        tree[x] += k;        x += lowbit(x);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;        ans += tree[x];        x -= lowbit(x);    &#125;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;a;        add(i,a);       &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;b&gt;&gt;c&gt;&gt;d;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)&#123;            add(c,d);        &#125;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">cout</span>&lt;&lt;sum(d)-sum(c<span class="hljs-number">-1</span>)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpe(i,r,l) for(int i=r;i&gt;=l;--i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pts puts(<span class="hljs-meta-string">""</span>)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> node=<span class="hljs-number">500010</span>;<span class="hljs-keyword">int</span> tree[node], n, m, in[node];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &amp;-x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;<span class="hljs-keyword">while</span>(x&lt;=n)&#123;tree[x]+=v;x+=lowbit(x);&#125;&#125;<span class="hljs-comment">//区间+</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;ans+=tree[x];x-=lowbit(x);&#125;<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    rep(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">cin</span>&gt;&gt;in[i];    rep(i,<span class="hljs-number">1</span>,m)&#123;    <span class="hljs-keyword">int</span> t,x,y,z;    <span class="hljs-built_in">cin</span>&gt;&gt;t;    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;    add(x,z);    add(y+<span class="hljs-number">1</span>,-z);        &#125; <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cin</span>&gt;&gt;x;            <span class="hljs-built_in">cout</span>&lt;&lt;in[x]+query(x)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;&#125;</code></pre><h4 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h4><h5 id="简单的线段树"><a class="markdownIt-Anchor" href="#简单的线段树"></a> 简单的线段树</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">110000</span>;<span class="hljs-keyword">int</span> N, M, Q;LL sum[<span class="hljs-number">500000</span>], add[<span class="hljs-number">500000</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>; <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (ch&lt;<span class="hljs-string">'0'</span> || ch&gt;<span class="hljs-string">'9'</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>; ch = getchar(); &#125;<span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) X = (X &lt;&lt; <span class="hljs-number">3</span>) + (X &lt;&lt; <span class="hljs-number">1</span>) + ch - <span class="hljs-string">'0'</span>, ch = getchar();<span class="hljs-keyword">return</span> X * w;&#125;<span class="hljs-comment">//读入优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (x&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span> (x&gt;<span class="hljs-number">9</span>) write(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-comment">//输出优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;sum[p] = sum[p * <span class="hljs-number">2</span>] + sum[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];&#125;<span class="hljs-comment">//向上维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;add[root] = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (l == r)sum[root] = read();<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;build(<span class="hljs-number">2</span> * root, l, k);build(<span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);push_up(root);&#125;&#125;<span class="hljs-comment">//建树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (add[root])&#123;<span class="hljs-keyword">int</span> s1 = <span class="hljs-number">2</span> * root, s2 = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;add[s1] += add[root];add[s2] += add[root];sum[s1] += add[root] * (k - l + <span class="hljs-number">1</span>);sum[s2] += add[root] * (r - k);add[root] = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">//向下维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//访问区间 增加值 节点位置（或者用pos更好？） 原区间</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr)<span class="hljs-comment">//访问区间直接包含原区间</span>&#123;add[root] += c;sum[root] += c * (r - l + <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) update(nl, nr, c, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-comment">//左边</span><span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) update(nl, nr, c, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-comment">//右边</span>push_up(root);&#125;<span class="hljs-function">LL <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//原理与上方区间增加值一样</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr) <span class="hljs-comment">//同样，访问区间直接包含原区间，直接输出</span><span class="hljs-keyword">return</span> sum[root];pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;LL ans = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) ans += query(nl, nr, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) ans += query(nl, nr, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;N = read(), M = read();build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++)&#123;<span class="hljs-keyword">int</span> L, R, C;Q = read();<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">1</span>)&#123;L = read(), R = read(), C = read();update(L, R, C, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);&#125;<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">2</span>)&#123;L = read(), R = read();write(query(L, R, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N));<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);&#125;&#125;<span class="hljs-comment">//system("pause");</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> p;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">100007</span>];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> v, mul, add;&#125;node[<span class="hljs-number">400007</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(l==r)&#123;        node[root].v=a[l];    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;        bt(root*<span class="hljs-number">2</span>, l, m);        bt(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, r);        node[root].v=node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v;    &#125;    node[root].v%=p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;    node[root*<span class="hljs-number">2</span>].v=(node[root*<span class="hljs-number">2</span>].v*node[root].mul+node[root].add*(m-l+<span class="hljs-number">1</span>))%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v*node[root].mul+node[root].add*(r-m))%p;    node[root*<span class="hljs-number">2</span>].mul=(node[root*<span class="hljs-number">2</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>].add=(node[root*<span class="hljs-number">2</span>].add*node[root].mul+node[root].add)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add*node[root].mul+node[root].add)%p;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].v=(node[root].v*k)%p;        node[root].mul=(node[root].mul*k)%p;        node[root].add=(node[root].add*k)%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud1(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud1(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].add=(node[root].add+k)%p;        node[root].v=(node[root].v+k*(nodedr-nodedl+<span class="hljs-number">1</span>))%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud2(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud2(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        <span class="hljs-keyword">return</span> node[root].v;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    <span class="hljs-keyword">return</span> (query(root*<span class="hljs-number">2</span>, nodedl, m, l, r)+query(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r))%p;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n, m;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i]);    &#125;    bt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> chk;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;chk);        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k;        <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">1</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud1(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y));        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="标记永久化线段树"><a class="markdownIt-Anchor" href="#标记永久化线段树"></a> 标记永久化线段树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pos(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 201000</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> sum[N*<span class="hljs-number">4</span>],add[N*<span class="hljs-number">4</span>];<span class="hljs-keyword">int</span> a[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> rt)</span></span>&#123;    <span class="hljs-keyword">if</span>(l==r)&#123;        sum[rt]=a[l];<span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    build(l,mid,rt&lt;&lt;<span class="hljs-number">1</span>);    build(mid+<span class="hljs-number">1</span>,r,rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);    sum[rt]=sum[rt&lt;&lt;<span class="hljs-number">1</span>]+sum[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    sum[rt]+=v*(xr-xl+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(l==xl&amp;&amp;r==xr)&#123;        add[rt]+=v; <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid)  update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid)   update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,xl,xr);        <span class="hljs-keyword">else</span> update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,mid),update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> ad,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    <span class="hljs-keyword">if</span>(xl==l&amp;&amp;xr==r)&#123;        <span class="hljs-keyword">return</span> sum[rt]+ad*(xr-xl+<span class="hljs-number">1</span>);    &#125;      <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,xl,xr);        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,mid)+query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);    pos(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);    build(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);    pos(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;opt);        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;x,&amp;y);        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> k;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;k);            update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,k,x,y);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,n,x,y));    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//转载自Hallmeow</span></code></pre><h4 id="可持续化线段树"><a class="markdownIt-Anchor" href="#可持续化线段树"></a> 可持续化线段树</h4><p>不会</p><h4 id="动态加点线段树"><a class="markdownIt-Anchor" href="#动态加点线段树"></a> 动态加点线段树</h4><pre><code class="hljs cpp"><span class="hljs-comment">//CF915E Physical Education Lessons</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rr register</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">500007</span> * <span class="hljs-number">30</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    rr <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;    rr <span class="hljs-keyword">char</span> ch = getchar();    <span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) &#123;<span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>; ch = getchar();&#125;    <span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) &#123;x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>); ch = getchar();&#125;    <span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-keyword">int</span> n, q;<span class="hljs-keyword">int</span> sum[maxn], tags[maxn], rs[maxn], ls[maxn], id = <span class="hljs-number">0</span>, rt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span>(tags[o] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(l != r) &#123;        <span class="hljs-keyword">if</span>(!ls[o]) ls[o] = ++id;        <span class="hljs-keyword">if</span>(!rs[o]) rs[o] = ++id;        sum[ls[o]] = tags[o] * (mid - l + <span class="hljs-number">1</span>);        sum[rs[o]] = tags[o] * (r - mid);         tags[ls[o]] = tags[o];        tags[rs[o]] = tags[o];    &#125;    tags[o] = <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;o, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(!o) o = ++id;    <span class="hljs-keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;        sum[o] = v * (r - l + <span class="hljs-number">1</span>);        tags[o] = v;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(o, l, r);    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(ql &lt;= mid) update(ls[o], ql, qr, l, mid, v);    <span class="hljs-keyword">if</span>(qr &gt; mid) update(rs[o], ql, qr, mid + <span class="hljs-number">1</span>, r, v);    sum[o] = sum[ls[o]] + sum[rs[o]];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">memset</span>(tags, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(tags));    n = read(), q = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;        <span class="hljs-keyword">int</span> l = read(), r = read(), k = read();        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);        <span class="hljs-keyword">else</span> update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, n - sum[<span class="hljs-number">1</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="左偏树"><a class="markdownIt-Anchor" href="#左偏树"></a> 左偏树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> max_ = <span class="hljs-number">100010</span>;<span class="hljs-keyword">int</span> n, m;<span class="hljs-keyword">int</span> ch[max_][<span class="hljs-number">2</span>];<span class="hljs-comment">//表示当前节点儿子的编号</span><span class="hljs-keyword">int</span> a[max_], dis[max_]<span class="hljs-comment">/*树上距离*/</span>, f[max_]<span class="hljs-comment">/*父亲节点编号*/</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!x||!y) <span class="hljs-keyword">return</span> x|y;    <span class="hljs-keyword">if</span>(a[x]&gt;a[y]||(a[x]==a[y]&amp;&amp;x&gt;y)) swap(x,y);<span class="hljs-comment">//小根堆</span>    ch[x][<span class="hljs-number">1</span>]=merge(ch[x][<span class="hljs-number">1</span>],y);    f[ch[x][<span class="hljs-number">1</span>]]=x;    <span class="hljs-keyword">if</span>(dis[ch[x][<span class="hljs-number">0</span>]]&lt;dis[ch[x][<span class="hljs-number">1</span>]]) swap(ch[x][<span class="hljs-number">0</span>], ch[x][<span class="hljs-number">1</span>]);<span class="hljs-comment">//左偏树</span>    dis[x]=dis[ch[x][<span class="hljs-number">1</span>]]+<span class="hljs-number">1</span>;<span class="hljs-comment">//左偏树的距离</span>    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">while</span>(f[x]<span class="hljs-comment">/*仍然存在父亲节点*/</span>) x=f[x];    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    a[x]=<span class="hljs-number">-1</span>;    f[ch[x][<span class="hljs-number">0</span>]]=f[ch[x][<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span>;    merge(ch[x][<span class="hljs-number">0</span>],ch[x][<span class="hljs-number">1</span>]);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);    dis[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-keyword">int</span> k;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;k);        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> x, y;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;x, &amp;y);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>||a[y]==<span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">continue</span>;            merge(getfa(x),getfa(y));        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">int</span> now=getfa(x);                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, a[now]);                del(now);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="不知道什么东西"><a class="markdownIt-Anchor" href="#不知道什么东西"></a> 不知道什么东西</h3><pre><code class="hljs cpp"><span class="hljs-comment">//hdu2089 数位DP入门题</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10001</span>;<span class="hljs-keyword">int</span> a[maxn];<span class="hljs-keyword">int</span> dp[maxn][<span class="hljs-number">2</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">bool</span> limit)</span> </span>&#123;<span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sta] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dp[pos][sta];<span class="hljs-keyword">int</span> up = limit ? a[pos] : <span class="hljs-number">9</span>;<span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; ++i) &#123;<span class="hljs-keyword">if</span>(pre == <span class="hljs-number">6</span> &amp;&amp; i == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-keyword">if</span>(i == <span class="hljs-number">4</span>) <span class="hljs-keyword">continue</span>;res += dfs(pos - <span class="hljs-number">1</span>, i, i == <span class="hljs-number">6</span>, limit &amp;&amp; i == a[pos]);&#125;<span class="hljs-keyword">if</span>(!limit) dp[pos][sta] = res;<span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x) &#123;a[pos++] = x % <span class="hljs-number">10</span>;x /= <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">return</span> dfs(pos - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">int</span> l, r;<span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;l, &amp;r)) &#123;<span class="hljs-keyword">if</span>(!l &amp;&amp; !r) <span class="hljs-keyword">break</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, solve(r) - solve(l - <span class="hljs-number">1</span>));&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>高精度&lt;重载运算符&gt;</p><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">410</span>;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BigNum</span>  </span><span class="hljs-class">&#123;</span>      <span class="hljs-keyword">int</span> len, s[MAXN];      BigNum ()      &#123;          <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));          len = <span class="hljs-number">1</span>;      &#125;      BigNum (<span class="hljs-keyword">int</span> num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> num)      &#123;          <span class="hljs-keyword">char</span> s[MAXN];          <span class="hljs-built_in">sprintf</span>(s, <span class="hljs-string">"%d"</span>, num);          *<span class="hljs-keyword">this</span> = s;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num)      &#123;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; num[i] == <span class="hljs-string">'0'</span>; num++) ;  <span class="hljs-comment">//去前导0  </span>        len = <span class="hljs-built_in">strlen</span>(num);          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) s[i] = num[len-i<span class="hljs-number">-1</span>] - <span class="hljs-string">'0'</span>;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-keyword">const</span> <span class="hljs-comment">//+  </span>    &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; g || i &lt; max(len, b.len); i++)          &#123;              <span class="hljs-keyword">int</span> x = g;              <span class="hljs-keyword">if</span>(i &lt; len) x += s[i];              <span class="hljs-keyword">if</span>(i &lt; b.len) x += b.s[i];              c.s[c.len++] = x % <span class="hljs-number">10</span>;              g = x / <span class="hljs-number">10</span>;          &#125;          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> + b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-keyword">while</span>(len &gt; <span class="hljs-number">1</span> &amp;&amp; !s[len<span class="hljs-number">-1</span>]) len--;      &#125;      BigNum <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-comment">//*  </span>    &#123;          BigNum c;          c.len = len + b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; b.len; j++)              &#123;                  c.s[i+j] += s[i] * b.s[j];              &#125;          &#125;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c.len; i++)          &#123;              c.s[i+<span class="hljs-number">1</span>] += c.s[i]/<span class="hljs-number">10</span>;              c.s[i] %= <span class="hljs-number">10</span>;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> *= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> * b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">int</span> x = s[i] - g;              <span class="hljs-keyword">if</span>(i &lt; b.len) x -= b.s[i];              <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>) g = <span class="hljs-number">0</span>;              <span class="hljs-keyword">else</span>              &#123;                  g = <span class="hljs-number">1</span>;                  x += <span class="hljs-number">10</span>;              &#125;              c.s[c.len++] = x;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> -= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> - b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c, f = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              f = f*<span class="hljs-number">10</span>;              f.s[<span class="hljs-number">0</span>] = s[i];              <span class="hljs-keyword">while</span>(f &gt;= b)              &#123;                  f -= b;                  c.s[i]++;              &#125;          &#125;          c.len = len;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> /= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span>  = *<span class="hljs-keyword">this</span> / b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> % (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum r = *<span class="hljs-keyword">this</span> / b;          r = *<span class="hljs-keyword">this</span> - r*b;          <span class="hljs-keyword">return</span> r;      &#125;      BigNum <span class="hljs-keyword">operator</span> %= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> % b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &lt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &lt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &gt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &gt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &gt; b) &amp;&amp; !(*<span class="hljs-keyword">this</span> &lt; b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &lt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &gt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">str</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-built_in">string</span> res = <span class="hljs-string">""</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) res = <span class="hljs-keyword">char</span>(s[i]+<span class="hljs-string">'0'</span>) + res;          <span class="hljs-keyword">return</span> res;      &#125;  &#125;;  istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream &amp;in, BigNum &amp;x)  &#123;      <span class="hljs-built_in">string</span> s;      in &gt;&gt; s;      x = s.c_str();      <span class="hljs-keyword">return</span> in;  &#125;  ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="hljs-keyword">const</span> BigNum &amp;x)  &#123;      out &lt;&lt; x.str();      <span class="hljs-keyword">return</span> out;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
