<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021年1月追番笔记</title>
      <link href="/2020/12/19/2021%E5%B9%B41%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/12/19/2021%E5%B9%B41%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2021年的1月感觉看得有点多…可能是因为续作都积压在1月播出了吧…</p><h3 id="ウマ娘-プリティーダービー-season-2"><a class="markdownIt-Anchor" href="#ウマ娘-プリティーダービー-season-2"></a> ウマ娘 プリティーダービー Season 2</h3><p><img src="https://lain.bgm.tv/pic/cover/l/1c/6b/315574_yZh99.jpg" srcset="/img/loading.gif" alt="" /></p><p>那么问题来了，手游什么时候出？</p><h3 id="reゼロから始める異世界生活-2nd-season-後半クール"><a class="markdownIt-Anchor" href="#reゼロから始める異世界生活-2nd-season-後半クール"></a> Re:ゼロから始める異世界生活 2nd season 後半クール</h3><p><img src="https://lain.bgm.tv/pic/cover/l/aa/64/316247_a6jUR.jpg" srcset="/img/loading.gif" alt="" /></p><p>也就看着玩玩，异世界大头还得看无职转生。</p><h3 id="ex-arm-エクスアーム"><a class="markdownIt-Anchor" href="#ex-arm-エクスアーム"></a> EX-ARM エクスアーム</h3><p><img src="https://lain.bgm.tv/pic/cover/l/18/80/269565_5W5I1.jpg" srcset="/img/loading.gif" alt="" /></p><p>看女主人设还不错，比较戳XP</p><h3 id="裏世界ピクニック"><a class="markdownIt-Anchor" href="#裏世界ピクニック"></a> 裏世界ピクニック</h3><p><img src="https://lain.bgm.tv/pic/cover/l/e6/f6/301601_28ozr.jpg" srcset="/img/loading.gif" alt="" /></p><p>佐藤卓哉，永远滴百合头子！</p><p>原作水准不错，比较看好。</p><h3 id="無職転生-~異世界行ったら本気だす~"><a class="markdownIt-Anchor" href="#無職転生-~異世界行ったら本気だす~"></a> 無職転生 ～異世界行ったら本気だす～</h3><p><img src="https://lain.bgm.tv/pic/cover/l/8b/00/277554_tG28z.jpg" srcset="/img/loading.gif" alt="" /></p><p>“异世界，你们的祖宗来了”</p><p>早前放出的PV质量相当好，期待正片。</p><h3 id="転生したらスライムだった件-第2期"><a class="markdownIt-Anchor" href="#転生したらスライムだった件-第2期"></a> 転生したらスライムだった件 第2期</h3><p><img src="https://lain.bgm.tv/pic/cover/l/e6/78/278031_2B2g7.jpg" srcset="/img/loading.gif" alt="" /></p><p>看着玩玩，放松一下。</p><h3 id="ホリミヤ"><a class="markdownIt-Anchor" href="#ホリミヤ"></a> ホリミヤ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/23/a2/315069_49P26.jpg" srcset="/img/loading.gif" alt="" /></p><p>堀与宫村…其实还挺不想看的，当年能火是因为人设新潮时髦吧…在现在看来原作其实也就是一个普通的恋爱题材的少女漫画。</p><h3 id="怪物事変"><a class="markdownIt-Anchor" href="#怪物事変"></a> 怪物事変</h3><p><img src="https://lain.bgm.tv/pic/cover/l/6d/7c/296941_j4dd2.jpg" srcset="/img/loading.gif" alt="" /></p><p>听群友说是小鬼灭，那我是不是就不用补鬼灭了（</p><h3 id="天空侵犯"><a class="markdownIt-Anchor" href="#天空侵犯"></a> 天空侵犯</h3><p><img src="https://lain.bgm.tv/pic/cover/l/15/1d/317693_3W2J6.jpg" srcset="/img/loading.gif" alt="" /></p><p>网飞的片，听说原作的质量还行。</p><p>其实有奶子和大腿就行（</p><h3 id="ワンダーエッグプライオリティ"><a class="markdownIt-Anchor" href="#ワンダーエッグプライオリティ"></a> ワンダーエッグ・プライオリティ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/dd/60/316607_Qukn6.jpg" srcset="/img/loading.gif" alt="" /></p><p>CW的原创片，可以期待。</p><h3 id="のんのんびより-のんすとっぷ"><a class="markdownIt-Anchor" href="#のんのんびより-のんすとっぷ"></a> のんのんびより のんすとっぷ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/ac/b7/282684_0B301.jpg" srcset="/img/loading.gif" alt="" /></p><p>无需多言</p><h3 id="ゆるキャン-season-2"><a class="markdownIt-Anchor" href="#ゆるキャン-season-2"></a> ゆるキャン△ SEASON 2</h3><p><img src="https://lain.bgm.tv/pic/cover/l/0f/50/262897_Lfm1T.jpg" srcset="/img/loading.gif" alt="" /></p><p>拯救业界！阿宅圣经！让无数蹲家阿宅有了出门露营的指导动画！尚方宝剑！</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12月漫画记录</title>
      <link href="/2020/12/10/12%E6%9C%88%E6%BC%AB%E7%94%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/12/10/12%E6%9C%88%E6%BC%AB%E7%94%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="青い花"><a class="markdownIt-Anchor" href="#青い花"></a> 青い花</h2><p><img src="https://lain.bgm.tv/pic/cover/l/04/8e/5668_Aktu0.jpg" srcset="/img/loading.gif" alt="" /></p><p>志村贵子老师永远的神！</p><p>很难说出这种感觉：认识到自己的感情，从朋友到恋人，要经历什么？</p><p>从友情的理所应当，到爱情的不安，确实是那种如果换成女性视角的能够理解的“不能理解”的不安——我为什么会喜欢上她，她喜欢我吗，如果打破友谊会怎么样，我会一直喜欢她吗…志村贵子老师在发掘少女的内面性的功力很高，描写这些少女内心的情感和人物之间的联系隐秘，却不会不自然，用剧本中的人物和漫画现实中的人物对应，更加体现出人物的性格。</p><h2 id="おとなになっても"><a class="markdownIt-Anchor" href="#おとなになっても"></a> おとなになっても</h2><p><img src="https://lain.bgm.tv/pic/cover/l/a3/29/279028_h8LkN.jpg" srcset="/img/loading.gif" alt="" /></p><p>正在看，志村贵子老师画风还是这么稳定。</p><h2 id="lv1魔王とワンルーム勇者"><a class="markdownIt-Anchor" href="#lv1魔王とワンルーム勇者"></a> Lv1魔王とワンルーム勇者</h2><p><img src="https://lain.bgm.tv/pic/cover/l/be/dc/313133_36nc4.jpg" srcset="/img/loading.gif" alt="" /></p><p>战斗场面的分镜和人物画的有点像鸟山明的风格。特点是人物的腿画的比较粗，不过JK形态的魔王相当色啊！</p><p>果然还是圆脸适合轻松的题材！我果然无法拒绝圆脸.jpg</p><h2 id="魔都精兵のスレイブ"><a class="markdownIt-Anchor" href="#魔都精兵のスレイブ"></a> 魔都精兵のスレイブ</h2><p><img src="https://lain.bgm.tv/pic/cover/l/8b/bf/271005_P1j2c.jpg" srcset="/img/loading.gif" alt="" /></p><p>色！剧情传统后宫，世界观不错，很期待新的一话。</p><h2 id="葬送のフリーレン"><a class="markdownIt-Anchor" href="#葬送のフリーレン"></a> 葬送のフリーレン</h2><p><img src="https://lain.bgm.tv/pic/cover/l/a1/bd/305429_axzF3.jpg" srcset="/img/loading.gif" alt="" /></p><p>2021年《漫厉》第二！相当不错的成绩了。</p><p>即便是在周刊上连载，依旧能高质量的水准输出作画和剧情，期待未来的动画化。</p><h2 id="area51"><a class="markdownIt-Anchor" href="#area51"></a> AREA51</h2><p><img src="https://lain.bgm.tv/pic/cover/l/36/c6/236135_ny5zO.jpg" srcset="/img/loading.gif" alt="" /></p><p>刚开始看，阴影有点美漫的感觉。</p><h2 id="徒然日和"><a class="markdownIt-Anchor" href="#徒然日和"></a> 徒然日和</h2><p><img src="https://lain.bgm.tv/pic/cover/l/d2/4b/239664_Ep0DL.jpg" srcset="/img/loading.gif" alt="" /></p><p>早就看了，但是一直没看完，只有三卷，应该很快就能看完，看完再写写感想吧。</p><h2 id="少年のアビス"><a class="markdownIt-Anchor" href="#少年のアビス"></a> 少年のアビス</h2><p><img src="https://lain.bgm.tv/pic/cover/l/e8/6a/300431_5i10A.jpg" srcset="/img/loading.gif" alt="" /></p><p>黑泥，全是黑泥。</p><h2 id="麻衣の虫ぐらし"><a class="markdownIt-Anchor" href="#麻衣の虫ぐらし"></a> 麻衣の虫ぐらし</h2><p><img src="https://lain.bgm.tv/pic/cover/l/22/e6/228643_P0IWa.jpg" srcset="/img/loading.gif" alt="" /></p><p>正在看。</p><h2 id="明日ちゃんのセーラー服"><a class="markdownIt-Anchor" href="#明日ちゃんのセーラー服"></a> 明日ちゃんのセーラー服</h2><p><img src="https://lain.bgm.tv/pic/cover/l/e5/e0/193081_Hs2XH.jpg" srcset="/img/loading.gif" alt="" /></p><p>博老师对少女的神态、形体、姿态的刻画简直出神入化了。</p><p>但是正是因为作画太细致了，给我的感觉就是剧情成了短板，并且让我这种盯着一页看好久的这种作画看着太累了，反而观看体验下降了一点。</p><h2 id="薬屋のひとりごと"><a class="markdownIt-Anchor" href="#薬屋のひとりごと"></a> 薬屋のひとりごと</h2><p><img src="https://lain.bgm.tv/pic/cover/l/45/80/217552_31zsp.jpg" srcset="/img/loading.gif" alt="" /></p><p>猫猫！</p><p>好看的，日本那边也很火。</p><h2 id="かしまし-ガールミーツガール"><a class="markdownIt-Anchor" href="#かしまし-ガールミーツガール"></a> かしまし 〜ガール・ミーツ・ガール〜</h2><p><img src="https://lain.bgm.tv/pic/cover/l/44/b3/61442_5TI53.jpg" srcset="/img/loading.gif" alt="" /></p><p>来看名作了。</p><h2 id="たーたん"><a class="markdownIt-Anchor" href="#たーたん"></a> たーたん</h2><p><img src="https://lain.bgm.tv/pic/cover/l/7f/61/320298_W8EO8.jpg" srcset="/img/loading.gif" alt="" /></p><p>大龄处男照顾去世朋友的女儿的故事。</p><p>但是只汉化了6话，原作已经出了4本单行本了，得开始自己找生肉看了…</p>]]></content>
      
      
      <categories>
          
          <category> 漫画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漫画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录11月购物</title>
      <link href="/2020/12/09/%E8%AE%B0%E5%BD%9511%E6%9C%88%E8%B4%AD%E7%89%A9/"/>
      <url>/2020/12/09/%E8%AE%B0%E5%BD%9511%E6%9C%88%E8%B4%AD%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<p>上个月经历了三天恰馍馍，饿死我了，原因就是买了不少东西，再此记录一下买了些啥…</p><h4 id="denon-mm440"><a class="markdownIt-Anchor" href="#denon-mm440"></a> Denon MM440</h4><p><img src="https://i.loli.net/2020/12/10/TSH5go6BXIECJyP.jpg" srcset="/img/loading.gif" alt="PXL_20201210_055626456.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/83UoMrcx7DzjAXN.jpg" srcset="/img/loading.gif" alt="PXL_20201210_055638241.jpg" /></p><p>低频比较多，解析中等水平，人声靠前，戴着稍微有点重，有点不舒服，不过是用来替代开放式在图书馆用的，还行吧。</p><p>第一次用木制外壳的，这种便携果然还是有点重…</p><h4 id="pilot-custom-74"><a class="markdownIt-Anchor" href="#pilot-custom-74"></a> Pilot Custom 74</h4><p><img src="https://i.loli.net/2020/12/10/FDXKblanVPuoMSA.jpg" srcset="/img/loading.gif" alt="PXL_20201205_092124004.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/GpoZzLVqrX1YPlD.jpg" srcset="/img/loading.gif" alt="PXL_20201205_092232476.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/QXTagJ6BDiYmk5H.jpg" srcset="/img/loading.gif" alt="PXL_20201205_092320154.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/BN3bZweJuDKX1Pn.jpg" srcset="/img/loading.gif" alt="IMG_20201205_172536.jpg" /></p><p><img src="https://i.loli.net/2020/12/09/YOG13F6ackxQzSW.jpg" srcset="/img/loading.gif" alt="IMG_20201205_172520.jpg" /></p><p>写感还不错吧，以前用过犀飞利的潜艇，不过那个笔实在有点小，相比较来说百乐74就好了很多，重量适中，缺点就是飞白有点多…感觉可能还不如英雄100。我买的是示范的蓝色，我觉得还挺好看的（</p><h4 id="水果刀xd"><a class="markdownIt-Anchor" href="#水果刀xd"></a> 水果刀XD</h4><p><img src="https://i.loli.net/2020/12/10/PlySw4YvJtuWHis.jpg" srcset="/img/loading.gif" alt="PXL_20201210_054936841.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/9Qwsz4tXJNRVuGy.jpg" srcset="/img/loading.gif" alt="PXL_20201210_055014235.jpg" /></p><p><img src="https://i.loli.net/2020/12/10/Z4BdtqLkM3unVYi.jpg" srcset="/img/loading.gif" alt="PXL_20201210_055049232.jpg" /></p><p>长相不错，40块钱，开快递恰水果很棒（</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月追番笔记</title>
      <link href="/2020/10/04/2020%E5%B9%B410%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/10/04/2020%E5%B9%B410%E6%9C%88%E8%BF%BD%E7%95%AA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="burn-the-witch"><a class="markdownIt-Anchor" href="#burn-the-witch"></a> <a href="https://www.agefans.tv/detail/20200161" target="_blank" rel="noopener">Burn The Witch</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/302293_i4b5e.jpg" srcset="/img/loading.gif" alt="" /></p><p>98，永远滴时髦超人！</p><h3 id="魔女の旅々"><a class="markdownIt-Anchor" href="#魔女の旅々"></a> <a href="https://www.agefans.tv/detail/20200014" target="_blank" rel="noopener">魔女の旅々</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/292970_kAjPt.jpg" srcset="/img/loading.gif" alt="" /></p><p>屑魔女可爱，百合贴贴，剧情丐版意林故事。</p><p>12/04：上次忘记记录了，到目前为止唯一一个能算得上比较黑的故事，巴哈姆特那边也从15+升到了18+，但怎么说吧，故事还是老套的故事，没有什么期待的心情。</p><p>12/19：最终话记录。12话还稍微有意思点，但整部作品来说其实是相当的无聊，作画说不上出彩，不过还算稳定，伊雷娜的形象塑造是本片唯一能够拿出来说的，作为公路片来说剧情倒是成为了最次的一项，其次能为本片加分的就是百合吧，其实也是很普通的嗯加进去的百合贴贴，没有什么意思。</p><h3 id="呪術廻戦"><a class="markdownIt-Anchor" href="#呪術廻戦"></a> <a href="https://www.agefans.tv/detail/20200096" target="_blank" rel="noopener">呪術廻戦</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/294993_O4GCS.jpg" srcset="/img/loading.gif" alt="" /></p><p>ED好猛，kksk</p><h3 id="アサルトリリィ-bouquet"><a class="markdownIt-Anchor" href="#アサルトリリィ-bouquet"></a> <a href="https://www.agefans.tv/detail/20200007" target="_blank" rel="noopener">アサルトリリィ BOUQUET</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/292712_pACzh.jpg" srcset="/img/loading.gif" alt="" /></p><p>😅</p><p>12/04：这就是新时代的三集定律吗？三倍数集的脚本怪，演出敷衍，部分战斗的作画还行，沙发套你们做完都不自己看看吗（</p><p>12/19：世界观展开不明，作画好，肉腿多，奶子大。</p><h3 id="神様になった日"><a class="markdownIt-Anchor" href="#神様になった日"></a> <a href="https://www.agefans.tv/detail/20200227" target="_blank" rel="noopener">神様になった日</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/306429_70e04.jpg" srcset="/img/loading.gif" alt="" /></p><p>10/04：第几集打棒球？</p><p>成了，第一集就打棒球</p><p>11/22：越来越拉胯了，到此为止的剧情都是很容易就能想到的。而催泪回因为只有一集，人物情绪转变太快，手法古老且没用，功力甚至不如以前。各种剧情不明所以，不过进行的活动的内容都是能以某种介质保留下来的，可能在末日那天会作为关键道具（？），等待一波怒涛展开。</p><p>12/19：这就是能让所有人都感动的动画？</p><h3 id="ラブライブ虹ヶ咲学園スクールアイドル同好会"><a class="markdownIt-Anchor" href="#ラブライブ虹ヶ咲学園スクールアイドル同好会"></a> ラブライブ！虹ヶ咲学園スクールアイドル同好会</h3><p><img src="https://lain.bgm.tv/pic/cover/l/a7/35/296659_o709D.jpg" srcset="/img/loading.gif" alt="" /></p><p>每集的SOLO Live很棒，2020年的扭曲作。</p><h3 id="体操ザムライ"><a class="markdownIt-Anchor" href="#体操ザムライ"></a> 体操ザムライ</h3><p><img src="https://lain.bgm.tv/pic/cover/l/bf/2a/312979_2p9Ln.jpg" srcset="/img/loading.gif" alt="" /></p><p>听说是算是东京奥运会献礼作，而且制作不错，先看着吧。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>姜子牙 | 高技术下的空虚剧本</title>
      <link href="/2020/10/03/%E5%A7%9C%E5%AD%90%E7%89%99-%E9%AB%98%E6%8A%80%E6%9C%AF%E4%B8%8B%E7%9A%84%E7%A9%BA%E8%99%9A%E5%89%A7%E6%9C%AC/"/>
      <url>/2020/10/03/%E5%A7%9C%E5%AD%90%E7%89%99-%E9%AB%98%E6%8A%80%E6%9C%AF%E4%B8%8B%E7%9A%84%E7%A9%BA%E8%99%9A%E5%89%A7%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/291286_qGcCX.jpg" srcset="/img/loading.gif" alt="" /></p><p>自从出院之后就基本没有出过门，第一次出门活动可能就是看《姜子牙》了吧…</p><p>一句话简评就是：前两分钟非常好，后面整体都一般，剧本真该请美术吃饭。</p><p>单从技术来看，我认为已经达到很好的水平了，对比皮克斯来看我也认为不差。前有《罗小黑战记》打出国产2D动画的高峰，现在《姜子牙》在3D动画中也能占有一地。</p><p>然而对于观众来说，技术好、演出好是视觉上的极致体验，但假如「剧本」不能与其技术的高度相应，那么即便是最好的技术去做动画，带给观众的体验就会大打折扣，《姜子牙》便是这样的动画。</p><p>我查了《姜子牙》的担任剧本的人，之前有担任过两部小作品的剧本，《姜子牙》作为他的出道作来说也不为过，但它质量却不尽人意。</p><p>在观影过程中，可以直接感受到剧本想要表达的东西：生死、反抗权力、拯救。其中对于生死的完成度比较高，对生死的认识、对死去亡魂的敬重也是推进剧情、人物关系的核心力量。但是反抗和拯救苍生两点却自我逻辑混乱，无法让人满意，同时缺少一场真正的大战，也是很多人说剧情平淡的原因，至于为什么缺少，懂得都懂。</p><p>只说拯救苍生，从「舍一人而救苍生」，用强行绑锁来证明「斩善即为拯救苍生，不斩一善不为神」的伪善，不说剧本在这里想暗地表达什么，即使是这样去描述一个正面包装下的恶人，我也认为只是让剧情强行推动的要素罢了。最后到「拯救眼前的每一个人」，说的好听，后面的剧情却没有任何行为能证明这句话。为了救小九，四不相死去，失去修为的申公豹差点死掉，狐妖把自己怼爆了，自己爆种踏破天梯被关进监狱，小九也被师尊消灭，到最后，牺牲了身边的所有人，换来了人间的“和平”。</p><p>我不明白剧本是想告诉我去打破所谓“皇上至上”的伪善，还是想告诉我：无论如何，现实是不会如意的。我想应该是后者。</p><p>结尾是用一发机械降神结束的，师祖惩罚了师尊，但没有说怎样惩罚的，姜子牙被关进监狱成为人间传说，这样的人物形象前后对比很常见，却不好，根本无法感觉的真情实意。或者说这样的对比就是剧本想要表达的人间的虚情，那么《姜子牙》这部作品就是剧本想要尝试去做反抗权力最后失败告终的失败作，层层包装下的失败反抗，不应该做成电影，因为篇幅太小，人物形象平面、逻辑混乱、配角工具人化，发挥出来就是给人平淡的感觉，没有波澜，如果能做成连载动画，我想会更好。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式初探</title>
      <link href="/2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>正则表达式就是一种规定类型的字符串，可以用正则表达式筛选出符合条件的字符串进行后续操作</p><h3 id="基础字符"><a class="markdownIt-Anchor" href="#基础字符"></a> 基础字符</h3><table><thead><tr><th>元字符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符的所有的字符</td></tr><tr><td>\d</td><td>匹配0-9数字(digit)</td></tr><tr><td>\D</td><td>匹配非0-9数字(not digit)</td></tr><tr><td>\w</td><td>匹配大小写字母、0-9数字、_(word character)</td></tr><tr><td>\W</td><td>匹配非大小写字母、0-9数字、_(not a word character)</td></tr><tr><td>\s</td><td>匹配空白符(whitespace)</td></tr><tr><td>\S</td><td>匹配非空白符(not whitespace)</td></tr><tr><td>\b</td><td>匹配单词的开始的字符（word boundary)</td></tr><tr><td>\B</td><td>匹配非单词的开始的字符(not a word boundary)</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>比如对应一串数字<code>1035154062</code></p><p>其正则表达式即<code>^\d\d\d\d\d\d\d\d\d\d$</code></p><h3 id="重复"><a class="markdownIt-Anchor" href="#重复"></a> 重复</h3><p>但这样写实在太长了，所以出现了记录重复的记号</p><table><thead><tr><th>重复记号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p>那么对于上面的数字<code>1035154062</code>，正则表达式即<code>\d{10}</code></p><h3 id="转义"><a class="markdownIt-Anchor" href="#转义"></a> 转义</h3><p>对于一些是内容的字符与正则表达式的语法冲突时，在字符前加<code>\</code>可以转换成内容</p><p>比如内容为<code>(Hello World)</code></p><p>正则表达式则为<code>\(Hello Wolrd\)</code></p><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组</h3><p>用<code>()</code>可以包含进整体的内容，并且记录组别</p><p>比如对于一组网址</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//aimip02.cn</span><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.baidu.com</span><span class="hljs-symbol">http:</span><span class="hljs-comment">//bgm.tv</span><span class="hljs-symbol">https:</span><span class="hljs-comment">//luogu.org</span></code></pre><p>写出其正则表达式<code>https?://(www\.)?(\w+)(\.\w+)</code>，每一个括号即一组，下标从1开始，每一组用<code>$1 $2 $3</code>表示</p><p>即</p><pre><code class="hljs routeros">Group 1: Group 1: www.Group 1: Group 1:Group 2: aimip02Group 2: baiduGroup 2: bgmGroup 2: luoguGroup 3: .cnGroup 3: .comGroup 3: .tvGroup 3: .org</code></pre><h3 id="区间"><a class="markdownIt-Anchor" href="#区间"></a> 区间</h3><p>用<code>[]</code>可以规定出区间和单个符合条件，<code>[^ ]</code>即条件补集</p><p>比如对于</p><pre><code class="hljs angelscript"><span class="hljs-number">123</span><span class="hljs-number">-456</span><span class="hljs-number">-789</span><span class="hljs-number">987.654</span><span class="hljs-number">.321</span></code></pre><p>用正则表达式选出来，即<code>\d+[.-]\d+[.-]\d{3}</code></p><p>或者是<code>[0-9]+[.-][0-9]+[.-][0-9]{3}</code></p><h3 id="或"><a class="markdownIt-Anchor" href="#或"></a> 或</h3><p>即<code>|</code></p><p>比如对于一组人名</p><pre><code class="hljs armasm"><span class="hljs-symbol">Mr.</span> <span class="hljs-keyword">Smith</span><span class="hljs-keyword">Mrs </span>Y<span class="hljs-symbol">Mr</span> Spike<span class="hljs-symbol">Ms.</span> Faye</code></pre><p>其中有的有点，有的没有，有的是Mrs，有的是Mr，用正则表达式全部概括即<code>M(r|s|rs)\.?\s[A-Z]\w*</code></p><h3 id="零宽断言"><a class="markdownIt-Anchor" href="#零宽断言"></a> 零宽断言</h3><h4 id="正向先行断言匹配目标字符串前的内容"><a class="markdownIt-Anchor" href="#正向先行断言匹配目标字符串前的内容"></a> 正向先行断言:匹配目标字符串前的内容</h4><p>即<code>?=target</code></p><p>比如查询阅读量返回数字</p><p><code>&quot;&lt;span class=&quot;read-count&quot;&gt;阅读量：114514&lt;/span&gt;&quot;</code></p><p>正则表达式为<code>\d+(?=&lt;/span&gt;)</code>，输出<code>114514</code></p><h4 id="正向先行断言匹配目标字符串后的内容"><a class="markdownIt-Anchor" href="#正向先行断言匹配目标字符串后的内容"></a> 正向先行断言:匹配目标字符串后的内容</h4><p>即<code>?&lt;=target</code></p><p>比如查询阅读量返回数字</p><p><code>&quot;&lt;span class=&quot;read-count&quot;&gt;阅读量：1919810&lt;/span&gt;&quot;</code></p><p>即<code>(?&lt;=&lt;span class=&quot;read-count&quot;&gt;阅读量：)\d+</code>，输出<code>1919810</code></p><h4 id="负向先行断言"><a class="markdownIt-Anchor" href="#负向先行断言"></a> 负向先行断言</h4><p>即<code>?!target</code></p><h4 id="负向后行断言"><a class="markdownIt-Anchor" href="#负向后行断言"></a> 负向后行断言</h4><p>即<code>?&lt;!target</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>とある飛空士への追憶 | 二次元的罗马假日</title>
      <link href="/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/"/>
      <url>/2020/09/21/%E3%81%A8%E3%81%82%E3%82%8B%E9%A3%9B%E7%A9%BA%E5%A3%AB%E3%81%B8%E3%81%AE%E8%BF%BD%E6%86%B6-%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84%E7%BD%97%E9%A9%AC%E5%81%87%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/10829_JJ2DE.jpg" srcset="/img/loading.gif" alt="" /></p><p>以前在高中的时候就被别人推荐过这本小说，但是时间太少就没有看，这次住院的时候没事干就顺便把这个的剧场版看了。</p><p>能吐槽的就是细节问题和声优的实力差，男主背景经历单薄，女主没有啥训练就可以承受这么大的加速度，撒金粉的行为也太不符合现实了，给人的感觉很怪。</p><p>但或许这一切的不符合逻辑才会让这部作品富有浪漫感。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182851.png" srcset="/img/loading.gif" alt="" /></p><p>可能对于看惯了女主倒贴的戏码的阿宅来说，最后没有在一起，男主也没有功成名就比较介意，但事实上这个故事就是这样，平淡而浪漫。简单的开头，富有激情和感动的突出包围，女主的形象转变，飞行员对决，任务完成的浪漫诀别。看到开头就能猜到结尾的剧情，事实上也非常动人，对于动画来说，讲好一个普通的故事比展开宏大的世界不一定简单，却能带给观众好的体验。</p><p>结尾男主驾驶飞机伴随着背景交响乐起舞，挥洒金粉，女主在舰头伫立注视，真的是非常浪漫。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182823.png" srcset="/img/loading.gif" alt="" /></p><p>最后的最后还是吐槽一点，我看的时候有EVA剧场的既视感，一看人物设定：松原秀典，妈的果然是你，我还挺喜欢的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200921182635.png" srcset="/img/loading.gif" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World|简评</title>
      <link href="/2020/07/16/Hello-World-%E7%AE%80%E8%AF%84/"/>
      <url>/2020/07/16/Hello-World-%E7%AE%80%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/269090_600EK.jpg" srcset="/img/loading.gif" alt="" /></p><p>写不动了，不写了，吊打天气之子，媲美你的名字。</p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>他人世界末游戏体验</title>
      <link href="/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/07/13/%E4%BB%96%E4%BA%BA%E4%B8%96%E7%95%8C%E6%9C%AB%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/307921_Hx4Zm.jpg" srcset="/img/loading.gif" alt="" /></p><h2 id="写在开篇"><a class="markdownIt-Anchor" href="#写在开篇"></a> 写在开篇</h2><p>《他人世界末》是我近年来玩过的国产Gal中剧本完成度最好的，配乐水平很高的，CG质量很高的偏电波作品。</p><p>我一开始是抱着质量能跟《WA2》差不多的心态玩的，玩了木竹樱和赵诗的所有结局之后发现，这也只能算是国产Gal中水平极高的一作，和日本Galgame高水平的作品而言还是无法比拟（就拿WA2的音乐水平来比较就会被完全吊打）</p><h2 id="赵诗线内含剧透"><a class="markdownIt-Anchor" href="#赵诗线内含剧透"></a> 赵诗线（内含剧透）</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgoovgrj20kq0pf767.jpg" srcset="/img/loading.gif" alt="" /></p><p>在三条可攻略角色线路中，我认为赵诗线给我的体验是比较差的，我做出的任何选项并不能影响男主对赵诗的好感，男主一直喜欢的就是沈岩。</p><p>在这条线中我认为这是非常正常的恋爱过程，不存在赵诗舔男主的行为，只是单纯的单恋然后告白在一起，然而蓝姐姐告诉我：不行。</p><p>这条线里我见到了男主无数扭曲的行为，赵诗为了爱情而妥协的行为，为了胃疼而扭曲，并且是从序章中男主的性格铺垫中无法完美解释的，比如：</p><p>1、男主和赵诗在已经成为情侣（选择接受）后，仍然不会将自己换成男友的身份说话，这条我可以勉强理解成男主的自卑心理作祟。（即男主哥哥对男主的阴影，男主无法认同自己接受别人的告白的恋爱，他应该做的是暗恋沈岩）</p><p>2、男主和赵诗在第一次约会逛画展时，提出分开看最后集合的要求，男主遇到沈岩后逃避，赵诗妥协。</p><p>3、四人约会。</p><p>4、男主帮助快出轨的基友哄沈岩，并丢下赵诗一个人去找沈岩。</p><p>5、在无数伪装之下维持着男主和赵诗“表面情侣”的关系，哄着被华昂伤害而堕落的沈岩，最后男主和赵诗分手。（漫长的道别TE）</p><p>6、赵诗宁愿男主一直想着沈岩也要和他维持着情侣的关系。（钟无艳NE）</p><p>在以上的行为中，我只感受到了蓝姐姐对于舔狗的理解：男主舔沈岩，赵诗舔男主，男主不搭理赵诗，赵诗也要贴上去舔，沈岩不喜欢男主，男主也要贴上去舔。</p><p>这条线就是看舔狗舔的心理，我完全无法感受到我的选择对男主心理的影响，男主一直都是喜欢沈岩的，赵诗一直都是宁愿舔着男主也要和男主在一起的女人。</p><p>对于蓝姐姐的舔狗恋爱心理来说，钟无艳结局是很好的，非常有味</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234800.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715234812.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235043.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235106.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200715235128.png" srcset="/img/loading.gif" alt="" /></p><p>蓝姐姐，你对舔狗的理解可真是深刻（无感情）</p><h2 id="偶像线"><a class="markdownIt-Anchor" href="#偶像线"></a> 偶像线</h2><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/7ef1b3bfgy1ga3bgn5zfbj20ks0phwg8.jpg" srcset="/img/loading.gif" alt="" /></p><p>根据蓝姐姐在知乎写的回答可以知道我玩偶像线的过程中那么熟悉的感觉，因为这就是顺着gal玩家的毛写的…</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716000557.png" srcset="/img/loading.gif" alt="" /></p><p>木竹樱和男主是很相像的两人，这一点也在游戏中提到。</p><p>木竹樱活在华昂天才音乐实力和父母的阴影之下，男主活在哥哥的阴影中，两个人都是自卑的人，都是没有安全感的人，对外表现强烈的抗拒心。两个人的共同性让gal玩家在玩的过程中能够体会到攻略的感觉，这也是为什么偶像线带给人的感觉很舒服（顺毛）。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002501.png" srcset="/img/loading.gif" alt="" /></p><p>而木竹樱这条线选起来也很简单，只要顺着她想要的东西一直选就可以GE，但假如有一个选错就会进入其他结局。</p><p>我选“心中”和“邮差”这两个结局说下我的感受。</p><h3 id="心中"><a class="markdownIt-Anchor" href="#心中"></a> 心中</h3><p>这个结局还满现实的，年轻时说下的拯救她，和她一起活下去，在成年工作之后不得不面对现实的艰难时，最后以“只有死亡才能将我们分开”兑现了年少的承诺。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002411.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002847.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716002901.png" srcset="/img/loading.gif" alt="" /></p><p>这样的反转带给人的心理震撼很大，让人以为在两人经历了波折之后终于能够在一起幸福地生活下去的时，现实却狠狠地打了你一巴掌。年轻时骄傲的资本却成了未来堕落的契机，不能不让人感到遗憾。</p><h3 id="邮差"><a class="markdownIt-Anchor" href="#邮差"></a> 邮差</h3><p>跨越五年的约定，浪漫到我要从嘴里吐出砂糖了。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004012.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004029.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>“人啊，幸福地活下去吧！”</p></blockquote><p>五年之后，小偶像变成了家喻户晓的明星，而我只是成为了一名普通公司的职员，面对如此巨大的地位差距，我是否有勇气能去与她见面呢，这成了一个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004349.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>这里想要的结果是YES，又或是NO呢。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004536.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004546.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004557.png" srcset="/img/loading.gif" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/AimiP02/IMG/QQ%E6%88%AA%E5%9B%BE20200716004616.png" srcset="/img/loading.gif" alt="" /></p><blockquote><p>最终，我没有选择上车，我看着最后一辆174路远去，直至眼睛发胀发酸。</p></blockquote><p>我一开始的想法与大多数玩家是一致的，既然得到了机会为什么不上车呢？等待了五年，最后等到了爱情的一无所有。</p><p>在看到蓝姐姐的回答之后，我陷入了思考。</p><blockquote><p>蓝莲安：举个例子，木竹樱的邮差END很多人都说我没有心，为什么不上车，你设身处地想想自己处于相同情况时，周围的人会不会劝你上车，你自己有没有勇气上车。这个结局之所以不让主角上车，就是为了让玩家记住这种遗憾感，现实生活中遇到相似的困境时，能拿出勇气“上车”。</p></blockquote><p>是啊，面对身份远高于我的偶像，我是否有勇气能上车。我与她的联系仅仅只有一个五年前月夜下的浪漫约定，而这一切随着时间又是否会改变，我不敢想，也不愿去想；我害怕，害怕她没有来，我同样害怕，害怕她来了，我配不上她。这样的矛盾是一个经历过强烈自卑的人会有的心理，面对飘渺的爱情我们是否有勇气去面对，去抓住爱情的锁链。蓝姐姐让我们思考这个问题，让我们在现实中遇到这种问题时能够做出能让自己不遗憾的选择。</p><p>当然，现实中我也不可能遇到小偶像（笑）。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>我并没有玩沈岩线，其一是因为这样的黑长直模板并没有像冬马一样吸引我，其二是因为我不想当舔狗。</p><p>总体上来说这部作品的文学性在gal作品里面算很上等的（青春伤痕文学，蓝姐姐又被称为动漫界郭敬明），其反转和立意在近年众多的国产Gal作品中独树一帜，打破了国产Gal的人物对话偏日语对话的尴尬，配乐敷衍水平低，声优的表现不尽人意的刻板印象。</p><p>最后希望蓝姐姐能在DLC中加入攻爷的攻略线，谢谢（砰砰砰）</p><p>购买链接：<a href="https://store.steampowered.com/app/1225780/_Onlooker/" target="_blank" rel="noopener">https://store.steampowered.com/app/1225780/_Onlooker/</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Galgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板整理</title>
      <link href="/2019/01/26/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/01/26/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>预计可能会有：</p><p>数论：快速幂，gcd，exgcd，逆元，Lucas定理，CRT，BSGS，欧拉函数，线性筛，矩阵乘法，FFT</p><p>图论：最短路，最小生成树，最大流，费用流，有向图的强连通分量，无向图的边的双联通分量</p><p>树：LCA，树分治，树链剖分</p><p>数据结构：树状数组，线段树，Splay，Treap，LCT，莫队，左偏树</p><p>先写一部分吧，反正大多数也不会，会写多少写多少吧…</p><a id="more"></a><h3 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h3><h4 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h4><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll n, ll mod)</span></span>&#123;ll res=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(n)&#123;        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) res=(res*a)%mod;        n&gt;&gt;=<span class="hljs-number">1</span>;        a=(a*a)%mod;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h4 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> gcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:gcd(b,a%b);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">return</span> a*b/gcd(a,b);&#125;</code></pre><h4 id="exgcd"><a class="markdownIt-Anchor" href="#exgcd"></a> exgcd</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!b)&#123;c=a;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;    <span class="hljs-keyword">else</span>&#123;exgcd(b,a%b,c,y,x);y-=(a/b)*x;&#125;&#125;</code></pre><h4 id="逆元"><a class="markdownIt-Anchor" href="#逆元"></a> 逆元</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">return</span> qpow(a,n<span class="hljs-number">-2</span>,n);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> x, y;    exgcd(a,n,x,y);    <span class="hljs-keyword">return</span> (x+n)%n;&#125;</code></pre><h4 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(not_prime, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(not_prime));    phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;        <span class="hljs-keyword">if</span>(!not_prime[i])&#123;prime[++top]=i;phi[i]=i<span class="hljs-number">-1</span>;&#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= top&amp;&amp;i*prime[j] &lt;= n; ++j)&#123;            not_prime[prime[j]*i]=<span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;phi[prime[j]*i]=phi[i]*prime[j];<span class="hljs-keyword">break</span>;&#125;            phi[prime[j]*i]=phi[i]*(prime[j]<span class="hljs-number">-1</span>);        &#125;    &#125;&#125;</code></pre><h4 id="中国剩余定理"><a class="markdownIt-Anchor" href="#中国剩余定理"></a> 中国剩余定理</h4><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CRT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> m[],<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)        M *= m[i];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)    &#123;        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">int</span> Mi = M / m[i];        exgcd(Mi, m[i], x, y);        ans = (ans + Mi * x * a[i]) % M;    &#125;    <span class="hljs-keyword">if</span>(ans &lt; <span class="hljs-number">0</span>) ans += M;    <span class="hljs-keyword">return</span> ans;&#125;</code></pre><h4 id="线性筛"><a class="markdownIt-Anchor" href="#线性筛"></a> 线性筛</h4><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> prime[max_], primes[max_], num;<span class="hljs-built_in">memset</span>(prime,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(prime));prime[<span class="hljs-number">0</span>]=prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=limit;i++)&#123;<span class="hljs-keyword">if</span>(prime[i])primes[num++]=i;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;num&amp;&amp;i*primes[j]&lt;limit;j++)&#123;prime[i*primes[j]]=<span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(!(i%primes[j]))<span class="hljs-keyword">break</span>;&#125;&#125;</code></pre><h4 id="矩阵乘法"><a class="markdownIt-Anchor" href="#矩阵乘法"></a> 矩阵乘法</h4><pre><code class="hljs cpp"><span class="hljs-comment">//顺便带了一个快速幂，递推数列的矩阵自己推</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span>&#123;</span>    ll m[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];&#125;;ll n, k;Mat input, unit;<span class="hljs-function">Mat <span class="hljs-title">Matrix_Mul</span><span class="hljs-params">(Mat x, Mat y)</span> </span>&#123;    Mat c;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            c.m[i][j] = <span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;                c.m[i][j] = c.m[i][j] % Mod + x.m[i][k] * y.m[k][j] % Mod;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> c;&#125;<span class="hljs-function">Mat <span class="hljs-title">Quick_Matrix_pow</span><span class="hljs-params">(Mat a, ll n)</span> </span>&#123;    Mat res = unit;    <span class="hljs-keyword">while</span> (n) &#123;        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)            res = Matrix_Mul(res, a);        a = Matrix_Mul(a, a);        n &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld"</span>, &amp;n, &amp;k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;input.m[i][j]);        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        unit.m[i][i] = <span class="hljs-number">1</span>;    Mat ans = Quick_Matrix_pow(input, k);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>, ans.m[i][j] % Mod);        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="lucas定理"><a class="markdownIt-Anchor" href="#lucas定理"></a> Lucas定理</h4><p>用不熟练还是不写了</p><h4 id="bsgs"><a class="markdownIt-Anchor" href="#bsgs"></a> BSGS</h4><p>只听过</p><h4 id="fft"><a class="markdownIt-Anchor" href="#fft"></a> FFT</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cassert&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;climits&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;deque&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug puts(<span class="hljs-meta-string">"-----"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmax</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? a : b;&#125;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">T</span> <span class="hljs-title">chkmin</span>(<span class="hljs-title">T</span> <span class="hljs-title">a</span>, <span class="hljs-title">T</span> <span class="hljs-title">b</span>) &#123;</span><span class="hljs-keyword">return</span> a &gt; b ? b : a;&#125;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">2147483647</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">19260817</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>; <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar())) <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>;<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-string">'0'</span>);<span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) print(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Complex</span>&#123;</span>    <span class="hljs-keyword">double</span> a, b;    Complex() &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a, <span class="hljs-keyword">double</span> _b) : a(_a), b(_b) &#123;&#125;    Complex(<span class="hljs-keyword">double</span> _a) : a(_a), b(<span class="hljs-number">0.0</span>) &#123;&#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a + z.a, b + z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a - z.a, b - z.b);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">return</span> Complex(a * z.a - b * z.b, a * z.b + b * z.a);    &#125;    <span class="hljs-keyword">inline</span> Complex <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> Complex &amp;z) <span class="hljs-keyword">const</span> &#123;        <span class="hljs-keyword">double</span> m = z.a * z.a + z.b * z.b;        <span class="hljs-keyword">return</span> Complex((a * z.a + b * z.b) / m, (b * z.a - a * z.b) / m);    &#125;&#125;;Complex a[Maxn], b[Maxn];<span class="hljs-keyword">int</span> alen, blen, len, L, n, rev[Maxn], ans[Maxn];<span class="hljs-keyword">int</span> _a[Maxn], _b[Maxn];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(Complex c[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> f)</span> </span>&#123;    Complex wn, w, x, y;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)        <span class="hljs-keyword">if</span>(i &lt; rev[i]) <span class="hljs-built_in">std</span>::swap(c[i], c[rev[i]]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;        wn = Complex(<span class="hljs-built_in">cos</span>(pi / i), <span class="hljs-built_in">sin</span>(pi / i) * f);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p = i &lt;&lt; <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; j &lt; n; j += p) &#123;            w = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; i; ++k, w = w * wn) &#123;                x = c[j + k]; y = w * c[j + k + i];                c[j + k] = x + y; c[j + k + i] = x - y;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(!~f) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) c[i].a /= (<span class="hljs-keyword">double</span>)n;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    alen = read(), blen = read(), len = alen + blen;    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">1</span>; n &lt;= len; n &lt;&lt;= <span class="hljs-number">1</span>, L++);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (L - <span class="hljs-number">1</span>));<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= alen; ++i) a[i].a = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= blen; ++i) b[i].a = read();    FFT(a, n, <span class="hljs-number">1</span>); FFT(b, n, <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) a[i] = a[i] * b[i];    FFT(a, n, <span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) ans[i] = (<span class="hljs-keyword">int</span>)(a[i].a + <span class="hljs-number">0.5</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, ans[i]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h3><h4 id="最短路"><a class="markdownIt-Anchor" href="#最短路"></a> 最短路</h4><h5 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heapnode</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> node,val;    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> heapnode &amp;rhs) <span class="hljs-keyword">const</span>     &#123;        <span class="hljs-keyword">return</span> val &gt; rhs.val;    &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::priority_queue&lt;heapnode&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    dis[s] = <span class="hljs-number">0</span>;    Q.push((heapnode)&#123;s,<span class="hljs-number">0</span>&#125;);    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        heapnode U = Q.top();        Q.pop();        <span class="hljs-keyword">if</span> (vis[U.node])            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">int</span> u = U.node;        vis[u] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                Q.push((heapnode)&#123;v,dis[v]&#125;);            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    dijkstra(s);    <span class="hljs-comment">///do something...</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h5 id="spfaslf"><a class="markdownIt-Anchor" href="#spfaslf"></a> SPFA///slf</h5><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1 &lt;&lt; 30</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdGe</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> last[N * <span class="hljs-number">2</span>], cnt, dis[N];<span class="hljs-keyword">bool</span> vis[N];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><span class="hljs-function"></span>&#123;    edge[++cnt].next = last[u];    edge[cnt].to = v;    edge[cnt].val = w;    last[u] = cnt;&#125;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; Q;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= P; i++)    &#123;        dis[i] = INF;        vis[i] = <span class="hljs-number">0</span>;    &#125;    Q.push_back(s);    dis[s] = <span class="hljs-number">0</span>;    vis[s] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (!Q.empty())    &#123;        <span class="hljs-keyword">int</span> u = Q.front();        Q.pop_front();        vis[u] = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last[u]; i; i = edge[i].next)        &#123;            <span class="hljs-keyword">int</span> v = edge[i].to;            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + edge[i].val)            &#123;                dis[v] = dis[u] + edge[i].val;                <span class="hljs-keyword">if</span> (!vis[v])                &#123;                    vis[v] = <span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                    <span class="hljs-comment">//忘了是不是这么写了...</span>                &#125;            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= C; i++)    &#123;        <span class="hljs-keyword">int</span> x, y, z;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);        addedge(x, y, z);        addedge(y, x, z);    &#125;    spfa(s);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h4><h5 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h5><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> F[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==F[x]?x:F[x]=find(F[x]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;F[find(b)]=find(a);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(edge a, edge b)</span></span>&#123;<span class="hljs-keyword">return</span> a.val&lt;b.val;&#125;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) F[i]=i;sort(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>,cmp);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)&#123;<span class="hljs-keyword">int</span> u=e[i].next;<span class="hljs-keyword">int</span> v=e[i].to;<span class="hljs-keyword">if</span>(find(u)!=find(v))&#123;merge(u,v);ans+=e[i].val;k++;<span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;&#125;&#125;&#125;</code></pre><h5 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> Prim</h5><p>先占坑，不会写</p><h4 id="网络流"><a class="markdownIt-Anchor" href="#网络流"></a> 网络流</h4><h5 id="dinic"><a class="markdownIt-Anchor" href="#dinic"></a> Dinic</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, val;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, cur[max_], depth[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;add(u,v,w);add(v,u,<span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(depth));    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push(s), depth[s]=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;    <span class="hljs-keyword">int</span> now=q.front();q.pop();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;    <span class="hljs-keyword">int</span> to=e[i].to;    <span class="hljs-keyword">if</span>(depth[to]==<span class="hljs-number">-1</span>&amp;&amp;e[i].flow)&#123;    depth[to]=depth[now]+<span class="hljs-number">1</span>;q.push(to);    &#125;    &#125;    &#125;    <span class="hljs-keyword">return</span> depth[t]!=<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;<span class="hljs-keyword">if</span>(now==t) <span class="hljs-keyword">return</span> limit;<span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;<span class="hljs-keyword">int</span> to=e[i].to;<span class="hljs-keyword">if</span>(depth[to]==depth[now]+<span class="hljs-number">1</span>&amp;&amp;e[i].flow)&#123;w=dfs(to, min(limit-flow, e[i].flow));e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;<span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">return</span> flow;&#125;&#125;<span class="hljs-keyword">if</span>(!flow) depth[now]=<span class="hljs-number">-1</span>;<span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-keyword">int</span> maxflow=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">while</span>(bfs())&#123;<span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));maxflow+=dfs(s, inf);&#125;&#125;</code></pre><h5 id="zkw费用流不想写一般的费用流了"><a class="markdownIt-Anchor" href="#zkw费用流不想写一般的费用流了"></a> zkw费用流//不想写一般的费用流了</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, m, s, t;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> next, to, flow, dis;&#125;e[max_&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[max_], cnt=<span class="hljs-number">1</span>, depth[max_], cur[max_], dis[max_], vis[max_];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> c)</span></span>&#123;e[++cnt].next=head[u];e[cnt].to=v;e[cnt].flow=w;e[cnt].dis=c;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span>&#123;ins(u,v,w,c);ins(v,u,<span class="hljs-number">0</span>,-c);&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push_back(t), dis[t]=<span class="hljs-number">0</span>, vis[t]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(!q.empty())&#123;        <span class="hljs-keyword">int</span> now=q.front();q.pop_front();vis[now]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(e[i^<span class="hljs-number">1</span>].flow&amp;&amp;dis[to]&gt;dis[now]-e[i].dis)&#123;                dis[to]=dis[now]-e[i].dis;                <span class="hljs-keyword">if</span>(!vis[to])&#123;                    vis[to]=<span class="hljs-number">1</span>;                    <span class="hljs-keyword">if</span>(!q.empty()&amp;&amp;dis[to]&lt;dis[q.front()]) q.push_front(to);                    <span class="hljs-keyword">else</span> q.push_back(to);                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> dis[s]&lt;inf;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> limit)</span></span>&#123;    <span class="hljs-keyword">if</span>(now==t)&#123;        vis[now]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> limit;    &#125;    <span class="hljs-keyword">int</span> w, flow=<span class="hljs-number">0</span>;    vis[now]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; i=cur[now];i;i=e[i].next)&#123;        <span class="hljs-keyword">int</span> to=e[i].to;        <span class="hljs-keyword">if</span>(!vis[to]&amp;&amp;e[i].flow&amp;&amp;dis[now]-e[i].dis==dis[to])&#123;            w=dfs(to,min(e[i].flow,limit-flow));            <span class="hljs-keyword">if</span>(w)&#123;                ans+=w*e[i].dis;e[i].flow-=w;e[i^<span class="hljs-number">1</span>].flow+=w;flow+=w;            &#125;            <span class="hljs-keyword">if</span>(flow==limit) <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mcf</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> flow=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(spfa())&#123;        vis[t]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(vis[t])&#123;            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));            <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span>(head));            flow+=dfs(s, inf);        &#125;    &#125;    <span class="hljs-keyword">return</span> flow;&#125;</code></pre><h4 id="强连通分量"><a class="markdownIt-Anchor" href="#强连通分量"></a> 强连通分量</h4><h5 id="割点"><a class="markdownIt-Anchor" href="#割点"></a> 割点</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">300010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch = getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x = ch ^ <span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch = getchar())) x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;e[maxn&lt;&lt;<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> head[maxn], cnt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[++cnt] = (edge)&#123;head[u], v&#125;; head[u] = cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;add(u, v); add(v, u);&#125;<span class="hljs-keyword">int</span> low[maxn], dfn[maxn], idx = <span class="hljs-number">0</span>, cut[maxn], point = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;    low[now] = dfn[now] = ++idx;    <span class="hljs-keyword">int</span> child = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = head[now]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> to = e[i].to;        <span class="hljs-keyword">if</span>(!dfn[to]) &#123;            tarjan(to, fa);            low[now] = <span class="hljs-built_in">std</span>::min(low[now], low[to]);            <span class="hljs-keyword">if</span>(low[to] &gt;= dfn[now] &amp;&amp; now != fa)                cut[now] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(now == fa) ++child;        &#125;        low[now] = <span class="hljs-built_in">std</span>::min(low[now], dfn[to]);    &#125;    <span class="hljs-keyword">if</span>(child &gt;= <span class="hljs-number">2</span> &amp;&amp; now == fa) cut[now] = <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    n = read(), m = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;        <span class="hljs-keyword">int</span> x = read(), y = read();        ins(x, y);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)         <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i, i);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) ++point;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, point);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)        <span class="hljs-keyword">if</span>(cut[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, i);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h3><h4 id="lca"><a class="markdownIt-Anchor" href="#lca"></a> LCA</h4><p>//不想自己打了…</p><h5 id="倍增"><a class="markdownIt-Anchor" href="#倍增"></a> 倍增</h5><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> lgn, dep[maxn], anc[maxn][<span class="hljs-number">30</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].next) &#123;        <span class="hljs-keyword">int</span> v = e[i].to;        <span class="hljs-keyword">if</span>(v == anc[u][<span class="hljs-number">0</span>]) <span class="hljs-keyword">continue</span>;        anc[v][<span class="hljs-number">0</span>] = u;        dep[v] = dep[u] + <span class="hljs-number">1</span>;        dfs(v);    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calanc</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= sz; j++) &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= sz; i++) &#123;            anc[i][j] = anc[anc[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];        &#125;    &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">querylca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(dep[u] &gt; dep[v]) <span class="hljs-built_in">std</span>::swap(u, v);    <span class="hljs-keyword">int</span> del = dep[v] - dep[u];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= del; i++) &#123;        <span class="hljs-keyword">if</span>((<span class="hljs-number">1</span> &lt;&lt; i) &amp; del) v = anc[v][i];    &#125;    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = lgn; i &gt;= <span class="hljs-number">0</span>; i--) &#123;        <span class="hljs-keyword">if</span>(anc[u][i] != anc[v][i]) &#123;            u = anc[u][i];            v = anc[v][i];        &#125;    &#125;    <span class="hljs-keyword">return</span> anc[u][<span class="hljs-number">0</span>];&#125;</code></pre><h5 id="st表"><a class="markdownIt-Anchor" href="#st表"></a> ST表</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500010</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;edge[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> n, m, s, cnt = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>, cnt_ = <span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> last[N];    <span class="hljs-keyword">int</span> depth[N];<span class="hljs-comment">//深度 </span>    <span class="hljs-keyword">bool</span> vis[N];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><span class="hljs-function">    </span>&#123;        edge[++cnt].next = last[u];        edge[cnt].to = v;        last[u] = cnt;     &#125;   &#125; tree;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RMQ</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> F[N], dp[N][<span class="hljs-number">21</span>], eu[N];<span class="hljs-comment">// </span>&#125; rmq;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> tmp = ++num;    rmq.eu[++cnt_] = tmp;    rmq.F[tmp] = u;    tree.depth[u] = cnt_;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tree.last[u]; i; i = edge[i].next)    &#123;        <span class="hljs-keyword">int</span> v = edge[i].to;        <span class="hljs-keyword">if</span> (v == fa)            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">else</span>        &#123;            tree.vis[v] = <span class="hljs-number">1</span>;            dfs(v, u);            rmq.eu[++cnt_] = tmp;        &#125;     &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rmq_st</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        rmq.dp[i][<span class="hljs-number">0</span>] = rmq.eu[i];    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)    &#123;        <span class="hljs-keyword">int</span> k = n - (<span class="hljs-number">1</span> &lt;&lt; j) + <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)        &#123;            rmq.dp[i][j] = <span class="hljs-built_in">std</span>::min(rmq.dp[i][j - <span class="hljs-number">1</span>], rmq.dp[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rmq_find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> k = (<span class="hljs-keyword">int</span>) (<span class="hljs-built_in">log</span>(<span class="hljs-number">1.0</span> * (r - l) + <span class="hljs-number">1</span>) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2.0</span>));    <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::min(rmq.dp[l][k] , rmq.dp[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (tree.depth[x] &gt; tree.depth[y])        <span class="hljs-built_in">std</span>::swap(x, y);    <span class="hljs-keyword">int</span> k = rmq_find(tree.depth[x], tree.depth[y]);    <span class="hljs-keyword">return</span> rmq.F[k];&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= n - <span class="hljs-number">1</span>; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        tree.add(x, y);        tree.add(y, x);    &#125;    dfs(s, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; i++)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, lca(x, y));    &#125;   &#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    init();    rmq_st(cnt_);    query();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="树分治"><a class="markdownIt-Anchor" href="#树分治"></a> 树分治</h4><p>不会</p><h4 id="树链剖分"><a class="markdownIt-Anchor" href="#树链剖分"></a> 树链剖分</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(register int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dep(i,r,l) for(register int i=r;i&gt;=l;--i)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">200010</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch=getchar()));    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> x=ch^<span class="hljs-string">'0'</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch=getchar())) x=(((x&lt;&lt;<span class="hljs-number">2</span>)+x)&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-string">'0'</span>);    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-keyword">int</span> n, m, r, p;<span class="hljs-keyword">int</span> a[maxn], b[maxn], size=<span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> next, to, val;&#125;e[maxn];<span class="hljs-keyword">int</span> head[maxn], cnt=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;e[++cnt]=(Edge)&#123;head[u],v&#125;;head[u]=cnt;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;add(u,v);add(v,u);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent</span>&#123;</span>    <span class="hljs-keyword">int</span> l, r, sum, tags, sz;&#125;tr[maxn];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub_Tree</span>&#123;</span>    <span class="hljs-keyword">int</span> dep[maxn], fa[maxn], son[maxn], tot[maxn];    <span class="hljs-keyword">int</span> top[maxn], idx[maxn];    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> depth)</span></span>&#123;        dep[now]=depth;        fa[now]=f;        tot[now]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> maxson=<span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(to==f) <span class="hljs-keyword">continue</span>;            tot[now]+=dfs1(to,now,depth+<span class="hljs-number">1</span>);            <span class="hljs-keyword">if</span>(tot[to]&gt;maxson) maxson=tot[to], son[now]=to;        &#125;        <span class="hljs-keyword">return</span> tot[now];    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> top_node)</span></span>&#123;        idx[now]=++size;        a[size]=b[now];        top[now]=top_node;        <span class="hljs-keyword">if</span>(!son[now]) <span class="hljs-keyword">return</span>;        dfs2(son[now],top_node);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[now];i;i=e[i].next)&#123;            <span class="hljs-keyword">int</span> to=e[i].to;            <span class="hljs-keyword">if</span>(!idx[to])                dfs2(to,to);        &#125;    &#125;&#125;sub;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegMent_Tree</span>&#123;</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson o&lt;&lt;1</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson o&lt;&lt;1|1</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;tr[o].sum=(tr[lson].sum+tr[rson].sum+p)%p;&#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span>&#123;        <span class="hljs-keyword">if</span>(tr[o].tags)&#123;            tr[lson].tags=(tr[lson].tags+tr[o].tags)%p;            tr[rson].tags=(tr[rson].tags+tr[o].tags)%p;            tr[lson].sum=(tr[lson].sum+tr[lson].sz*tr[o].tags)%p;            tr[rson].sum=(tr[rson].sum+tr[rson].sz*tr[o].tags)%p;            tr[o].tags=<span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        tr[o].l=l,tr[o].r=r,tr[o].sz=r-l+<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l==r)&#123;            tr[o].sum=a[l];            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;        build(lson,l,mid); build(rson,mid+<span class="hljs-number">1</span>,r);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            tr[o].sum+=tr[o].sz*v;            tr[o].tags+=v;            <span class="hljs-keyword">return</span> ;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) update_add(lson,l,r,v);        <span class="hljs-keyword">if</span>(r&gt;mid) update_add(rson,l,r,v);        push_up(o);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(l&lt;=tr[o].l&amp;&amp;tr[o].r&lt;=r)&#123;            <span class="hljs-keyword">return</span> tr[o].sum%p;        &#125;        push_down(o);        <span class="hljs-keyword">int</span> mid=(tr[o].l+tr[o].r)&gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(l&lt;=mid) ans=(ans+ask_sum(lson,l,r))%p;        <span class="hljs-keyword">if</span>(r&gt;mid) ans=(ans+ask_sum(rson,l,r))%p;        <span class="hljs-keyword">return</span> ans;     &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> lson</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> rson</span>&#125;seg;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Modify</span>&#123;</span>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x]))%p;            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        ans=(ans+seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y]))%p;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans%p);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_reg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;        <span class="hljs-keyword">while</span>(sub.top[x]!=sub.top[y])&#123;            <span class="hljs-keyword">if</span>(sub.dep[sub.top[x]]&lt;sub.dep[sub.top[y]]) swap(x,y);            seg.update_add(<span class="hljs-number">1</span>,sub.idx[sub.top[x]],sub.idx[x],v);            x=sub.fa[sub.top[x]];        &#125;        <span class="hljs-keyword">if</span>(sub.dep[x]&gt;sub.dep[y]) swap(x,y);        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[y],v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;        seg.update_add(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>,v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_sontree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, seg.ask_sum(<span class="hljs-number">1</span>,sub.idx[x],sub.idx[x]+sub.tot[x]<span class="hljs-number">-1</span>)%p);    &#125;&#125;modify;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(head));    n=read(),m=read(),r=read(),p=read();    rep(i,<span class="hljs-number">1</span>,n) b[i]=read();    rep(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;        <span class="hljs-keyword">int</span> x=read(), y=read();        ins(x,y);    &#125;    sub.dfs1(r,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);    sub.dfs2(r,r);    seg.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);    rep(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt=read(),x,y,z;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            x=read(),y=read(),z=read()%p;            modify.modify_reg(x,y,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)&#123;            x=read(),y=read();            modify.query_sum(x,y);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">3</span>)&#123;            x=read(),z=read()%p;            modify.modify_sontree(x,z);        &#125;        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">4</span>)&#123;            x=read();            modify.query_sontree(x);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><h4 id="树状数组"><a class="markdownIt-Anchor" href="#树状数组"></a> 树状数组</h4><p>//真的不想写了…</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> tree[<span class="hljs-number">2000010</span>];<span class="hljs-keyword">int</span> a,b,c,d;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">return</span> x &amp; -x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-comment">//单点+</span>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;        tree[x] += k;        x += lowbit(x);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;        ans += tree[x];        x -= lowbit(x);    &#125;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;a;        add(i,a);       &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;b&gt;&gt;c&gt;&gt;d;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)&#123;            add(c,d);        &#125;        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">cout</span>&lt;&lt;sum(d)-sum(c<span class="hljs-number">-1</span>)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpe(i,r,l) for(int i=r;i&gt;=l;--i)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pts puts(<span class="hljs-meta-string">""</span>)</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> node=<span class="hljs-number">500010</span>;<span class="hljs-keyword">int</span> tree[node], n, m, in[node];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &amp;-x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;<span class="hljs-keyword">while</span>(x&lt;=n)&#123;tree[x]+=v;x+=lowbit(x);&#125;&#125;<span class="hljs-comment">//区间+</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;ans+=tree[x];x-=lowbit(x);&#125;<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;    rep(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">cin</span>&gt;&gt;in[i];    rep(i,<span class="hljs-number">1</span>,m)&#123;    <span class="hljs-keyword">int</span> t,x,y,z;    <span class="hljs-built_in">cin</span>&gt;&gt;t;    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;    add(x,z);    add(y+<span class="hljs-number">1</span>,-z);        &#125; <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cin</span>&gt;&gt;x;            <span class="hljs-built_in">cout</span>&lt;&lt;in[x]+query(x)&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;&#125;</code></pre><h4 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h4><h5 id="简单的线段树"><a class="markdownIt-Anchor" href="#简单的线段树"></a> 简单的线段树</h5><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">110000</span>;<span class="hljs-keyword">int</span> N, M, Q;LL sum[<span class="hljs-number">500000</span>], add[<span class="hljs-number">500000</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>; <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (ch&lt;<span class="hljs-string">'0'</span> || ch&gt;<span class="hljs-string">'9'</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>; ch = getchar(); &#125;<span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) X = (X &lt;&lt; <span class="hljs-number">3</span>) + (X &lt;&lt; <span class="hljs-number">1</span>) + ch - <span class="hljs-string">'0'</span>, ch = getchar();<span class="hljs-keyword">return</span> X * w;&#125;<span class="hljs-comment">//读入优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (x&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>), x = -x;<span class="hljs-keyword">if</span> (x&gt;<span class="hljs-number">9</span>) write(x / <span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);&#125;<span class="hljs-comment">//输出优化</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;sum[p] = sum[p * <span class="hljs-number">2</span>] + sum[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];&#125;<span class="hljs-comment">//向上维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;add[root] = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (l == r)sum[root] = read();<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;build(<span class="hljs-number">2</span> * root, l, k);build(<span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);push_up(root);&#125;&#125;<span class="hljs-comment">//建树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (add[root])&#123;<span class="hljs-keyword">int</span> s1 = <span class="hljs-number">2</span> * root, s2 = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;add[s1] += add[root];add[s2] += add[root];sum[s1] += add[root] * (k - l + <span class="hljs-number">1</span>);sum[s2] += add[root] * (r - k);add[root] = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">//向下维护线段树</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//访问区间 增加值 节点位置（或者用pos更好？） 原区间</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr)<span class="hljs-comment">//访问区间直接包含原区间</span>&#123;add[root] += c;sum[root] += c * (r - l + <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) update(nl, nr, c, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-comment">//左边</span><span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) update(nl, nr, c, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-comment">//右边</span>push_up(root);&#125;<span class="hljs-function">LL <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nl, <span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span><span class="hljs-comment">//原理与上方区间增加值一样</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (nl &lt;= l &amp;&amp; r &lt;= nr) <span class="hljs-comment">//同样，访问区间直接包含原区间，直接输出</span><span class="hljs-keyword">return</span> sum[root];pushdown(root, l, r);<span class="hljs-keyword">int</span> k = (l + r) &gt;&gt; <span class="hljs-number">1</span>;LL ans = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (nl &lt;= k) ans += query(nl, nr, <span class="hljs-number">2</span> * root, l, k);<span class="hljs-keyword">if</span> (nr &gt;= k + <span class="hljs-number">1</span>) ans += query(nl, nr, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>, r);<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;N = read(), M = read();build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++)&#123;<span class="hljs-keyword">int</span> L, R, C;Q = read();<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">1</span>)&#123;L = read(), R = read(), C = read();update(L, R, C, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N);&#125;<span class="hljs-keyword">if</span> (Q == <span class="hljs-number">2</span>)&#123;L = read(), R = read();write(query(L, R, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N));<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);&#125;&#125;<span class="hljs-comment">//system("pause");</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> p;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">100007</span>];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> v, mul, add;&#125;node[<span class="hljs-number">400007</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(l==r)&#123;        node[root].v=a[l];    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;        bt(root*<span class="hljs-number">2</span>, l, m);        bt(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, r);        node[root].v=node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v;    &#125;    node[root].v%=p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">int</span> m=(l+r)/<span class="hljs-number">2</span>;    node[root*<span class="hljs-number">2</span>].v=(node[root*<span class="hljs-number">2</span>].v*node[root].mul+node[root].add*(m-l+<span class="hljs-number">1</span>))%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v*node[root].mul+node[root].add*(r-m))%p;    node[root*<span class="hljs-number">2</span>].mul=(node[root*<span class="hljs-number">2</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].mul*node[root].mul)%p;    node[root*<span class="hljs-number">2</span>].add=(node[root*<span class="hljs-number">2</span>].add*node[root].mul+node[root].add)%p;    node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add=(node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].add*node[root].mul+node[root].add)%p;    node[root].mul=<span class="hljs-number">1</span>;    node[root].add=<span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].v=(node[root].v*k)%p;        node[root].mul=(node[root].mul*k)%p;        node[root].add=(node[root].add*k)%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud1(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud1(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ud2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> ;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        node[root].add=(node[root].add+k)%p;        node[root].v=(node[root].v+k*(nodedr-nodedl+<span class="hljs-number">1</span>))%p;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    ud2(root*<span class="hljs-number">2</span>, nodedl, m, l, r, k);    ud2(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r, k);    node[root].v=(node[root*<span class="hljs-number">2</span>].v+node[root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].v)%p;    <span class="hljs-keyword">return</span> ;&#125;<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> nodedl, <span class="hljs-keyword">int</span> nodedr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(r&lt;nodedl || nodedr&lt;l)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">if</span>(l&lt;=nodedl &amp;&amp; nodedr&lt;=r)&#123;        <span class="hljs-keyword">return</span> node[root].v;    &#125;    pushdown(root, nodedl, nodedr);    <span class="hljs-keyword">int</span> m=(nodedl+nodedr)/<span class="hljs-number">2</span>;    <span class="hljs-keyword">return</span> (query(root*<span class="hljs-number">2</span>, nodedl, m, l, r)+query(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, nodedr, l, r))%p;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n, m;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i]);    &#125;    bt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> chk;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;chk);        <span class="hljs-keyword">int</span> x, y;        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> k;        <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">1</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud1(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chk==<span class="hljs-number">2</span>)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;k);            ud2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;x, &amp;y);            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y));        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="标记永久化线段树"><a class="markdownIt-Anchor" href="#标记永久化线段树"></a> 标记永久化线段树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pos(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 201000</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> sum[N*<span class="hljs-number">4</span>],add[N*<span class="hljs-number">4</span>];<span class="hljs-keyword">int</span> a[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> rt)</span></span>&#123;    <span class="hljs-keyword">if</span>(l==r)&#123;        sum[rt]=a[l];<span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    build(l,mid,rt&lt;&lt;<span class="hljs-number">1</span>);    build(mid+<span class="hljs-number">1</span>,r,rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);    sum[rt]=sum[rt&lt;&lt;<span class="hljs-number">1</span>]+sum[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    sum[rt]+=v*(xr-xl+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(l==xl&amp;&amp;r==xr)&#123;        add[rt]+=v; <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid)  update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid)   update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,xl,xr);        <span class="hljs-keyword">else</span> update(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,v,xl,mid),update(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,v,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt,<span class="hljs-keyword">int</span> ad,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> xl,<span class="hljs-keyword">int</span> xr)</span></span>&#123;    <span class="hljs-keyword">if</span>(xl==l&amp;&amp;xr==r)&#123;        <span class="hljs-keyword">return</span> sum[rt]+ad*(xr-xl+<span class="hljs-number">1</span>);    &#125;      <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(xr&lt;=mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,xr);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(xl&gt;mid) <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,xl,xr);        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> query(rt&lt;&lt;<span class="hljs-number">1</span>,ad+add[rt],l,mid,xl,mid)+query(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ad+add[rt],mid+<span class="hljs-number">1</span>,r,mid+<span class="hljs-number">1</span>,xr);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);    pos(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);    build(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);    pos(i,<span class="hljs-number">1</span>,m)&#123;        <span class="hljs-keyword">int</span> opt;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;opt);        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;x,&amp;y);        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> k;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;k);            update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,k,x,y);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,n,x,y));    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//转载自Hallmeow</span></code></pre><h4 id="可持续化线段树"><a class="markdownIt-Anchor" href="#可持续化线段树"></a> 可持续化线段树</h4><p>不会</p><h4 id="动态加点线段树"><a class="markdownIt-Anchor" href="#动态加点线段树"></a> 动态加点线段树</h4><pre><code class="hljs cpp"><span class="hljs-comment">//CF915E Physical Education Lessons</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rr register</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">500007</span> * <span class="hljs-number">30</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;    rr <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;    rr <span class="hljs-keyword">char</span> ch = getchar();    <span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) &#123;<span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) g = <span class="hljs-number">-1</span>; ch = getchar();&#125;    <span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) &#123;x = (((x &lt;&lt; <span class="hljs-number">2</span>) + x) &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-string">'0'</span>); ch = getchar();&#125;    <span class="hljs-keyword">return</span> x * g;&#125;<span class="hljs-keyword">int</span> n, q;<span class="hljs-keyword">int</span> sum[maxn], tags[maxn], rs[maxn], ls[maxn], id = <span class="hljs-number">0</span>, rt = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span>(tags[o] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(l != r) &#123;        <span class="hljs-keyword">if</span>(!ls[o]) ls[o] = ++id;        <span class="hljs-keyword">if</span>(!rs[o]) rs[o] = ++id;        sum[ls[o]] = tags[o] * (mid - l + <span class="hljs-number">1</span>);        sum[rs[o]] = tags[o] * (r - mid);         tags[ls[o]] = tags[o];        tags[rs[o]] = tags[o];    &#125;    tags[o] = <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;o, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span> </span>&#123;    <span class="hljs-keyword">if</span>(!o) o = ++id;    <span class="hljs-keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;        sum[o] = v * (r - l + <span class="hljs-number">1</span>);        tags[o] = v;        <span class="hljs-keyword">return</span> ;    &#125;    pushdown(o, l, r);    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(ql &lt;= mid) update(ls[o], ql, qr, l, mid, v);    <span class="hljs-keyword">if</span>(qr &gt; mid) update(rs[o], ql, qr, mid + <span class="hljs-number">1</span>, r, v);    sum[o] = sum[ls[o]] + sum[rs[o]];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">memset</span>(tags, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(tags));    n = read(), q = read();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;        <span class="hljs-keyword">int</span> l = read(), r = read(), k = read();        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);        <span class="hljs-keyword">else</span> update(rt, l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, n - sum[<span class="hljs-number">1</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="左偏树"><a class="markdownIt-Anchor" href="#左偏树"></a> 左偏树</h4><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> max_ = <span class="hljs-number">100010</span>;<span class="hljs-keyword">int</span> n, m;<span class="hljs-keyword">int</span> ch[max_][<span class="hljs-number">2</span>];<span class="hljs-comment">//表示当前节点儿子的编号</span><span class="hljs-keyword">int</span> a[max_], dis[max_]<span class="hljs-comment">/*树上距离*/</span>, f[max_]<span class="hljs-comment">/*父亲节点编号*/</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!x||!y) <span class="hljs-keyword">return</span> x|y;    <span class="hljs-keyword">if</span>(a[x]&gt;a[y]||(a[x]==a[y]&amp;&amp;x&gt;y)) swap(x,y);<span class="hljs-comment">//小根堆</span>    ch[x][<span class="hljs-number">1</span>]=merge(ch[x][<span class="hljs-number">1</span>],y);    f[ch[x][<span class="hljs-number">1</span>]]=x;    <span class="hljs-keyword">if</span>(dis[ch[x][<span class="hljs-number">0</span>]]&lt;dis[ch[x][<span class="hljs-number">1</span>]]) swap(ch[x][<span class="hljs-number">0</span>], ch[x][<span class="hljs-number">1</span>]);<span class="hljs-comment">//左偏树</span>    dis[x]=dis[ch[x][<span class="hljs-number">1</span>]]+<span class="hljs-number">1</span>;<span class="hljs-comment">//左偏树的距离</span>    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">while</span>(f[x]<span class="hljs-comment">/*仍然存在父亲节点*/</span>) x=f[x];    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    a[x]=<span class="hljs-number">-1</span>;    f[ch[x][<span class="hljs-number">0</span>]]=f[ch[x][<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span>;    merge(ch[x][<span class="hljs-number">0</span>],ch[x][<span class="hljs-number">1</span>]);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);    dis[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;        <span class="hljs-keyword">int</span> k;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;k);        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">int</span> x, y;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;x, &amp;y);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>||a[y]==<span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">continue</span>;            merge(getfa(x),getfa(y));        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);            <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">int</span> now=getfa(x);                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, a[now]);                del(now);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="不知道什么东西"><a class="markdownIt-Anchor" href="#不知道什么东西"></a> 不知道什么东西</h3><pre><code class="hljs cpp"><span class="hljs-comment">//hdu2089 数位DP入门题</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10001</span>;<span class="hljs-keyword">int</span> a[maxn];<span class="hljs-keyword">int</span> dp[maxn][<span class="hljs-number">2</span>];<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">bool</span> limit)</span> </span>&#123;<span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sta] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dp[pos][sta];<span class="hljs-keyword">int</span> up = limit ? a[pos] : <span class="hljs-number">9</span>;<span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; ++i) &#123;<span class="hljs-keyword">if</span>(pre == <span class="hljs-number">6</span> &amp;&amp; i == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-keyword">if</span>(i == <span class="hljs-number">4</span>) <span class="hljs-keyword">continue</span>;res += dfs(pos - <span class="hljs-number">1</span>, i, i == <span class="hljs-number">6</span>, limit &amp;&amp; i == a[pos]);&#125;<span class="hljs-keyword">if</span>(!limit) dp[pos][sta] = res;<span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x) &#123;a[pos++] = x % <span class="hljs-number">10</span>;x /= <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">return</span> dfs(pos - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">int</span> l, r;<span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;l, &amp;r)) &#123;<span class="hljs-keyword">if</span>(!l &amp;&amp; !r) <span class="hljs-keyword">break</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, solve(r) - solve(l - <span class="hljs-number">1</span>));&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>高精度&lt;重载运算符&gt;</p><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">410</span>;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BigNum</span>  </span><span class="hljs-class">&#123;</span>      <span class="hljs-keyword">int</span> len, s[MAXN];      BigNum ()      &#123;          <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));          len = <span class="hljs-number">1</span>;      &#125;      BigNum (<span class="hljs-keyword">int</span> num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num) &#123; *<span class="hljs-keyword">this</span> = num; &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> num)      &#123;          <span class="hljs-keyword">char</span> s[MAXN];          <span class="hljs-built_in">sprintf</span>(s, <span class="hljs-string">"%d"</span>, num);          *<span class="hljs-keyword">this</span> = s;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *num)      &#123;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; num[i] == <span class="hljs-string">'0'</span>; num++) ;  <span class="hljs-comment">//去前导0  </span>        len = <span class="hljs-built_in">strlen</span>(num);          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) s[i] = num[len-i<span class="hljs-number">-1</span>] - <span class="hljs-string">'0'</span>;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-keyword">const</span> <span class="hljs-comment">//+  </span>    &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; g || i &lt; max(len, b.len); i++)          &#123;              <span class="hljs-keyword">int</span> x = g;              <span class="hljs-keyword">if</span>(i &lt; len) x += s[i];              <span class="hljs-keyword">if</span>(i &lt; b.len) x += b.s[i];              c.s[c.len++] = x % <span class="hljs-number">10</span>;              g = x / <span class="hljs-number">10</span>;          &#125;          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> + b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-keyword">while</span>(len &gt; <span class="hljs-number">1</span> &amp;&amp; !s[len<span class="hljs-number">-1</span>]) len--;      &#125;      BigNum <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> BigNum &amp;b) <span class="hljs-comment">//*  </span>    &#123;          BigNum c;          c.len = len + b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; b.len; j++)              &#123;                  c.s[i+j] += s[i] * b.s[j];              &#125;          &#125;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c.len; i++)          &#123;              c.s[i+<span class="hljs-number">1</span>] += c.s[i]/<span class="hljs-number">10</span>;              c.s[i] %= <span class="hljs-number">10</span>;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> *= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> * b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c;          c.len = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; i &lt; len; i++)          &#123;              <span class="hljs-keyword">int</span> x = s[i] - g;              <span class="hljs-keyword">if</span>(i &lt; b.len) x -= b.s[i];              <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>) g = <span class="hljs-number">0</span>;              <span class="hljs-keyword">else</span>              &#123;                  g = <span class="hljs-number">1</span>;                  x += <span class="hljs-number">10</span>;              &#125;              c.s[c.len++] = x;          &#125;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> -= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> - b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum c, f = <span class="hljs-number">0</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              f = f*<span class="hljs-number">10</span>;              f.s[<span class="hljs-number">0</span>] = s[i];              <span class="hljs-keyword">while</span>(f &gt;= b)              &#123;                  f -= b;                  c.s[i]++;              &#125;          &#125;          c.len = len;          c.clean();          <span class="hljs-keyword">return</span> c;      &#125;      BigNum <span class="hljs-keyword">operator</span> /= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span>  = *<span class="hljs-keyword">this</span> / b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      BigNum <span class="hljs-keyword">operator</span> % (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          BigNum r = *<span class="hljs-keyword">this</span> / b;          r = *<span class="hljs-keyword">this</span> - r*b;          <span class="hljs-keyword">return</span> r;      &#125;      BigNum <span class="hljs-keyword">operator</span> %= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          *<span class="hljs-keyword">this</span> = *<span class="hljs-keyword">this</span> % b;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &lt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &lt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">if</span>(len != b.len) <span class="hljs-keyword">return</span> len &gt; b.len;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)          &#123;              <span class="hljs-keyword">if</span>(s[i] != b.s[i]) <span class="hljs-keyword">return</span> s[i] &gt; b.s[i];          &#125;          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &gt; b) &amp;&amp; !(*<span class="hljs-keyword">this</span> &lt; b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == b);      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &lt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-keyword">const</span> BigNum &amp;b)      &#123;          <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> &gt; b || *<span class="hljs-keyword">this</span> == b;      &#125;      <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">str</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span>  </span><span class="hljs-function">    </span>&#123;          <span class="hljs-built_in">string</span> res = <span class="hljs-string">""</span>;          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) res = <span class="hljs-keyword">char</span>(s[i]+<span class="hljs-string">'0'</span>) + res;          <span class="hljs-keyword">return</span> res;      &#125;  &#125;;  istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream &amp;in, BigNum &amp;x)  &#123;      <span class="hljs-built_in">string</span> s;      in &gt;&gt; s;      x = s.c_str();      <span class="hljs-keyword">return</span> in;  &#125;  ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="hljs-keyword">const</span> BigNum &amp;x)  &#123;      out &lt;&lt; x.str();      <span class="hljs-keyword">return</span> out;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
